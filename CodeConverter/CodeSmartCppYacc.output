State 55 contains 1 shift/reduce conflict.
State 131 contains 2 shift/reduce conflicts.
State 134 contains 2 shift/reduce conflicts.
State 281 contains 2 shift/reduce conflicts.
State 282 contains 2 shift/reduce conflicts.
State 403 contains 1 shift/reduce conflict.
State 536 contains 1 shift/reduce conflict.
State 550 contains 2 shift/reduce conflicts.
State 552 contains 2 shift/reduce conflicts.
State 631 contains 1 shift/reduce conflict.
State 738 contains 3 reduce/reduce conflicts.
State 744 contains 3 reduce/reduce conflicts.
State 745 contains 3 reduce/reduce conflicts.
State 769 contains 2 shift/reduce conflicts.
State 770 contains 2 shift/reduce conflicts.
State 806 contains 3 reduce/reduce conflicts.
State 1078 contains 1 shift/reduce conflict.
State 1097 contains 2 reduce/reduce conflicts.
State 1137 contains 1 shift/reduce conflict.
State 1139 contains 1 shift/reduce conflict.
State 1140 contains 1 shift/reduce conflict.
State 1148 contains 2 reduce/reduce conflicts.
State 1171 contains 2 reduce/reduce conflicts.

Grammar
rule 1    constant -> INTEGERconstant
rule 2    constant -> FLOATINGconstant
rule 3    constant -> OCTALconstant
rule 4    constant -> HEXconstant
rule 5    constant -> CHARACTERconstant
rule 6    string_literal_list -> STRINGliteral
rule 7    string_literal_list -> string_literal_list STRINGliteral
rule 8    paren_identifier_declarator -> scope_opt_identifier
rule 9    paren_identifier_declarator -> scope_opt_complex_name
rule 10   paren_identifier_declarator -> '(' paren_identifier_declarator ')'
rule 11   primary_expression -> global_opt_scope_opt_identifier
rule 12   primary_expression -> global_opt_scope_opt_complex_name
rule 13   primary_expression -> THIS
rule 14   primary_expression -> constant
rule 15   primary_expression -> string_literal_list
rule 16   primary_expression -> '(' comma_expression ')'
rule 17   non_elaborating_type_specifier -> sue_type_specifier
rule 18   non_elaborating_type_specifier -> basic_type_specifier
rule 19   non_elaborating_type_specifier -> typedef_type_specifier
rule 20   non_elaborating_type_specifier -> basic_type_name
rule 21   non_elaborating_type_specifier -> TYPEDEFname
rule 22   non_elaborating_type_specifier -> global_or_scoped_typedefname
rule 23   operator_function_name -> OPERATOR any_operator
rule 24   operator_function_name -> OPERATOR type_qualifier_list operator_function_ptr_opt
rule 25   operator_function_name -> OPERATOR non_elaborating_type_specifier operator_function_ptr_opt
rule 26   operator_function_ptr_opt ->		/* empty */
rule 27   operator_function_ptr_opt -> unary_modifier operator_function_ptr_opt
rule 28   operator_function_ptr_opt -> asterisk_or_ampersand operator_function_ptr_opt
rule 29   any_operator -> '+'
rule 30   any_operator -> '-'
rule 31   any_operator -> '*'
rule 32   any_operator -> '/'
rule 33   any_operator -> '%'
rule 34   any_operator -> '^'
rule 35   any_operator -> '&'
rule 36   any_operator -> '|'
rule 37   any_operator -> '~'
rule 38   any_operator -> '!'
rule 39   any_operator -> '<'
rule 40   any_operator -> '>'
rule 41   any_operator -> LS
rule 42   any_operator -> RS
rule 43   any_operator -> ANDAND
rule 44   any_operator -> OROR
rule 45   any_operator -> ARROW
rule 46   any_operator -> ARROWstar
rule 47   any_operator -> '.'
rule 48   any_operator -> DOTstar
rule 49   any_operator -> ICR
rule 50   any_operator -> DECR
rule 51   any_operator -> LE
rule 52   any_operator -> GE
rule 53   any_operator -> EQ
rule 54   any_operator -> NE
rule 55   any_operator -> assignment_operator
rule 56   any_operator -> '(' ')'
rule 57   any_operator -> '[' ']'
rule 58   any_operator -> NEW
rule 59   any_operator -> DELETE
rule 60   any_operator -> ','
rule 61   type_qualifier_list_opt ->		/* empty */
rule 62   type_qualifier_list_opt -> type_qualifier_list
rule 63   postfix_expression -> primary_expression
rule 64   postfix_expression -> postfix_expression '[' comma_expression ']'
rule 65   postfix_expression -> postfix_expression '(' ')'
rule 66   postfix_expression -> postfix_expression '(' argument_expression_list ')'
rule 67   @1 ->		/* empty */
rule 68   postfix_expression -> postfix_expression @1 '.' member_name
rule 69   @2 ->		/* empty */
rule 70   postfix_expression -> postfix_expression @2 ARROW member_name
rule 71   postfix_expression -> postfix_expression ICR
rule 72   postfix_expression -> postfix_expression DECR
rule 73   postfix_expression -> TYPEDEFname '(' ')'
rule 74   postfix_expression -> global_or_scoped_typedefname '(' ')'
rule 75   postfix_expression -> TYPEDEFname '(' argument_expression_list ')'
rule 76   postfix_expression -> global_or_scoped_typedefname '(' argument_expression_list ')'
rule 77   postfix_expression -> basic_type_name '(' assignment_expression ')'
rule 78   member_name -> scope_opt_identifier
rule 79   member_name -> scope_opt_complex_name
rule 80   member_name -> basic_type_name CLCL '~' basic_type_name
rule 81   member_name -> declaration_qualifier_list CLCL '~' declaration_qualifier_list
rule 82   member_name -> type_qualifier_list CLCL '~' type_qualifier_list
rule 83   argument_expression_list -> assignment_expression
rule 84   argument_expression_list -> argument_expression_list ',' assignment_expression
rule 85   unary_expression -> postfix_expression
rule 86   unary_expression -> ICR unary_expression
rule 87   unary_expression -> DECR unary_expression
rule 88   unary_expression -> asterisk_or_ampersand cast_expression
rule 89   unary_expression -> '-' cast_expression
rule 90   unary_expression -> '+' cast_expression
rule 91   unary_expression -> '~' cast_expression
rule 92   unary_expression -> '!' cast_expression
rule 93   unary_expression -> SIZEOF unary_expression
rule 94   unary_expression -> SIZEOF '(' type_name ')'
rule 95   unary_expression -> allocation_expression
rule 96   allocation_expression -> global_opt_scope_opt_operator_new '(' type_name ')' operator_new_initializer_opt
rule 97   allocation_expression -> global_opt_scope_opt_operator_new '(' argument_expression_list ')' '(' type_name ')' operator_new_initializer_opt
rule 98   allocation_expression -> global_opt_scope_opt_operator_new operator_new_type
rule 99   allocation_expression -> global_opt_scope_opt_operator_new '(' argument_expression_list ')' operator_new_type
rule 100  global_opt_scope_opt_operator_new -> NEW
rule 101  global_opt_scope_opt_operator_new -> global_or_scope NEW
rule 102  operator_new_type -> type_qualifier_list operator_new_declarator_opt operator_new_initializer_opt
rule 103  operator_new_type -> non_elaborating_type_specifier operator_new_declarator_opt operator_new_initializer_opt
rule 104  operator_new_declarator_opt ->		/* empty */
rule 105  operator_new_declarator_opt -> operator_new_array_declarator
rule 106  operator_new_declarator_opt -> asterisk_or_ampersand operator_new_declarator_opt
rule 107  operator_new_declarator_opt -> unary_modifier operator_new_declarator_opt
rule 108  operator_new_array_declarator -> '[' ']'
rule 109  operator_new_array_declarator -> '[' comma_expression ']'
rule 110  operator_new_array_declarator -> operator_new_array_declarator '[' comma_expression ']'
rule 111  operator_new_initializer_opt ->		/* empty */
rule 112  operator_new_initializer_opt -> '(' ')'
rule 113  operator_new_initializer_opt -> '(' argument_expression_list ')'
rule 114  cast_expression -> unary_expression
rule 115  cast_expression -> '(' type_name ')' cast_expression
rule 116  deallocation_expression -> cast_expression
rule 117  deallocation_expression -> global_opt_scope_opt_delete deallocation_expression
rule 118  deallocation_expression -> global_opt_scope_opt_delete '[' comma_expression ']' deallocation_expression
rule 119  deallocation_expression -> global_opt_scope_opt_delete '[' ']' deallocation_expression
rule 120  global_opt_scope_opt_delete -> DELETE
rule 121  global_opt_scope_opt_delete -> global_or_scope DELETE
rule 122  point_member_expression -> deallocation_expression
rule 123  point_member_expression -> point_member_expression DOTstar deallocation_expression
rule 124  point_member_expression -> point_member_expression ARROWstar deallocation_expression
rule 125  multiplicative_expression -> point_member_expression
rule 126  multiplicative_expression -> multiplicative_expression '*' point_member_expression
rule 127  multiplicative_expression -> multiplicative_expression '/' point_member_expression
rule 128  multiplicative_expression -> multiplicative_expression '%' point_member_expression
rule 129  additive_expression -> multiplicative_expression
rule 130  additive_expression -> additive_expression '+' multiplicative_expression
rule 131  additive_expression -> additive_expression '-' multiplicative_expression
rule 132  shift_expression -> additive_expression
rule 133  shift_expression -> shift_expression LS additive_expression
rule 134  shift_expression -> shift_expression RS additive_expression
rule 135  relational_expression -> shift_expression
rule 136  relational_expression -> relational_expression '<' shift_expression
rule 137  relational_expression -> relational_expression '>' shift_expression
rule 138  relational_expression -> relational_expression LE shift_expression
rule 139  relational_expression -> relational_expression GE shift_expression
rule 140  equality_expression -> relational_expression
rule 141  equality_expression -> equality_expression EQ relational_expression
rule 142  equality_expression -> equality_expression NE relational_expression
rule 143  AND_expression -> equality_expression
rule 144  AND_expression -> AND_expression '&' equality_expression
rule 145  exclusive_OR_expression -> AND_expression
rule 146  exclusive_OR_expression -> exclusive_OR_expression '^' AND_expression
rule 147  inclusive_OR_expression -> exclusive_OR_expression
rule 148  inclusive_OR_expression -> inclusive_OR_expression '|' exclusive_OR_expression
rule 149  logical_AND_expression -> inclusive_OR_expression
rule 150  logical_AND_expression -> logical_AND_expression ANDAND inclusive_OR_expression
rule 151  logical_OR_expression -> logical_AND_expression
rule 152  logical_OR_expression -> logical_OR_expression OROR logical_AND_expression
rule 153  conditional_expression -> logical_OR_expression
rule 154  conditional_expression -> logical_OR_expression '?' comma_expression ':' conditional_expression
rule 155  assignment_expression -> conditional_expression
rule 156  assignment_expression -> unary_expression assignment_operator assignment_expression
rule 157  assignment_operator -> '='
rule 158  assignment_operator -> MULTassign
rule 159  assignment_operator -> DIVassign
rule 160  assignment_operator -> MODassign
rule 161  assignment_operator -> PLUSassign
rule 162  assignment_operator -> MINUSassign
rule 163  assignment_operator -> LSassign
rule 164  assignment_operator -> RSassign
rule 165  assignment_operator -> ANDassign
rule 166  assignment_operator -> ERassign
rule 167  assignment_operator -> ORassign
rule 168  comma_expression -> assignment_expression
rule 169  comma_expression -> comma_expression ',' assignment_expression
rule 170  constant_expression -> conditional_expression
rule 171  comma_expression_opt ->		/* empty */
rule 172  comma_expression_opt -> comma_expression
rule 173  declaration -> declaring_list ';'
rule 174  declaration -> default_declaring_list ';'
rule 175  declaration -> sue_declaration_specifier ';'
rule 176  declaration -> sue_type_specifier ';'
rule 177  declaration -> sue_type_specifier_elaboration ';'
rule 178  @3 ->		/* empty */
rule 179  default_declaring_list -> declaration_qualifier_list identifier_declarator @3 initializer_opt
rule 180  @4 ->		/* empty */
rule 181  default_declaring_list -> type_qualifier_list identifier_declarator @4 initializer_opt
rule 182  @5 ->		/* empty */
rule 183  default_declaring_list -> default_declaring_list ',' identifier_declarator @5 initializer_opt
rule 184  default_declaring_list -> declaration_qualifier_list constructed_identifier_declarator
rule 185  default_declaring_list -> type_qualifier_list constructed_identifier_declarator
rule 186  default_declaring_list -> default_declaring_list ',' constructed_identifier_declarator
rule 187  @6 ->		/* empty */
rule 188  declaring_list -> declaration_specifier declarator @6 initializer_opt
rule 189  @7 ->		/* empty */
rule 190  declaring_list -> type_specifier declarator @7 initializer_opt
rule 191  @8 ->		/* empty */
rule 192  declaring_list -> basic_type_name declarator @8 initializer_opt
rule 193  @9 ->		/* empty */
rule 194  declaring_list -> TYPEDEFname declarator @9 initializer_opt
rule 195  @10 ->		/* empty */
rule 196  declaring_list -> global_or_scoped_typedefname declarator @10 initializer_opt
rule 197  @11 ->		/* empty */
rule 198  declaring_list -> declaring_list ',' declarator @11 initializer_opt
rule 199  declaring_list -> declaration_specifier constructed_declarator
rule 200  declaring_list -> type_specifier constructed_declarator
rule 201  declaring_list -> basic_type_name constructed_declarator
rule 202  declaring_list -> TYPEDEFname constructed_declarator
rule 203  declaring_list -> global_or_scoped_typedefname constructed_declarator
rule 204  declaring_list -> declaring_list ',' constructed_declarator
rule 205  constructed_declarator -> nonunary_constructed_identifier_declarator
rule 206  constructed_declarator -> constructed_paren_typedef_declarator
rule 207  constructed_declarator -> simple_paren_typedef_declarator '(' argument_expression_list ')'
rule 208  constructed_declarator -> simple_paren_typedef_declarator postfixing_abstract_declarator '(' argument_expression_list ')'
rule 209  constructed_declarator -> constructed_parameter_typedef_declarator
rule 210  constructed_declarator -> asterisk_or_ampersand constructed_declarator
rule 211  constructed_declarator -> unary_modifier constructed_declarator
rule 212  constructed_paren_typedef_declarator -> '(' paren_typedef_declarator ')' '(' argument_expression_list ')'
rule 213  constructed_paren_typedef_declarator -> '(' paren_typedef_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'
rule 214  constructed_paren_typedef_declarator -> '(' simple_paren_typedef_declarator postfixing_abstract_declarator ')' '(' argument_expression_list ')'
rule 215  constructed_paren_typedef_declarator -> '(' TYPEDEFname postfixing_abstract_declarator ')' '(' argument_expression_list ')'
rule 216  constructed_parameter_typedef_declarator -> TYPEDEFname '(' argument_expression_list ')'
rule 217  constructed_parameter_typedef_declarator -> TYPEDEFname postfixing_abstract_declarator '(' argument_expression_list ')'
rule 218  constructed_parameter_typedef_declarator -> '(' clean_typedef_declarator ')' '(' argument_expression_list ')'
rule 219  constructed_parameter_typedef_declarator -> '(' clean_typedef_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'
rule 220  constructed_identifier_declarator -> nonunary_constructed_identifier_declarator
rule 221  constructed_identifier_declarator -> asterisk_or_ampersand constructed_identifier_declarator
rule 222  constructed_identifier_declarator -> unary_modifier constructed_identifier_declarator
rule 223  nonunary_constructed_identifier_declarator -> paren_identifier_declarator '(' argument_expression_list ')'
rule 224  nonunary_constructed_identifier_declarator -> paren_identifier_declarator postfixing_abstract_declarator '(' argument_expression_list ')'
rule 225  nonunary_constructed_identifier_declarator -> '(' unary_identifier_declarator ')' '(' argument_expression_list ')'
rule 226  nonunary_constructed_identifier_declarator -> '(' unary_identifier_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'
rule 227  declaration_specifier -> basic_declaration_specifier
rule 228  declaration_specifier -> sue_declaration_specifier
rule 229  declaration_specifier -> typedef_declaration_specifier
rule 230  type_specifier -> basic_type_specifier
rule 231  type_specifier -> sue_type_specifier
rule 232  type_specifier -> sue_type_specifier_elaboration
rule 233  type_specifier -> typedef_type_specifier
rule 234  declaration_qualifier_list -> storage_class
rule 235  declaration_qualifier_list -> type_qualifier_list storage_class
rule 236  declaration_qualifier_list -> declaration_qualifier_list declaration_qualifier
rule 237  type_qualifier_list -> type_qualifier
rule 238  type_qualifier_list -> type_qualifier_list type_qualifier
rule 239  declaration_qualifier -> storage_class
rule 240  declaration_qualifier -> type_qualifier
rule 241  type_qualifier -> CONST
rule 242  type_qualifier -> VOLATILE
rule 243  basic_declaration_specifier -> declaration_qualifier_list basic_type_name
rule 244  basic_declaration_specifier -> basic_type_specifier storage_class
rule 245  basic_declaration_specifier -> basic_type_name storage_class
rule 246  basic_declaration_specifier -> basic_declaration_specifier declaration_qualifier
rule 247  basic_declaration_specifier -> basic_declaration_specifier basic_type_name
rule 248  basic_type_specifier -> type_qualifier_list basic_type_name
rule 249  basic_type_specifier -> basic_type_name basic_type_name
rule 250  basic_type_specifier -> basic_type_name type_qualifier
rule 251  basic_type_specifier -> basic_type_specifier type_qualifier
rule 252  basic_type_specifier -> basic_type_specifier basic_type_name
rule 253  sue_declaration_specifier -> declaration_qualifier_list elaborated_type_name
rule 254  sue_declaration_specifier -> declaration_qualifier_list elaborated_type_name_elaboration
rule 255  sue_declaration_specifier -> sue_type_specifier storage_class
rule 256  sue_declaration_specifier -> sue_type_specifier_elaboration storage_class
rule 257  sue_declaration_specifier -> sue_declaration_specifier declaration_qualifier
rule 258  sue_type_specifier_elaboration -> elaborated_type_name_elaboration
rule 259  sue_type_specifier_elaboration -> type_qualifier_list elaborated_type_name_elaboration
rule 260  sue_type_specifier_elaboration -> sue_type_specifier_elaboration type_qualifier
rule 261  sue_type_specifier -> elaborated_type_name
rule 262  sue_type_specifier -> type_qualifier_list elaborated_type_name
rule 263  sue_type_specifier -> sue_type_specifier type_qualifier
rule 264  typedef_declaration_specifier -> declaration_qualifier_list TYPEDEFname
rule 265  typedef_declaration_specifier -> declaration_qualifier_list global_or_scoped_typedefname
rule 266  typedef_declaration_specifier -> typedef_type_specifier storage_class
rule 267  typedef_declaration_specifier -> TYPEDEFname storage_class
rule 268  typedef_declaration_specifier -> global_or_scoped_typedefname storage_class
rule 269  typedef_declaration_specifier -> typedef_declaration_specifier declaration_qualifier
rule 270  typedef_type_specifier -> type_qualifier_list TYPEDEFname
rule 271  typedef_type_specifier -> type_qualifier_list global_or_scoped_typedefname
rule 272  typedef_type_specifier -> TYPEDEFname type_qualifier
rule 273  typedef_type_specifier -> global_or_scoped_typedefname type_qualifier
rule 274  typedef_type_specifier -> typedef_type_specifier type_qualifier
rule 275  storage_class -> EXTERN
rule 276  storage_class -> TYPEDEF
rule 277  storage_class -> STATIC
rule 278  storage_class -> AUTO
rule 279  storage_class -> REGISTER
rule 280  storage_class -> FRIEND
rule 281  storage_class -> OVERLOAD
rule 282  storage_class -> INLINE
rule 283  storage_class -> VIRTUAL
rule 284  basic_type_name -> INT
rule 285  basic_type_name -> CHAR
rule 286  basic_type_name -> SHORT
rule 287  basic_type_name -> LONG
rule 288  basic_type_name -> FLOAT
rule 289  basic_type_name -> DOUBLE
rule 290  basic_type_name -> SIGNED
rule 291  basic_type_name -> UNSIGNED
rule 292  basic_type_name -> VOID
rule 293  elaborated_type_name_elaboration -> aggregate_name_elaboration
rule 294  elaborated_type_name_elaboration -> enum_name_elaboration
rule 295  elaborated_type_name -> aggregate_name
rule 296  elaborated_type_name -> enum_name
rule 297  aggregate_name_elaboration -> aggregate_name derivation_opt '{' member_declaration_list_opt '}'
rule 298  aggregate_name_elaboration -> aggregate_key derivation_opt '{' member_declaration_list_opt '}'
rule 299  aggregate_name -> aggregate_key tag_name
rule 300  aggregate_name -> global_scope scope aggregate_key tag_name
rule 301  aggregate_name -> global_scope aggregate_key tag_name
rule 302  aggregate_name -> scope aggregate_key tag_name
rule 303  derivation_opt ->		/* empty */
rule 304  derivation_opt -> ':' derivation_list
rule 305  derivation_list -> parent_class
rule 306  derivation_list -> derivation_list ',' parent_class
rule 307  parent_class -> global_opt_scope_opt_typedefname
rule 308  parent_class -> VIRTUAL access_specifier_opt global_opt_scope_opt_typedefname
rule 309  parent_class -> access_specifier virtual_opt global_opt_scope_opt_typedefname
rule 310  virtual_opt ->		/* empty */
rule 311  virtual_opt -> VIRTUAL
rule 312  access_specifier_opt ->		/* empty */
rule 313  access_specifier_opt -> access_specifier
rule 314  access_specifier -> PUBLIC
rule 315  access_specifier -> PRIVATE
rule 316  access_specifier -> PROTECTED
rule 317  aggregate_key -> STRUCT
rule 318  aggregate_key -> UNION
rule 319  aggregate_key -> CLASS
rule 320  member_declaration_list_opt ->		/* empty */
rule 321  member_declaration_list_opt -> member_declaration_list_opt member_declaration
rule 322  member_declaration -> member_declaring_list ';'
rule 323  member_declaration -> member_default_declaring_list ';'
rule 324  member_declaration -> access_specifier ':'
rule 325  member_declaration -> new_function_definition
rule 326  member_declaration -> constructor_function_in_class
rule 327  member_declaration -> sue_type_specifier ';'
rule 328  member_declaration -> sue_type_specifier_elaboration ';'
rule 329  member_declaration -> identifier_declarator ';'
rule 330  member_declaration -> typedef_declaration_specifier ';'
rule 331  member_declaration -> sue_declaration_specifier ';'
rule 332  member_default_declaring_list -> type_qualifier_list identifier_declarator member_pure_opt
rule 333  member_default_declaring_list -> declaration_qualifier_list identifier_declarator member_pure_opt
rule 334  member_default_declaring_list -> member_default_declaring_list ',' identifier_declarator member_pure_opt
rule 335  member_default_declaring_list -> type_qualifier_list bit_field_identifier_declarator
rule 336  member_default_declaring_list -> declaration_qualifier_list bit_field_identifier_declarator
rule 337  member_default_declaring_list -> member_default_declaring_list ',' bit_field_identifier_declarator
rule 338  member_declaring_list -> type_specifier declarator member_pure_opt
rule 339  member_declaring_list -> basic_type_name declarator member_pure_opt
rule 340  member_declaring_list -> global_or_scoped_typedefname declarator member_pure_opt
rule 341  member_declaring_list -> member_conflict_declaring_item
rule 342  member_declaring_list -> member_declaring_list ',' declarator member_pure_opt
rule 343  member_declaring_list -> type_specifier bit_field_declarator
rule 344  member_declaring_list -> basic_type_name bit_field_declarator
rule 345  member_declaring_list -> TYPEDEFname bit_field_declarator
rule 346  member_declaring_list -> global_or_scoped_typedefname bit_field_declarator
rule 347  member_declaring_list -> declaration_specifier bit_field_declarator
rule 348  member_declaring_list -> member_declaring_list ',' bit_field_declarator
rule 349  member_conflict_declaring_item -> TYPEDEFname identifier_declarator member_pure_opt
rule 350  member_conflict_declaring_item -> TYPEDEFname parameter_typedef_declarator member_pure_opt
rule 351  member_conflict_declaring_item -> TYPEDEFname simple_paren_typedef_declarator member_pure_opt
rule 352  member_conflict_declaring_item -> declaration_specifier identifier_declarator member_pure_opt
rule 353  member_conflict_declaring_item -> declaration_specifier parameter_typedef_declarator member_pure_opt
rule 354  member_conflict_declaring_item -> declaration_specifier simple_paren_typedef_declarator member_pure_opt
rule 355  member_conflict_declaring_item -> member_conflict_paren_declaring_item
rule 356  member_conflict_paren_declaring_item -> TYPEDEFname asterisk_or_ampersand '(' simple_paren_typedef_declarator ')' member_pure_opt
rule 357  member_conflict_paren_declaring_item -> TYPEDEFname unary_modifier '(' simple_paren_typedef_declarator ')' member_pure_opt
rule 358  member_conflict_paren_declaring_item -> TYPEDEFname asterisk_or_ampersand '(' TYPEDEFname ')' member_pure_opt
rule 359  member_conflict_paren_declaring_item -> TYPEDEFname unary_modifier '(' TYPEDEFname ')' member_pure_opt
rule 360  member_conflict_paren_declaring_item -> TYPEDEFname asterisk_or_ampersand paren_typedef_declarator member_pure_opt
rule 361  member_conflict_paren_declaring_item -> TYPEDEFname unary_modifier paren_typedef_declarator member_pure_opt
rule 362  member_conflict_paren_declaring_item -> declaration_specifier asterisk_or_ampersand '(' simple_paren_typedef_declarator ')' member_pure_opt
rule 363  member_conflict_paren_declaring_item -> declaration_specifier unary_modifier '(' simple_paren_typedef_declarator ')' member_pure_opt
rule 364  member_conflict_paren_declaring_item -> declaration_specifier asterisk_or_ampersand '(' TYPEDEFname ')' member_pure_opt
rule 365  member_conflict_paren_declaring_item -> declaration_specifier unary_modifier '(' TYPEDEFname ')' member_pure_opt
rule 366  member_conflict_paren_declaring_item -> declaration_specifier asterisk_or_ampersand paren_typedef_declarator member_pure_opt
rule 367  member_conflict_paren_declaring_item -> declaration_specifier unary_modifier paren_typedef_declarator member_pure_opt
rule 368  member_conflict_paren_declaring_item -> member_conflict_paren_postfix_declaring_item
rule 369  member_conflict_paren_postfix_declaring_item -> TYPEDEFname '(' paren_typedef_declarator ')' member_pure_opt
rule 370  member_conflict_paren_postfix_declaring_item -> TYPEDEFname '(' simple_paren_typedef_declarator postfixing_abstract_declarator ')' member_pure_opt
rule 371  member_conflict_paren_postfix_declaring_item -> TYPEDEFname '(' TYPEDEFname postfixing_abstract_declarator ')' member_pure_opt
rule 372  member_conflict_paren_postfix_declaring_item -> TYPEDEFname '(' paren_typedef_declarator ')' postfixing_abstract_declarator member_pure_opt
rule 373  member_conflict_paren_postfix_declaring_item -> declaration_specifier '(' paren_typedef_declarator ')' member_pure_opt
rule 374  member_conflict_paren_postfix_declaring_item -> declaration_specifier '(' simple_paren_typedef_declarator postfixing_abstract_declarator ')' member_pure_opt
rule 375  member_conflict_paren_postfix_declaring_item -> declaration_specifier '(' TYPEDEFname postfixing_abstract_declarator ')' member_pure_opt
rule 376  member_conflict_paren_postfix_declaring_item -> declaration_specifier '(' paren_typedef_declarator ')' postfixing_abstract_declarator member_pure_opt
rule 377  member_pure_opt ->		/* empty */
rule 378  member_pure_opt -> '=' OCTALconstant
rule 379  bit_field_declarator -> bit_field_identifier_declarator
rule 380  @12 ->		/* empty */
rule 381  bit_field_declarator -> TYPEDEFname @12 ':' constant_expression
rule 382  bit_field_identifier_declarator -> ':' constant_expression
rule 383  @13 ->		/* empty */
rule 384  bit_field_identifier_declarator -> identifier_declarator @13 ':' constant_expression
rule 385  enum_name_elaboration -> global_opt_scope_opt_enum_key '{' enumerator_list '}'
rule 386  enum_name_elaboration -> enum_name '{' enumerator_list '}'
rule 387  enum_name -> global_opt_scope_opt_enum_key tag_name
rule 388  global_opt_scope_opt_enum_key -> ENUM
rule 389  global_opt_scope_opt_enum_key -> global_or_scope ENUM
rule 390  enumerator_list -> enumerator_list_no_trailing_comma
rule 391  enumerator_list -> enumerator_list_no_trailing_comma ','
rule 392  enumerator_list_no_trailing_comma -> enumerator_name enumerator_value_opt
rule 393  enumerator_list_no_trailing_comma -> enumerator_list_no_trailing_comma ',' enumerator_name enumerator_value_opt
rule 394  enumerator_name -> IDENTIFIER
rule 395  enumerator_name -> TYPEDEFname
rule 396  enumerator_value_opt ->		/* empty */
rule 397  enumerator_value_opt -> '=' constant_expression
rule 398  parameter_type_list -> '(' ')' type_qualifier_list_opt
rule 399  parameter_type_list -> '(' type_name ')' type_qualifier_list_opt
rule 400  parameter_type_list -> '(' type_name initializer ')' type_qualifier_list_opt
rule 401  parameter_type_list -> '(' named_parameter_type_list ')' type_qualifier_list_opt
rule 402  old_parameter_type_list -> '(' ')'
rule 403  old_parameter_type_list -> '(' type_name ')'
rule 404  old_parameter_type_list -> '(' type_name initializer ')'
rule 405  old_parameter_type_list -> '(' named_parameter_type_list ')'
rule 406  named_parameter_type_list -> parameter_list
rule 407  named_parameter_type_list -> parameter_list comma_opt_ellipsis
rule 408  named_parameter_type_list -> type_name comma_opt_ellipsis
rule 409  named_parameter_type_list -> type_name initializer comma_opt_ellipsis
rule 410  named_parameter_type_list -> ELLIPSIS
rule 411  comma_opt_ellipsis -> ELLIPSIS
rule 412  comma_opt_ellipsis -> ',' ELLIPSIS
rule 413  parameter_list -> non_casting_parameter_declaration
rule 414  parameter_list -> non_casting_parameter_declaration initializer
rule 415  parameter_list -> type_name ',' parameter_declaration
rule 416  parameter_list -> type_name initializer ',' parameter_declaration
rule 417  parameter_list -> parameter_list ',' parameter_declaration
rule 418  parameter_declaration -> type_name
rule 419  parameter_declaration -> type_name initializer
rule 420  parameter_declaration -> non_casting_parameter_declaration
rule 421  parameter_declaration -> non_casting_parameter_declaration initializer
rule 422  non_casting_parameter_declaration -> declaration_specifier
rule 423  non_casting_parameter_declaration -> declaration_specifier abstract_declarator
rule 424  non_casting_parameter_declaration -> declaration_specifier identifier_declarator
rule 425  non_casting_parameter_declaration -> declaration_specifier parameter_typedef_declarator
rule 426  non_casting_parameter_declaration -> declaration_qualifier_list
rule 427  non_casting_parameter_declaration -> declaration_qualifier_list abstract_declarator
rule 428  non_casting_parameter_declaration -> declaration_qualifier_list identifier_declarator
rule 429  non_casting_parameter_declaration -> type_specifier identifier_declarator
rule 430  non_casting_parameter_declaration -> type_specifier parameter_typedef_declarator
rule 431  non_casting_parameter_declaration -> basic_type_name identifier_declarator
rule 432  non_casting_parameter_declaration -> basic_type_name parameter_typedef_declarator
rule 433  non_casting_parameter_declaration -> TYPEDEFname identifier_declarator
rule 434  non_casting_parameter_declaration -> TYPEDEFname parameter_typedef_declarator
rule 435  non_casting_parameter_declaration -> global_or_scoped_typedefname identifier_declarator
rule 436  non_casting_parameter_declaration -> global_or_scoped_typedefname parameter_typedef_declarator
rule 437  non_casting_parameter_declaration -> type_qualifier_list identifier_declarator
rule 438  type_name -> type_specifier
rule 439  type_name -> basic_type_name
rule 440  type_name -> TYPEDEFname
rule 441  type_name -> global_or_scoped_typedefname
rule 442  type_name -> type_qualifier_list
rule 443  type_name -> type_specifier abstract_declarator
rule 444  type_name -> basic_type_name abstract_declarator
rule 445  type_name -> TYPEDEFname abstract_declarator
rule 446  type_name -> global_or_scoped_typedefname abstract_declarator
rule 447  type_name -> type_qualifier_list abstract_declarator
rule 448  initializer_opt ->		/* empty */
rule 449  initializer_opt -> initializer
rule 450  initializer -> '=' initializer_group
rule 451  initializer_group -> '{' initializer_list '}'
rule 452  initializer_group -> '{' initializer_list ',' '}'
rule 453  initializer_group -> assignment_expression
rule 454  initializer_list -> initializer_group
rule 455  initializer_list -> initializer_list ',' initializer_group
rule 456  statement -> labeled_statement
rule 457  statement -> compound_statement
rule 458  statement -> expression_statement
rule 459  statement -> selection_statement
rule 460  statement -> iteration_statement
rule 461  statement -> jump_statement
rule 462  statement -> declaration
rule 463  labeled_statement -> label ':' statement
rule 464  labeled_statement -> CASE constant_expression ':' statement
rule 465  labeled_statement -> DEFAULT ':' statement
rule 466  compound_statement -> '{' statement_list_opt '}'
rule 467  declaration_list -> declaration
rule 468  declaration_list -> declaration_list declaration
rule 469  statement_list_opt ->		/* empty */
rule 470  statement_list_opt -> statement_list_opt statement
rule 471  expression_statement -> comma_expression_opt ';'
rule 472  selection_statement -> IF '(' comma_expression ')' statement
rule 473  selection_statement -> IF '(' comma_expression ')' statement ELSE statement
rule 474  selection_statement -> SWITCH '(' comma_expression ')' statement
rule 475  iteration_statement -> WHILE '(' comma_expression_opt ')' statement
rule 476  iteration_statement -> DO statement WHILE '(' comma_expression ')' ';'
rule 477  iteration_statement -> FOR '(' comma_expression_opt ';' comma_expression_opt ';' comma_expression_opt ')' statement
rule 478  iteration_statement -> FOR '(' declaration comma_expression_opt ';' comma_expression_opt ')' statement
rule 479  jump_statement -> GOTO label ';'
rule 480  jump_statement -> CONTINUE ';'
rule 481  jump_statement -> BREAK ';'
rule 482  jump_statement -> RETURN comma_expression_opt ';'
rule 483  label -> IDENTIFIER
rule 484  label -> TYPEDEFname
rule 485  translation_unit ->		/* empty */
rule 486  translation_unit -> translation_unit external_definition
rule 487  external_definition -> function_declaration
rule 488  external_definition -> function_definition
rule 489  external_definition -> declaration
rule 490  external_definition -> linkage_specifier function_declaration
rule 491  external_definition -> linkage_specifier function_definition
rule 492  external_definition -> linkage_specifier declaration
rule 493  external_definition -> linkage_specifier '{' translation_unit '}'
rule 494  linkage_specifier -> EXTERN STRINGliteral
rule 495  function_declaration -> identifier_declarator ';'
rule 496  function_declaration -> constructor_function_declaration ';'
rule 497  function_definition -> new_function_definition
rule 498  function_definition -> old_function_definition
rule 499  function_definition -> constructor_function_definition
rule 500  new_function_definition -> identifier_declarator compound_statement
rule 501  new_function_definition -> declaration_specifier declarator compound_statement
rule 502  new_function_definition -> type_specifier declarator compound_statement
rule 503  new_function_definition -> basic_type_name declarator compound_statement
rule 504  new_function_definition -> TYPEDEFname declarator compound_statement
rule 505  new_function_definition -> global_or_scoped_typedefname declarator compound_statement
rule 506  new_function_definition -> declaration_qualifier_list identifier_declarator compound_statement
rule 507  new_function_definition -> type_qualifier_list identifier_declarator compound_statement
rule 508  @14 ->		/* empty */
rule 509  old_function_definition -> old_function_declarator @14 old_function_body
rule 510  @15 ->		/* empty */
rule 511  old_function_definition -> declaration_specifier old_function_declarator @15 old_function_body
rule 512  @16 ->		/* empty */
rule 513  old_function_definition -> type_specifier old_function_declarator @16 old_function_body
rule 514  @17 ->		/* empty */
rule 515  old_function_definition -> basic_type_name old_function_declarator @17 old_function_body
rule 516  @18 ->		/* empty */
rule 517  old_function_definition -> TYPEDEFname old_function_declarator @18 old_function_body
rule 518  @19 ->		/* empty */
rule 519  old_function_definition -> global_or_scoped_typedefname old_function_declarator @19 old_function_body
rule 520  @20 ->		/* empty */
rule 521  old_function_definition -> declaration_qualifier_list old_function_declarator @20 old_function_body
rule 522  @21 ->		/* empty */
rule 523  old_function_definition -> type_qualifier_list old_function_declarator @21 old_function_body
rule 524  old_function_body -> declaration_list compound_statement
rule 525  old_function_body -> compound_statement
rule 526  constructor_function_definition -> global_or_scoped_typedefname parameter_type_list constructor_init_list_opt compound_statement
rule 527  constructor_function_definition -> declaration_specifier parameter_type_list constructor_init_list_opt compound_statement
rule 528  constructor_function_declaration -> global_or_scoped_typedefname parameter_type_list
rule 529  constructor_function_declaration -> declaration_specifier parameter_type_list
rule 530  constructor_function_in_class -> declaration_specifier constructor_parameter_list_and_body
rule 531  constructor_function_in_class -> TYPEDEFname constructor_parameter_list_and_body
rule 532  constructor_parameter_list_and_body -> '(' ')' type_qualifier_list_opt ';'
rule 533  constructor_parameter_list_and_body -> '(' type_name initializer ')' type_qualifier_list_opt ';'
rule 534  constructor_parameter_list_and_body -> '(' named_parameter_type_list ')' type_qualifier_list_opt ';'
rule 535  constructor_parameter_list_and_body -> '(' ')' type_qualifier_list_opt constructor_init_list_opt compound_statement
rule 536  constructor_parameter_list_and_body -> '(' type_name initializer ')' type_qualifier_list_opt constructor_init_list_opt compound_statement
rule 537  constructor_parameter_list_and_body -> '(' named_parameter_type_list ')' type_qualifier_list_opt constructor_init_list_opt compound_statement
rule 538  constructor_parameter_list_and_body -> constructor_conflicting_parameter_list_and_body
rule 539  constructor_conflicting_parameter_list_and_body -> '(' type_specifier ')' type_qualifier_list_opt ';'
rule 540  constructor_conflicting_parameter_list_and_body -> '(' basic_type_name ')' type_qualifier_list_opt ';'
rule 541  constructor_conflicting_parameter_list_and_body -> '(' TYPEDEFname ')' type_qualifier_list_opt ';'
rule 542  constructor_conflicting_parameter_list_and_body -> '(' global_or_scoped_typedefname ')' type_qualifier_list_opt ';'
rule 543  constructor_conflicting_parameter_list_and_body -> '(' type_qualifier_list ')' type_qualifier_list_opt ';'
rule 544  constructor_conflicting_parameter_list_and_body -> '(' type_specifier abstract_declarator ')' type_qualifier_list_opt ';'
rule 545  constructor_conflicting_parameter_list_and_body -> '(' basic_type_name abstract_declarator ')' type_qualifier_list_opt ';'
rule 546  constructor_conflicting_parameter_list_and_body -> '(' global_or_scoped_typedefname abstract_declarator ')' type_qualifier_list_opt ';'
rule 547  constructor_conflicting_parameter_list_and_body -> '(' type_qualifier_list abstract_declarator ')' type_qualifier_list_opt ';'
rule 548  constructor_conflicting_parameter_list_and_body -> '(' type_specifier ')' type_qualifier_list_opt constructor_init_list_opt compound_statement
rule 549  constructor_conflicting_parameter_list_and_body -> '(' basic_type_name ')' type_qualifier_list_opt constructor_init_list_opt compound_statement
rule 550  constructor_conflicting_parameter_list_and_body -> '(' TYPEDEFname ')' type_qualifier_list_opt constructor_init_list_opt compound_statement
rule 551  constructor_conflicting_parameter_list_and_body -> '(' global_or_scoped_typedefname ')' type_qualifier_list_opt constructor_init_list_opt compound_statement
rule 552  constructor_conflicting_parameter_list_and_body -> '(' type_qualifier_list ')' type_qualifier_list_opt constructor_init_list_opt compound_statement
rule 553  constructor_conflicting_parameter_list_and_body -> '(' type_specifier abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement
rule 554  constructor_conflicting_parameter_list_and_body -> '(' basic_type_name abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement
rule 555  constructor_conflicting_parameter_list_and_body -> '(' global_or_scoped_typedefname abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement
rule 556  constructor_conflicting_parameter_list_and_body -> '(' type_qualifier_list abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement
rule 557  constructor_conflicting_parameter_list_and_body -> constructor_conflicting_typedef_declarator
rule 558  constructor_conflicting_typedef_declarator -> '(' TYPEDEFname unary_abstract_declarator ')' type_qualifier_list_opt ';'
rule 559  constructor_conflicting_typedef_declarator -> '(' TYPEDEFname unary_abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement
rule 560  constructor_conflicting_typedef_declarator -> '(' TYPEDEFname postfix_abstract_declarator ')' type_qualifier_list_opt ';'
rule 561  constructor_conflicting_typedef_declarator -> '(' TYPEDEFname postfix_abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement
rule 562  constructor_conflicting_typedef_declarator -> '(' TYPEDEFname postfixing_abstract_declarator ')' type_qualifier_list_opt ';'
rule 563  constructor_conflicting_typedef_declarator -> '(' TYPEDEFname postfixing_abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement
rule 564  constructor_init_list_opt ->		/* empty */
rule 565  constructor_init_list_opt -> constructor_init_list
rule 566  constructor_init_list -> ':' constructor_init
rule 567  constructor_init_list -> constructor_init_list ',' constructor_init
rule 568  constructor_init -> IDENTIFIER '(' argument_expression_list ')'
rule 569  constructor_init -> IDENTIFIER '(' ')'
rule 570  constructor_init -> TYPEDEFname '(' argument_expression_list ')'
rule 571  constructor_init -> TYPEDEFname '(' ')'
rule 572  constructor_init -> global_or_scoped_typedefname '(' argument_expression_list ')'
rule 573  constructor_init -> global_or_scoped_typedefname '(' ')'
rule 574  constructor_init -> '(' argument_expression_list ')'
rule 575  constructor_init -> '(' ')'
rule 576  declarator -> identifier_declarator
rule 577  declarator -> typedef_declarator
rule 578  typedef_declarator -> paren_typedef_declarator
rule 579  typedef_declarator -> simple_paren_typedef_declarator
rule 580  typedef_declarator -> parameter_typedef_declarator
rule 581  parameter_typedef_declarator -> TYPEDEFname
rule 582  parameter_typedef_declarator -> TYPEDEFname postfixing_abstract_declarator
rule 583  parameter_typedef_declarator -> clean_typedef_declarator
rule 584  clean_typedef_declarator -> clean_postfix_typedef_declarator
rule 585  clean_typedef_declarator -> asterisk_or_ampersand parameter_typedef_declarator
rule 586  clean_typedef_declarator -> unary_modifier parameter_typedef_declarator
rule 587  clean_postfix_typedef_declarator -> '(' clean_typedef_declarator ')'
rule 588  clean_postfix_typedef_declarator -> '(' clean_typedef_declarator ')' postfixing_abstract_declarator
rule 589  paren_typedef_declarator -> postfix_paren_typedef_declarator
rule 590  paren_typedef_declarator -> asterisk_or_ampersand '(' simple_paren_typedef_declarator ')'
rule 591  paren_typedef_declarator -> unary_modifier '(' simple_paren_typedef_declarator ')'
rule 592  paren_typedef_declarator -> asterisk_or_ampersand '(' TYPEDEFname ')'
rule 593  paren_typedef_declarator -> unary_modifier '(' TYPEDEFname ')'
rule 594  paren_typedef_declarator -> asterisk_or_ampersand paren_typedef_declarator
rule 595  paren_typedef_declarator -> unary_modifier paren_typedef_declarator
rule 596  postfix_paren_typedef_declarator -> '(' paren_typedef_declarator ')'
rule 597  postfix_paren_typedef_declarator -> '(' simple_paren_typedef_declarator postfixing_abstract_declarator ')'
rule 598  postfix_paren_typedef_declarator -> '(' TYPEDEFname postfixing_abstract_declarator ')'
rule 599  postfix_paren_typedef_declarator -> '(' paren_typedef_declarator ')' postfixing_abstract_declarator
rule 600  simple_paren_typedef_declarator -> '(' TYPEDEFname ')'
rule 601  simple_paren_typedef_declarator -> '(' simple_paren_typedef_declarator ')'
rule 602  identifier_declarator -> unary_identifier_declarator
rule 603  identifier_declarator -> paren_identifier_declarator
rule 604  unary_identifier_declarator -> postfix_identifier_declarator
rule 605  unary_identifier_declarator -> asterisk_or_ampersand identifier_declarator
rule 606  unary_identifier_declarator -> unary_modifier identifier_declarator
rule 607  postfix_identifier_declarator -> paren_identifier_declarator postfixing_abstract_declarator
rule 608  postfix_identifier_declarator -> '(' unary_identifier_declarator ')'
rule 609  postfix_identifier_declarator -> '(' unary_identifier_declarator ')' postfixing_abstract_declarator
rule 610  old_function_declarator -> postfix_old_function_declarator
rule 611  old_function_declarator -> asterisk_or_ampersand old_function_declarator
rule 612  old_function_declarator -> unary_modifier old_function_declarator
rule 613  postfix_old_function_declarator -> paren_identifier_declarator '(' argument_expression_list ')'
rule 614  postfix_old_function_declarator -> '(' old_function_declarator ')'
rule 615  postfix_old_function_declarator -> '(' old_function_declarator ')' old_postfixing_abstract_declarator
rule 616  old_postfixing_abstract_declarator -> array_abstract_declarator
rule 617  old_postfixing_abstract_declarator -> old_parameter_type_list
rule 618  abstract_declarator -> unary_abstract_declarator
rule 619  abstract_declarator -> postfix_abstract_declarator
rule 620  abstract_declarator -> postfixing_abstract_declarator
rule 621  postfixing_abstract_declarator -> array_abstract_declarator
rule 622  postfixing_abstract_declarator -> parameter_type_list
rule 623  array_abstract_declarator -> '[' ']'
rule 624  array_abstract_declarator -> '[' constant_expression ']'
rule 625  array_abstract_declarator -> array_abstract_declarator '[' constant_expression ']'
rule 626  unary_abstract_declarator -> asterisk_or_ampersand
rule 627  unary_abstract_declarator -> unary_modifier
rule 628  unary_abstract_declarator -> asterisk_or_ampersand abstract_declarator
rule 629  unary_abstract_declarator -> unary_modifier abstract_declarator
rule 630  postfix_abstract_declarator -> '(' unary_abstract_declarator ')'
rule 631  postfix_abstract_declarator -> '(' postfix_abstract_declarator ')'
rule 632  postfix_abstract_declarator -> '(' postfixing_abstract_declarator ')'
rule 633  postfix_abstract_declarator -> '(' unary_abstract_declarator ')' postfixing_abstract_declarator
rule 634  asterisk_or_ampersand -> '*'
rule 635  asterisk_or_ampersand -> '&'
rule 636  unary_modifier -> scope '*' type_qualifier_list_opt
rule 637  unary_modifier -> asterisk_or_ampersand type_qualifier_list
rule 638  scoping_name -> tag_name
rule 639  scoping_name -> aggregate_key tag_name
rule 640  scope -> scoping_name CLCL
rule 641  scope -> scope scoping_name CLCL
rule 642  tag_name -> IDENTIFIER
rule 643  tag_name -> TYPEDEFname
rule 644  @22 ->		/* empty */
rule 645  global_scope -> @22 CLCL
rule 646  global_or_scope -> global_scope
rule 647  global_or_scope -> scope
rule 648  global_or_scope -> global_scope scope
rule 649  scope_opt_identifier -> IDENTIFIER
rule 650  scope_opt_identifier -> scope IDENTIFIER
rule 651  scope_opt_complex_name -> complex_name
rule 652  scope_opt_complex_name -> scope complex_name
rule 653  complex_name -> '~' TYPEDEFname
rule 654  complex_name -> operator_function_name
rule 655  global_opt_scope_opt_identifier -> global_scope scope_opt_identifier
rule 656  global_opt_scope_opt_identifier -> scope_opt_identifier
rule 657  global_opt_scope_opt_complex_name -> global_scope scope_opt_complex_name
rule 658  global_opt_scope_opt_complex_name -> scope_opt_complex_name
rule 659  scoped_typedefname -> scope TYPEDEFname
rule 660  global_or_scoped_typedefname -> scoped_typedefname
rule 661  global_or_scoped_typedefname -> global_scope scoped_typedefname
rule 662  global_or_scoped_typedefname -> global_scope TYPEDEFname
rule 663  global_opt_scope_opt_typedefname -> TYPEDEFname
rule 664  global_opt_scope_opt_typedefname -> global_or_scoped_typedefname

Terminals, with rules where they appear

$ (-1)
'!' (33) 38 92
'%' (37) 33 128
'&' (38) 35 144 635
'(' (40) 10 16 56 65 66 73 74 75 76 77 94 96 97 99 112 113 115 207
    208 212 213 214 215 216 217 218 219 223 224 225 226 356 357 358
    359 362 363 364 365 369 370 371 372 373 374 375 376 398 399 400
    401 402 403 404 405 472 473 474 475 476 477 478 532 533 534 535
    536 537 539 540 541 542 543 544 545 546 547 548 549 550 551 552
    553 554 555 556 558 559 560 561 562 563 568 569 570 571 572 573
    574 575 587 588 590 591 592 593 596 597 598 599 600 601 608 609
    613 614 615 630 631 632 633
')' (41) 10 16 56 65 66 73 74 75 76 77 94 96 97 99 112 113 115 207
    208 212 213 214 215 216 217 218 219 223 224 225 226 356 357 358
    359 362 363 364 365 369 370 371 372 373 374 375 376 398 399 400
    401 402 403 404 405 472 473 474 475 476 477 478 532 533 534 535
    536 537 539 540 541 542 543 544 545 546 547 548 549 550 551 552
    553 554 555 556 558 559 560 561 562 563 568 569 570 571 572 573
    574 575 587 588 590 591 592 593 596 597 598 599 600 601 608 609
    613 614 615 630 631 632 633
'*' (42) 31 126 634 636
'+' (43) 29 90 130
',' (44) 60 84 169 183 186 198 204 306 334 337 342 348 391 393 412
    415 416 417 452 455 567
'-' (45) 30 89 131
'.' (46) 47 68
'/' (47) 32 127
':' (58) 154 304 324 381 382 384 463 464 465 566
';' (59) 173 174 175 176 177 322 323 327 328 329 330 331 471 476 477
    478 479 480 481 482 495 496 532 533 534 539 540 541 542 543 544
    545 546 547 558 560 562
'<' (60) 39 136
'=' (61) 157 378 397 450
'>' (62) 40 137
'?' (63) 154
'[' (91) 57 64 108 109 110 118 119 623 624 625
']' (93) 57 64 108 109 110 118 119 623 624 625
'^' (94) 34 146
'{' (123) 297 298 385 386 451 452 466 493
'|' (124) 36 148
'}' (125) 297 298 385 386 451 452 466 493
'~' (126) 37 80 81 82 91 653
error (256)
AUTO (257) 278
DOUBLE (258) 289
INT (259) 284
STRUCT (260) 317
BREAK (261) 481
ELSE (262) 473
LONG (263) 287
SWITCH (264) 474
CASE (265) 464
ENUM (266) 388 389
REGISTER (267) 279
TYPEDEF (268) 276
CHAR (269) 285
EXTERN (270) 275 494
RETURN (271) 482
UNION (272) 318
CONST (273) 241
FLOAT (274) 288
SHORT (275) 286
UNSIGNED (276) 291
CONTINUE (277) 480
FOR (278) 477 478
SIGNED (279) 290
VOID (280) 292
DEFAULT (281) 465
GOTO (282) 479
SIZEOF (283) 93 94
VOLATILE (284) 242
DO (285) 476
IF (286) 472 473
STATIC (287) 277
WHILE (288) 475 476
NEW (289) 58 100 101
DELETE (290) 59 120 121
THIS (291) 13
OPERATOR (292) 23 24 25
CLASS (293) 319
PUBLIC (294) 314
PROTECTED (295) 316
PRIVATE (296) 315
VIRTUAL (297) 283 308 311
FRIEND (298) 280
INLINE (299) 282
OVERLOAD (300) 281
IDENTIFIER (301) 394 483 568 569 642 649 650
STRINGliteral (302) 6 7 494
FLOATINGconstant (303) 2
INTEGERconstant (304) 1
CHARACTERconstant (305) 5
OCTALconstant (306) 3 378
HEXconstant (307) 4
TYPEDEFname (308) 21 73 75 194 202 215 216 217 264 267 270 272 345
    349 350 351 356 357 358 359 360 361 364 365 369 370 371 372 375
    381 395 433 434 440 445 484 504 517 531 541 550 558 559 560 561
    562 563 570 571 581 582 592 593 598 600 643 653 659 662 663
ARROW (309) 45 70
ICR (310) 49 71 86
DECR (311) 50 72 87
LS (312) 41 133
RS (313) 42 134
LE (314) 51 138
GE (315) 52 139
EQ (316) 53 141
NE (317) 54 142
ANDAND (318) 43 150
OROR (319) 44 152
ELLIPSIS (320) 410 411 412
CLCL (321) 80 81 82 640 641 645
DOTstar (322) 48 123
ARROWstar (323) 46 124
MULTassign (324) 158
DIVassign (325) 159
MODassign (326) 160
PLUSassign (327) 161
MINUSassign (328) 162
LSassign (329) 163
RSassign (330) 164
ANDassign (331) 165
ERassign (332) 166
ORassign (333) 167

Nonterminals, with rules where they appear

constant (104)
    on left: 1 2 3 4 5, on right: 14
string_literal_list (105)
    on left: 6 7, on right: 7 15
paren_identifier_declarator (106)
    on left: 8 9 10, on right: 10 223 224 603 607 613
primary_expression (107)
    on left: 11 12 13 14 15 16, on right: 63
non_elaborating_type_specifier (108)
    on left: 17 18 19 20 21 22, on right: 25 103
operator_function_name (109)
    on left: 23 24 25, on right: 654
operator_function_ptr_opt (110)
    on left: 26 27 28, on right: 24 25 27 28
any_operator (111)
    on left: 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46
    47 48 49 50 51 52 53 54 55 56 57 58 59 60, on right: 23
type_qualifier_list_opt (112)
    on left: 61 62, on right: 398 399 400 401 532 533 534 535 536 537
    539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554
    555 556 558 559 560 561 562 563 636
postfix_expression (113)
    on left: 63 64 65 66 68 70 71 72 73 74 75 76 77,
    on right: 64 65 66 68 70 71 72 85
@1 (114)
    on left: 67, on right: 68
@2 (115)
    on left: 69, on right: 70
member_name (116)
    on left: 78 79 80 81 82, on right: 68 70
argument_expression_list (117)
    on left: 83 84, on right: 66 75 76 84 97 99 113 207 208 212 213
    214 215 216 217 218 219 223 224 225 226 568 570 572 574 613
unary_expression (118)
    on left: 85 86 87 88 89 90 91 92 93 94 95, on right: 86 87 93 114
    156
allocation_expression (119)
    on left: 96 97 98 99, on right: 95
global_opt_scope_opt_operator_new (120)
    on left: 100 101, on right: 96 97 98 99
operator_new_type (121)
    on left: 102 103, on right: 98 99
operator_new_declarator_opt (122)
    on left: 104 105 106 107, on right: 102 103 106 107
operator_new_array_declarator (123)
    on left: 108 109 110, on right: 105 110
operator_new_initializer_opt (124)
    on left: 111 112 113, on right: 96 97 102 103
cast_expression (125)
    on left: 114 115, on right: 88 89 90 91 92 115 116
deallocation_expression (126)
    on left: 116 117 118 119, on right: 117 118 119 122 123 124
global_opt_scope_opt_delete (127)
    on left: 120 121, on right: 117 118 119
point_member_expression (128)
    on left: 122 123 124, on right: 123 124 125 126 127 128
multiplicative_expression (129)
    on left: 125 126 127 128, on right: 126 127 128 129 130 131
additive_expression (130)
    on left: 129 130 131, on right: 130 131 132 133 134
shift_expression (131)
    on left: 132 133 134, on right: 133 134 135 136 137 138 139
relational_expression (132)
    on left: 135 136 137 138 139, on right: 136 137 138 139 140 141
    142
equality_expression (133)
    on left: 140 141 142, on right: 141 142 143 144
AND_expression (134)
    on left: 143 144, on right: 144 145 146
exclusive_OR_expression (135)
    on left: 145 146, on right: 146 147 148
inclusive_OR_expression (136)
    on left: 147 148, on right: 148 149 150
logical_AND_expression (137)
    on left: 149 150, on right: 150 151 152
logical_OR_expression (138)
    on left: 151 152, on right: 152 153 154
conditional_expression (139)
    on left: 153 154, on right: 154 155 170
assignment_expression (140)
    on left: 155 156, on right: 77 83 84 156 168 169 453
assignment_operator (141)
    on left: 157 158 159 160 161 162 163 164 165 166 167,
    on right: 55 156
comma_expression (142)
    on left: 168 169, on right: 16 64 109 110 118 154 169 172 472 473
    474 476
constant_expression (143)
    on left: 170, on right: 381 382 384 397 464 624 625
comma_expression_opt (144)
    on left: 171 172, on right: 471 475 477 478 482
declaration (145)
    on left: 173 174 175 176 177, on right: 462 467 468 478 489 492
default_declaring_list (146)
    on left: 179 181 183 184 185 186, on right: 174 183 186
@3 (147)
    on left: 178, on right: 179
@4 (148)
    on left: 180, on right: 181
@5 (149)
    on left: 182, on right: 183
declaring_list (150)
    on left: 188 190 192 194 196 198 199 200 201 202 203 204,
    on right: 173 198 204
@6 (151)
    on left: 187, on right: 188
@7 (152)
    on left: 189, on right: 190
@8 (153)
    on left: 191, on right: 192
@9 (154)
    on left: 193, on right: 194
@10 (155)
    on left: 195, on right: 196
@11 (156)
    on left: 197, on right: 198
constructed_declarator (157)
    on left: 205 206 207 208 209 210 211, on right: 199 200 201 202
    203 204 210 211
constructed_paren_typedef_declarator (158)
    on left: 212 213 214 215, on right: 206
constructed_parameter_typedef_declarator (159)
    on left: 216 217 218 219, on right: 209
constructed_identifier_declarator (160)
    on left: 220 221 222, on right: 184 185 186 221 222
nonunary_constructed_identifier_declarator (161)
    on left: 223 224 225 226, on right: 205 220
declaration_specifier (162)
    on left: 227 228 229, on right: 188 199 347 352 353 354 362 363
    364 365 366 367 373 374 375 376 422 423 424 425 501 511 527 529
    530
type_specifier (163)
    on left: 230 231 232 233, on right: 190 200 338 343 429 430 438
    443 502 513 539 544 548 553
declaration_qualifier_list (164)
    on left: 234 235 236, on right: 81 179 184 236 243 253 254 264
    265 333 336 426 427 428 506 521
type_qualifier_list (165)
    on left: 237 238, on right: 24 62 82 102 181 185 235 238 248 259
    262 270 271 332 335 437 442 447 507 523 543 547 552 556 637
declaration_qualifier (166)
    on left: 239 240, on right: 236 246 257 269
type_qualifier (167)
    on left: 241 242, on right: 237 238 240 250 251 260 263 272 273
    274
basic_declaration_specifier (168)
    on left: 243 244 245 246 247, on right: 227 246 247
basic_type_specifier (169)
    on left: 248 249 250 251 252, on right: 18 230 244 251 252
sue_declaration_specifier (170)
    on left: 253 254 255 256 257, on right: 175 228 257 331
sue_type_specifier_elaboration (171)
    on left: 258 259 260, on right: 177 232 256 260 328
sue_type_specifier (172)
    on left: 261 262 263, on right: 17 176 231 255 263 327
typedef_declaration_specifier (173)
    on left: 264 265 266 267 268 269, on right: 229 269 330
typedef_type_specifier (174)
    on left: 270 271 272 273 274, on right: 19 233 266 274
storage_class (175)
    on left: 275 276 277 278 279 280 281 282 283, on right: 234 235
    239 244 245 255 256 266 267 268
basic_type_name (176)
    on left: 284 285 286 287 288 289 290 291 292, on right: 20 77 80
    192 201 243 245 247 248 249 250 252 339 344 431 432 439 444 503
    515 540 545 549 554
elaborated_type_name_elaboration (177)
    on left: 293 294, on right: 254 258 259
elaborated_type_name (178)
    on left: 295 296, on right: 253 261 262
aggregate_name_elaboration (179)
    on left: 297 298, on right: 293
aggregate_name (180)
    on left: 299 300 301 302, on right: 295 297
derivation_opt (181)
    on left: 303 304, on right: 297 298
derivation_list (182)
    on left: 305 306, on right: 304 306
parent_class (183)
    on left: 307 308 309, on right: 305 306
virtual_opt (184)
    on left: 310 311, on right: 309
access_specifier_opt (185)
    on left: 312 313, on right: 308
access_specifier (186)
    on left: 314 315 316, on right: 309 313 324
aggregate_key (187)
    on left: 317 318 319, on right: 298 299 300 301 302 639
member_declaration_list_opt (188)
    on left: 320 321, on right: 297 298 321
member_declaration (189)
    on left: 322 323 324 325 326 327 328 329 330 331,
    on right: 321
member_default_declaring_list (190)
    on left: 332 333 334 335 336 337, on right: 323 334 337
member_declaring_list (191)
    on left: 338 339 340 341 342 343 344 345 346 347 348,
    on right: 322 342 348
member_conflict_declaring_item (192)
    on left: 349 350 351 352 353 354 355, on right: 341
member_conflict_paren_declaring_item (193)
    on left: 356 357 358 359 360 361 362 363 364 365 366 367 368,
    on right: 355
member_conflict_paren_postfix_declaring_item (194)
    on left: 369 370 371 372 373 374 375 376, on right: 368
member_pure_opt (195)
    on left: 377 378, on right: 332 333 334 338 339 340 342 349 350
    351 352 353 354 356 357 358 359 360 361 362 363 364 365 366 367
    369 370 371 372 373 374 375 376
bit_field_declarator (196)
    on left: 379 381, on right: 343 344 345 346 347 348
@12 (197)
    on left: 380, on right: 381
bit_field_identifier_declarator (198)
    on left: 382 384, on right: 335 336 337 379
@13 (199)
    on left: 383, on right: 384
enum_name_elaboration (200)
    on left: 385 386, on right: 294
enum_name (201)
    on left: 387, on right: 296 386
global_opt_scope_opt_enum_key (202)
    on left: 388 389, on right: 385 387
enumerator_list (203)
    on left: 390 391, on right: 385 386
enumerator_list_no_trailing_comma (204)
    on left: 392 393, on right: 390 391 393
enumerator_name (205)
    on left: 394 395, on right: 392 393
enumerator_value_opt (206)
    on left: 396 397, on right: 392 393
parameter_type_list (207)
    on left: 398 399 400 401, on right: 526 527 528 529 622
old_parameter_type_list (208)
    on left: 402 403 404 405, on right: 617
named_parameter_type_list (209)
    on left: 406 407 408 409 410, on right: 401 405 534 537
comma_opt_ellipsis (210)
    on left: 411 412, on right: 407 408 409
parameter_list (211)
    on left: 413 414 415 416 417, on right: 406 407 417
parameter_declaration (212)
    on left: 418 419 420 421, on right: 415 416 417
non_casting_parameter_declaration (213)
    on left: 422 423 424 425 426 427 428 429 430 431 432 433 434 435
    436 437, on right: 413 414 420 421
type_name (214)
    on left: 438 439 440 441 442 443 444 445 446 447,
    on right: 94 96 97 115 399 400 403 404 408 409 415 416 418 419
    533 536
initializer_opt (215)
    on left: 448 449, on right: 179 181 183 188 190 192 194 196 198
initializer (216)
    on left: 450, on right: 400 404 409 414 416 419 421 449 533 536
initializer_group (217)
    on left: 451 452 453, on right: 450 454 455
initializer_list (218)
    on left: 454 455, on right: 451 452 455
statement (219)
    on left: 456 457 458 459 460 461 462, on right: 463 464 465 470
    472 473 474 475 476 477 478
labeled_statement (220)
    on left: 463 464 465, on right: 456
compound_statement (221)
    on left: 466, on right: 457 500 501 502 503 504 505 506 507 524
    525 526 527 535 536 537 548 549 550 551 552 553 554 555 556 559
    561 563
declaration_list (222)
    on left: 467 468, on right: 468 524
statement_list_opt (223)
    on left: 469 470, on right: 466 470
expression_statement (224)
    on left: 471, on right: 458
selection_statement (225)
    on left: 472 473 474, on right: 459
iteration_statement (226)
    on left: 475 476 477 478, on right: 460
jump_statement (227)
    on left: 479 480 481 482, on right: 461
label (228)
    on left: 483 484, on right: 463 479
translation_unit (229)
    on left: 485 486, on right: 486 493
external_definition (230)
    on left: 487 488 489 490 491 492 493, on right: 486
linkage_specifier (231)
    on left: 494, on right: 490 491 492 493
function_declaration (232)
    on left: 495 496, on right: 487 490
function_definition (233)
    on left: 497 498 499, on right: 488 491
new_function_definition (234)
    on left: 500 501 502 503 504 505 506 507, on right: 325 497
old_function_definition (235)
    on left: 509 511 513 515 517 519 521 523, on right: 498
@14 (236)
    on left: 508, on right: 509
@15 (237)
    on left: 510, on right: 511
@16 (238)
    on left: 512, on right: 513
@17 (239)
    on left: 514, on right: 515
@18 (240)
    on left: 516, on right: 517
@19 (241)
    on left: 518, on right: 519
@20 (242)
    on left: 520, on right: 521
@21 (243)
    on left: 522, on right: 523
old_function_body (244)
    on left: 524 525, on right: 509 511 513 515 517 519 521 523
constructor_function_definition (245)
    on left: 526 527, on right: 499
constructor_function_declaration (246)
    on left: 528 529, on right: 496
constructor_function_in_class (247)
    on left: 530 531, on right: 326
constructor_parameter_list_and_body (248)
    on left: 532 533 534 535 536 537 538, on right: 530 531
constructor_conflicting_parameter_list_and_body (249)
    on left: 539 540 541 542 543 544 545 546 547 548 549 550 551 552
    553 554 555 556 557, on right: 538
constructor_conflicting_typedef_declarator (250)
    on left: 558 559 560 561 562 563, on right: 557
constructor_init_list_opt (251)
    on left: 564 565, on right: 526 527 535 536 537 548 549 550 551
    552 553 554 555 556 559 561 563
constructor_init_list (252)
    on left: 566 567, on right: 565 567
constructor_init (253)
    on left: 568 569 570 571 572 573 574 575, on right: 566 567
declarator (254)
    on left: 576 577, on right: 188 190 192 194 196 198 338 339 340
    342 501 502 503 504 505
typedef_declarator (255)
    on left: 578 579 580, on right: 577
parameter_typedef_declarator (256)
    on left: 581 582 583, on right: 350 353 425 430 432 434 436 580
    585 586
clean_typedef_declarator (257)
    on left: 584 585 586, on right: 218 219 583 587 588
clean_postfix_typedef_declarator (258)
    on left: 587 588, on right: 584
paren_typedef_declarator (259)
    on left: 589 590 591 592 593 594 595, on right: 212 213 360 361
    366 367 369 372 373 376 578 594 595 596 599
postfix_paren_typedef_declarator (260)
    on left: 596 597 598 599, on right: 589
simple_paren_typedef_declarator (261)
    on left: 600 601, on right: 207 208 214 351 354 356 357 362 363
    370 374 579 590 591 597 601
identifier_declarator (262)
    on left: 602 603, on right: 179 181 183 329 332 333 334 349 352
    384 424 428 429 431 433 435 437 495 500 506 507 576 605 606
unary_identifier_declarator (263)
    on left: 604 605 606, on right: 225 226 602 608 609
postfix_identifier_declarator (264)
    on left: 607 608 609, on right: 604
old_function_declarator (265)
    on left: 610 611 612, on right: 509 511 513 515 517 519 521 523
    611 612 614 615
postfix_old_function_declarator (266)
    on left: 613 614 615, on right: 610
old_postfixing_abstract_declarator (267)
    on left: 616 617, on right: 615
abstract_declarator (268)
    on left: 618 619 620, on right: 423 427 443 444 445 446 447 544
    545 546 547 553 554 555 556 628 629
postfixing_abstract_declarator (269)
    on left: 621 622, on right: 208 213 214 215 217 219 224 226 370
    371 372 374 375 376 562 563 582 588 597 598 599 607 609 620 632
    633
array_abstract_declarator (270)
    on left: 623 624 625, on right: 616 621 625
unary_abstract_declarator (271)
    on left: 626 627 628 629, on right: 558 559 618 630 633
postfix_abstract_declarator (272)
    on left: 630 631 632 633, on right: 560 561 619 631
asterisk_or_ampersand (273)
    on left: 634 635, on right: 28 88 106 210 221 356 358 360 362 364
    366 585 590 592 594 605 611 626 628 637
unary_modifier (274)
    on left: 636 637, on right: 27 107 211 222 357 359 361 363 365
    367 586 591 593 595 606 612 627 629
scoping_name (275)
    on left: 638 639, on right: 640 641
scope (276)
    on left: 640 641, on right: 300 302 636 641 647 648 650 652 659
tag_name (277)
    on left: 642 643, on right: 299 300 301 302 387 638 639
global_scope (278)
    on left: 645, on right: 300 301 646 648 655 657 661 662
@22 (279)
    on left: 644, on right: 645
global_or_scope (280)
    on left: 646 647 648, on right: 101 121 389
scope_opt_identifier (281)
    on left: 649 650, on right: 8 78 655 656
scope_opt_complex_name (282)
    on left: 651 652, on right: 9 79 657 658
complex_name (283)
    on left: 653 654, on right: 651 652
global_opt_scope_opt_identifier (284)
    on left: 655 656, on right: 11
global_opt_scope_opt_complex_name (285)
    on left: 657 658, on right: 12
scoped_typedefname (286)
    on left: 659, on right: 660 661
global_or_scoped_typedefname (287)
    on left: 660 661 662, on right: 22 74 76 196 203 265 268 271 273
    340 346 435 436 441 446 505 519 526 528 542 546 551 555 572 573
    664
global_opt_scope_opt_typedefname (288)
    on left: 663 664, on right: 307 308 309


state 0

    $default	reduce using rule 485 (translation_unit)

    translation_unit	go to state 1



state 1

    translation_unit  ->  translation_unit . external_definition   (rule 486)

    $   	go to state 1256
    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 11
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 28
    '(' 	shift, and go to state 29
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    $default	reduce using rule 644 (@22)

    paren_identifier_declarator	go to state 33
    operator_function_name	go to state 34
    declaration	go to state 35
    default_declaring_list	go to state 36
    declaring_list	go to state 37
    declaration_specifier	go to state 38
    type_specifier	go to state 39
    declaration_qualifier_list	go to state 40
    type_qualifier_list	go to state 41
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 45
    sue_type_specifier_elaboration	go to state 46
    sue_type_specifier	go to state 47
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 51
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    external_definition	go to state 60
    linkage_specifier	go to state 61
    function_declaration	go to state 62
    function_definition	go to state 63
    new_function_definition	go to state 64
    old_function_definition	go to state 65
    constructor_function_definition	go to state 66
    constructor_function_declaration	go to state 67
    identifier_declarator	go to state 68
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    old_function_declarator	go to state 71
    postfix_old_function_declarator	go to state 72
    asterisk_or_ampersand	go to state 73
    unary_modifier	go to state 74
    scoping_name	go to state 75
    scope	go to state 76
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 85



state 2

    storage_class  ->  AUTO .   (rule 278)

    $default	reduce using rule 278 (storage_class)



state 3

    basic_type_name  ->  DOUBLE .   (rule 289)

    $default	reduce using rule 289 (basic_type_name)



state 4

    basic_type_name  ->  INT .   (rule 284)

    $default	reduce using rule 284 (basic_type_name)



state 5

    aggregate_key  ->  STRUCT .   (rule 317)

    $default	reduce using rule 317 (aggregate_key)



state 6

    basic_type_name  ->  LONG .   (rule 287)

    $default	reduce using rule 287 (basic_type_name)



state 7

    global_opt_scope_opt_enum_key  ->  ENUM .   (rule 388)

    $default	reduce using rule 388 (global_opt_scope_opt_enum_key)



state 8

    storage_class  ->  REGISTER .   (rule 279)

    $default	reduce using rule 279 (storage_class)



state 9

    storage_class  ->  TYPEDEF .   (rule 276)

    $default	reduce using rule 276 (storage_class)



state 10

    basic_type_name  ->  CHAR .   (rule 285)

    $default	reduce using rule 285 (basic_type_name)



state 11

    storage_class  ->  EXTERN .   (rule 275)
    linkage_specifier  ->  EXTERN . STRINGliteral   (rule 494)

    STRINGliteral	shift, and go to state 86

    $default	reduce using rule 275 (storage_class)



state 12

    aggregate_key  ->  UNION .   (rule 318)

    $default	reduce using rule 318 (aggregate_key)



state 13

    type_qualifier  ->  CONST .   (rule 241)

    $default	reduce using rule 241 (type_qualifier)



state 14

    basic_type_name  ->  FLOAT .   (rule 288)

    $default	reduce using rule 288 (basic_type_name)



state 15

    basic_type_name  ->  SHORT .   (rule 286)

    $default	reduce using rule 286 (basic_type_name)



state 16

    basic_type_name  ->  UNSIGNED .   (rule 291)

    $default	reduce using rule 291 (basic_type_name)



state 17

    basic_type_name  ->  SIGNED .   (rule 290)

    $default	reduce using rule 290 (basic_type_name)



state 18

    basic_type_name  ->  VOID .   (rule 292)

    $default	reduce using rule 292 (basic_type_name)



state 19

    type_qualifier  ->  VOLATILE .   (rule 242)

    $default	reduce using rule 242 (type_qualifier)



state 20

    storage_class  ->  STATIC .   (rule 277)

    $default	reduce using rule 277 (storage_class)



state 21

    operator_function_name  ->  OPERATOR . any_operator   (rule 23)
    operator_function_name  ->  OPERATOR . type_qualifier_list operator_function_ptr_opt   (rule 24)
    operator_function_name  ->  OPERATOR . non_elaborating_type_specifier operator_function_ptr_opt   (rule 25)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    NEW 	shift, and go to state 87
    DELETE	shift, and go to state 88
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 90
    ARROW	shift, and go to state 91
    ICR 	shift, and go to state 92
    DECR	shift, and go to state 93
    LS  	shift, and go to state 94
    RS  	shift, and go to state 95
    LE  	shift, and go to state 96
    GE  	shift, and go to state 97
    EQ  	shift, and go to state 98
    NE  	shift, and go to state 99
    ANDAND	shift, and go to state 100
    OROR	shift, and go to state 101
    DOTstar	shift, and go to state 102
    ARROWstar	shift, and go to state 103
    MULTassign	shift, and go to state 104
    DIVassign	shift, and go to state 105
    MODassign	shift, and go to state 106
    PLUSassign	shift, and go to state 107
    MINUSassign	shift, and go to state 108
    LSassign	shift, and go to state 109
    RSassign	shift, and go to state 110
    ANDassign	shift, and go to state 111
    ERassign	shift, and go to state 112
    ORassign	shift, and go to state 113
    '(' 	shift, and go to state 114
    '+' 	shift, and go to state 115
    '-' 	shift, and go to state 116
    '*' 	shift, and go to state 117
    '/' 	shift, and go to state 118
    '%' 	shift, and go to state 119
    '^' 	shift, and go to state 120
    '&' 	shift, and go to state 121
    '|' 	shift, and go to state 122
    '~' 	shift, and go to state 123
    '!' 	shift, and go to state 124
    '<' 	shift, and go to state 125
    '>' 	shift, and go to state 126
    '.' 	shift, and go to state 127
    '[' 	shift, and go to state 128
    ',' 	shift, and go to state 129
    '=' 	shift, and go to state 130

    $default	reduce using rule 644 (@22)

    non_elaborating_type_specifier	go to state 131
    any_operator	go to state 132
    assignment_operator	go to state 133
    type_qualifier_list	go to state 134
    type_qualifier	go to state 42
    basic_type_specifier	go to state 135
    sue_type_specifier	go to state 136
    typedef_type_specifier	go to state 137
    basic_type_name	go to state 138
    elaborated_type_name	go to state 53
    aggregate_name	go to state 139
    aggregate_key	go to state 140
    enum_name	go to state 141
    global_opt_scope_opt_enum_key	go to state 142
    scoping_name	go to state 75
    scope	go to state 143
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 144



state 22

    aggregate_key  ->  CLASS .   (rule 319)

    $default	reduce using rule 319 (aggregate_key)



state 23

    storage_class  ->  VIRTUAL .   (rule 283)

    $default	reduce using rule 283 (storage_class)



state 24

    storage_class  ->  FRIEND .   (rule 280)

    $default	reduce using rule 280 (storage_class)



state 25

    storage_class  ->  INLINE .   (rule 282)

    $default	reduce using rule 282 (storage_class)



state 26

    storage_class  ->  OVERLOAD .   (rule 281)

    $default	reduce using rule 281 (storage_class)



state 27

    tag_name  ->  IDENTIFIER .   (rule 642)
    scope_opt_identifier  ->  IDENTIFIER .   (rule 649)

    CLCL	reduce using rule 642 (tag_name)
    $default	reduce using rule 649 (scope_opt_identifier)



state 28

    declaring_list  ->  TYPEDEFname . declarator @9 initializer_opt   (rule 194)
    declaring_list  ->  TYPEDEFname . constructed_declarator   (rule 202)
    typedef_declaration_specifier  ->  TYPEDEFname . storage_class   (rule 267)
    typedef_type_specifier  ->  TYPEDEFname . type_qualifier   (rule 272)
    new_function_definition  ->  TYPEDEFname . declarator compound_statement   (rule 504)
    old_function_definition  ->  TYPEDEFname . old_function_declarator @18 old_function_body   (rule 517)
    tag_name  ->  TYPEDEFname .   (rule 643)

    AUTO	shift, and go to state 2
    STRUCT	shift, and go to state 5
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 146
    '(' 	shift, and go to state 147
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    $default	reduce using rule 643 (tag_name)

    paren_identifier_declarator	go to state 148
    operator_function_name	go to state 34
    constructed_declarator	go to state 149
    constructed_paren_typedef_declarator	go to state 150
    constructed_parameter_typedef_declarator	go to state 151
    nonunary_constructed_identifier_declarator	go to state 152
    type_qualifier	go to state 153
    storage_class	go to state 154
    aggregate_key	go to state 155
    declarator	go to state 156
    typedef_declarator	go to state 157
    parameter_typedef_declarator	go to state 158
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 161
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 163
    identifier_declarator	go to state 164
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    old_function_declarator	go to state 165
    postfix_old_function_declarator	go to state 72
    asterisk_or_ampersand	go to state 166
    unary_modifier	go to state 167
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 29

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)
    postfix_old_function_declarator  ->  '(' . old_function_declarator ')'   (rule 614)
    postfix_old_function_declarator  ->  '(' . old_function_declarator ')' old_postfixing_abstract_declarator   (rule 615)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 169
    '(' 	shift, and go to state 29
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 170
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    unary_identifier_declarator	go to state 171
    postfix_identifier_declarator	go to state 70
    old_function_declarator	go to state 172
    postfix_old_function_declarator	go to state 72
    asterisk_or_ampersand	go to state 73
    unary_modifier	go to state 74
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 30

    asterisk_or_ampersand  ->  '*' .   (rule 634)

    $default	reduce using rule 634 (asterisk_or_ampersand)



state 31

    asterisk_or_ampersand  ->  '&' .   (rule 635)

    $default	reduce using rule 635 (asterisk_or_ampersand)



state 32

    complex_name  ->  '~' . TYPEDEFname   (rule 653)

    TYPEDEFname	shift, and go to state 173



state 33

    identifier_declarator  ->  paren_identifier_declarator .   (rule 603)
    postfix_identifier_declarator  ->  paren_identifier_declarator . postfixing_abstract_declarator   (rule 607)
    postfix_old_function_declarator  ->  paren_identifier_declarator . '(' argument_expression_list ')'   (rule 613)

    '(' 	shift, and go to state 174
    '[' 	shift, and go to state 175

    $default	reduce using rule 603 (identifier_declarator)

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 177
    array_abstract_declarator	go to state 178



state 34

    complex_name  ->  operator_function_name .   (rule 654)

    $default	reduce using rule 654 (complex_name)



state 35

    external_definition  ->  declaration .   (rule 489)

    $default	reduce using rule 489 (external_definition)



state 36

    declaration  ->  default_declaring_list . ';'   (rule 174)
    default_declaring_list  ->  default_declaring_list . ',' identifier_declarator @5 initializer_opt   (rule 183)
    default_declaring_list  ->  default_declaring_list . ',' constructed_identifier_declarator   (rule 186)

    ',' 	shift, and go to state 179
    ';' 	shift, and go to state 180



state 37

    declaration  ->  declaring_list . ';'   (rule 173)
    declaring_list  ->  declaring_list . ',' declarator @11 initializer_opt   (rule 198)
    declaring_list  ->  declaring_list . ',' constructed_declarator   (rule 204)

    ',' 	shift, and go to state 181
    ';' 	shift, and go to state 182



state 38

    declaring_list  ->  declaration_specifier . declarator @6 initializer_opt   (rule 188)
    declaring_list  ->  declaration_specifier . constructed_declarator   (rule 199)
    new_function_definition  ->  declaration_specifier . declarator compound_statement   (rule 501)
    old_function_definition  ->  declaration_specifier . old_function_declarator @15 old_function_body   (rule 511)
    constructor_function_definition  ->  declaration_specifier . parameter_type_list constructor_init_list_opt compound_statement   (rule 527)
    constructor_function_declaration  ->  declaration_specifier . parameter_type_list   (rule 529)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 146
    '(' 	shift, and go to state 183
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 148
    operator_function_name	go to state 34
    constructed_declarator	go to state 184
    constructed_paren_typedef_declarator	go to state 150
    constructed_parameter_typedef_declarator	go to state 151
    nonunary_constructed_identifier_declarator	go to state 152
    aggregate_key	go to state 155
    parameter_type_list	go to state 185
    declarator	go to state 186
    typedef_declarator	go to state 157
    parameter_typedef_declarator	go to state 158
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 161
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 163
    identifier_declarator	go to state 164
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    old_function_declarator	go to state 187
    postfix_old_function_declarator	go to state 72
    asterisk_or_ampersand	go to state 166
    unary_modifier	go to state 167
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 39

    declaring_list  ->  type_specifier . declarator @7 initializer_opt   (rule 190)
    declaring_list  ->  type_specifier . constructed_declarator   (rule 200)
    new_function_definition  ->  type_specifier . declarator compound_statement   (rule 502)
    old_function_definition  ->  type_specifier . old_function_declarator @16 old_function_body   (rule 513)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 146
    '(' 	shift, and go to state 147
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 148
    operator_function_name	go to state 34
    constructed_declarator	go to state 188
    constructed_paren_typedef_declarator	go to state 150
    constructed_parameter_typedef_declarator	go to state 151
    nonunary_constructed_identifier_declarator	go to state 152
    aggregate_key	go to state 155
    declarator	go to state 189
    typedef_declarator	go to state 157
    parameter_typedef_declarator	go to state 158
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 161
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 163
    identifier_declarator	go to state 164
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    old_function_declarator	go to state 190
    postfix_old_function_declarator	go to state 72
    asterisk_or_ampersand	go to state 166
    unary_modifier	go to state 167
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 40

    default_declaring_list  ->  declaration_qualifier_list . identifier_declarator @3 initializer_opt   (rule 179)
    default_declaring_list  ->  declaration_qualifier_list . constructed_identifier_declarator   (rule 184)
    declaration_qualifier_list  ->  declaration_qualifier_list . declaration_qualifier   (rule 236)
    basic_declaration_specifier  ->  declaration_qualifier_list . basic_type_name   (rule 243)
    sue_declaration_specifier  ->  declaration_qualifier_list . elaborated_type_name   (rule 253)
    sue_declaration_specifier  ->  declaration_qualifier_list . elaborated_type_name_elaboration   (rule 254)
    typedef_declaration_specifier  ->  declaration_qualifier_list . TYPEDEFname   (rule 264)
    typedef_declaration_specifier  ->  declaration_qualifier_list . global_or_scoped_typedefname   (rule 265)
    new_function_definition  ->  declaration_qualifier_list . identifier_declarator compound_statement   (rule 506)
    old_function_definition  ->  declaration_qualifier_list . old_function_declarator @20 old_function_body   (rule 521)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 191
    '(' 	shift, and go to state 192
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    $default	reduce using rule 644 (@22)

    paren_identifier_declarator	go to state 148
    operator_function_name	go to state 34
    constructed_identifier_declarator	go to state 193
    nonunary_constructed_identifier_declarator	go to state 194
    declaration_qualifier	go to state 195
    type_qualifier	go to state 196
    storage_class	go to state 197
    basic_type_name	go to state 198
    elaborated_type_name_elaboration	go to state 199
    elaborated_type_name	go to state 200
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    identifier_declarator	go to state 201
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    old_function_declarator	go to state 202
    postfix_old_function_declarator	go to state 72
    asterisk_or_ampersand	go to state 203
    unary_modifier	go to state 204
    scoping_name	go to state 75
    scope	go to state 76
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 205



state 41

    default_declaring_list  ->  type_qualifier_list . identifier_declarator @4 initializer_opt   (rule 181)
    default_declaring_list  ->  type_qualifier_list . constructed_identifier_declarator   (rule 185)
    declaration_qualifier_list  ->  type_qualifier_list . storage_class   (rule 235)
    type_qualifier_list  ->  type_qualifier_list . type_qualifier   (rule 238)
    basic_type_specifier  ->  type_qualifier_list . basic_type_name   (rule 248)
    sue_type_specifier_elaboration  ->  type_qualifier_list . elaborated_type_name_elaboration   (rule 259)
    sue_type_specifier  ->  type_qualifier_list . elaborated_type_name   (rule 262)
    typedef_type_specifier  ->  type_qualifier_list . TYPEDEFname   (rule 270)
    typedef_type_specifier  ->  type_qualifier_list . global_or_scoped_typedefname   (rule 271)
    new_function_definition  ->  type_qualifier_list . identifier_declarator compound_statement   (rule 507)
    old_function_definition  ->  type_qualifier_list . old_function_declarator @21 old_function_body   (rule 523)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 206
    '(' 	shift, and go to state 192
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    $default	reduce using rule 644 (@22)

    paren_identifier_declarator	go to state 148
    operator_function_name	go to state 34
    constructed_identifier_declarator	go to state 207
    nonunary_constructed_identifier_declarator	go to state 194
    type_qualifier	go to state 208
    storage_class	go to state 209
    basic_type_name	go to state 210
    elaborated_type_name_elaboration	go to state 211
    elaborated_type_name	go to state 212
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    identifier_declarator	go to state 213
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    old_function_declarator	go to state 214
    postfix_old_function_declarator	go to state 72
    asterisk_or_ampersand	go to state 203
    unary_modifier	go to state 204
    scoping_name	go to state 75
    scope	go to state 76
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 215



state 42

    type_qualifier_list  ->  type_qualifier .   (rule 237)

    $default	reduce using rule 237 (type_qualifier_list)



state 43

    declaration_specifier  ->  basic_declaration_specifier .   (rule 227)
    basic_declaration_specifier  ->  basic_declaration_specifier . declaration_qualifier   (rule 246)
    basic_declaration_specifier  ->  basic_declaration_specifier . basic_type_name   (rule 247)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    LONG	shift, and go to state 6
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26

    $default	reduce using rule 227 (declaration_specifier)

    declaration_qualifier	go to state 216
    type_qualifier	go to state 196
    storage_class	go to state 197
    basic_type_name	go to state 217



state 44

    type_specifier  ->  basic_type_specifier .   (rule 230)
    basic_declaration_specifier  ->  basic_type_specifier . storage_class   (rule 244)
    basic_type_specifier  ->  basic_type_specifier . type_qualifier   (rule 251)
    basic_type_specifier  ->  basic_type_specifier . basic_type_name   (rule 252)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    LONG	shift, and go to state 6
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26

    $default	reduce using rule 230 (type_specifier)

    type_qualifier	go to state 218
    storage_class	go to state 219
    basic_type_name	go to state 220



state 45

    declaration  ->  sue_declaration_specifier . ';'   (rule 175)
    declaration_specifier  ->  sue_declaration_specifier .   (rule 228)
    sue_declaration_specifier  ->  sue_declaration_specifier . declaration_qualifier   (rule 257)

    AUTO	shift, and go to state 2
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    ';' 	shift, and go to state 221

    $default	reduce using rule 228 (declaration_specifier)

    declaration_qualifier	go to state 222
    type_qualifier	go to state 196
    storage_class	go to state 197



state 46

    declaration  ->  sue_type_specifier_elaboration . ';'   (rule 177)
    type_specifier  ->  sue_type_specifier_elaboration .   (rule 232)
    sue_declaration_specifier  ->  sue_type_specifier_elaboration . storage_class   (rule 256)
    sue_type_specifier_elaboration  ->  sue_type_specifier_elaboration . type_qualifier   (rule 260)

    AUTO	shift, and go to state 2
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    ';' 	shift, and go to state 223

    $default	reduce using rule 232 (type_specifier)

    type_qualifier	go to state 224
    storage_class	go to state 225



state 47

    declaration  ->  sue_type_specifier . ';'   (rule 176)
    type_specifier  ->  sue_type_specifier .   (rule 231)
    sue_declaration_specifier  ->  sue_type_specifier . storage_class   (rule 255)
    sue_type_specifier  ->  sue_type_specifier . type_qualifier   (rule 263)

    AUTO	shift, and go to state 2
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    ';' 	shift, and go to state 226

    $default	reduce using rule 231 (type_specifier)

    type_qualifier	go to state 227
    storage_class	go to state 228



state 48

    declaration_specifier  ->  typedef_declaration_specifier .   (rule 229)
    typedef_declaration_specifier  ->  typedef_declaration_specifier . declaration_qualifier   (rule 269)

    AUTO	shift, and go to state 2
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26

    $default	reduce using rule 229 (declaration_specifier)

    declaration_qualifier	go to state 229
    type_qualifier	go to state 196
    storage_class	go to state 197



state 49

    type_specifier  ->  typedef_type_specifier .   (rule 233)
    typedef_declaration_specifier  ->  typedef_type_specifier . storage_class   (rule 266)
    typedef_type_specifier  ->  typedef_type_specifier . type_qualifier   (rule 274)

    AUTO	shift, and go to state 2
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26

    $default	reduce using rule 233 (type_specifier)

    type_qualifier	go to state 230
    storage_class	go to state 231



state 50

    declaration_qualifier_list  ->  storage_class .   (rule 234)

    $default	reduce using rule 234 (declaration_qualifier_list)



state 51

    declaring_list  ->  basic_type_name . declarator @8 initializer_opt   (rule 192)
    declaring_list  ->  basic_type_name . constructed_declarator   (rule 201)
    basic_declaration_specifier  ->  basic_type_name . storage_class   (rule 245)
    basic_type_specifier  ->  basic_type_name . basic_type_name   (rule 249)
    basic_type_specifier  ->  basic_type_name . type_qualifier   (rule 250)
    new_function_definition  ->  basic_type_name . declarator compound_statement   (rule 503)
    old_function_definition  ->  basic_type_name . old_function_declarator @17 old_function_body   (rule 515)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 146
    '(' 	shift, and go to state 147
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 148
    operator_function_name	go to state 34
    constructed_declarator	go to state 232
    constructed_paren_typedef_declarator	go to state 150
    constructed_parameter_typedef_declarator	go to state 151
    nonunary_constructed_identifier_declarator	go to state 152
    type_qualifier	go to state 233
    storage_class	go to state 234
    basic_type_name	go to state 235
    aggregate_key	go to state 155
    declarator	go to state 236
    typedef_declarator	go to state 157
    parameter_typedef_declarator	go to state 158
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 161
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 163
    identifier_declarator	go to state 164
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    old_function_declarator	go to state 237
    postfix_old_function_declarator	go to state 72
    asterisk_or_ampersand	go to state 166
    unary_modifier	go to state 167
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 52

    sue_type_specifier_elaboration  ->  elaborated_type_name_elaboration .   (rule 258)

    $default	reduce using rule 258 (sue_type_specifier_elaboration)



state 53

    sue_type_specifier  ->  elaborated_type_name .   (rule 261)

    $default	reduce using rule 261 (sue_type_specifier)



state 54

    elaborated_type_name_elaboration  ->  aggregate_name_elaboration .   (rule 293)

    $default	reduce using rule 293 (elaborated_type_name_elaboration)



state 55

    elaborated_type_name  ->  aggregate_name .   (rule 295)
    aggregate_name_elaboration  ->  aggregate_name . derivation_opt '{' member_declaration_list_opt '}'   (rule 297)

    ':' 	shift, and go to state 238

    ':' 	[reduce using rule 295 (elaborated_type_name)]
    '{' 	reduce using rule 303 (derivation_opt)
    $default	reduce using rule 295 (elaborated_type_name)

    derivation_opt	go to state 239



state 56

    aggregate_name_elaboration  ->  aggregate_key . derivation_opt '{' member_declaration_list_opt '}'   (rule 298)
    aggregate_name  ->  aggregate_key . tag_name   (rule 299)
    scoping_name  ->  aggregate_key . tag_name   (rule 639)

    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 169
    ':' 	shift, and go to state 238

    $default	reduce using rule 303 (derivation_opt)

    derivation_opt	go to state 240
    tag_name	go to state 241



state 57

    elaborated_type_name_elaboration  ->  enum_name_elaboration .   (rule 294)

    $default	reduce using rule 294 (elaborated_type_name_elaboration)



state 58

    elaborated_type_name  ->  enum_name .   (rule 296)
    enum_name_elaboration  ->  enum_name . '{' enumerator_list '}'   (rule 386)

    '{' 	shift, and go to state 242

    $default	reduce using rule 296 (elaborated_type_name)



state 59

    enum_name_elaboration  ->  global_opt_scope_opt_enum_key . '{' enumerator_list '}'   (rule 385)
    enum_name  ->  global_opt_scope_opt_enum_key . tag_name   (rule 387)

    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 169
    '{' 	shift, and go to state 243

    tag_name	go to state 244



state 60

    translation_unit  ->  translation_unit external_definition .   (rule 486)

    $default	reduce using rule 486 (translation_unit)



state 61

    external_definition  ->  linkage_specifier . function_declaration   (rule 490)
    external_definition  ->  linkage_specifier . function_definition   (rule 491)
    external_definition  ->  linkage_specifier . declaration   (rule 492)
    external_definition  ->  linkage_specifier . '{' translation_unit '}'   (rule 493)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 28
    '(' 	shift, and go to state 29
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    '{' 	shift, and go to state 245

    $default	reduce using rule 644 (@22)

    paren_identifier_declarator	go to state 33
    operator_function_name	go to state 34
    declaration	go to state 246
    default_declaring_list	go to state 36
    declaring_list	go to state 37
    declaration_specifier	go to state 38
    type_specifier	go to state 39
    declaration_qualifier_list	go to state 40
    type_qualifier_list	go to state 41
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 45
    sue_type_specifier_elaboration	go to state 46
    sue_type_specifier	go to state 47
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 51
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    function_declaration	go to state 247
    function_definition	go to state 248
    new_function_definition	go to state 64
    old_function_definition	go to state 65
    constructor_function_definition	go to state 66
    constructor_function_declaration	go to state 67
    identifier_declarator	go to state 68
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    old_function_declarator	go to state 71
    postfix_old_function_declarator	go to state 72
    asterisk_or_ampersand	go to state 73
    unary_modifier	go to state 74
    scoping_name	go to state 75
    scope	go to state 76
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 85



state 62

    external_definition  ->  function_declaration .   (rule 487)

    $default	reduce using rule 487 (external_definition)



state 63

    external_definition  ->  function_definition .   (rule 488)

    $default	reduce using rule 488 (external_definition)



state 64

    function_definition  ->  new_function_definition .   (rule 497)

    $default	reduce using rule 497 (function_definition)



state 65

    function_definition  ->  old_function_definition .   (rule 498)

    $default	reduce using rule 498 (function_definition)



state 66

    function_definition  ->  constructor_function_definition .   (rule 499)

    $default	reduce using rule 499 (function_definition)



state 67

    function_declaration  ->  constructor_function_declaration . ';'   (rule 496)

    ';' 	shift, and go to state 249



state 68

    function_declaration  ->  identifier_declarator . ';'   (rule 495)
    new_function_definition  ->  identifier_declarator . compound_statement   (rule 500)

    ';' 	shift, and go to state 250
    '{' 	shift, and go to state 251

    compound_statement	go to state 252



state 69

    identifier_declarator  ->  unary_identifier_declarator .   (rule 602)

    $default	reduce using rule 602 (identifier_declarator)



state 70

    unary_identifier_declarator  ->  postfix_identifier_declarator .   (rule 604)

    $default	reduce using rule 604 (unary_identifier_declarator)



state 71

    old_function_definition  ->  old_function_declarator . @14 old_function_body   (rule 509)

    $default	reduce using rule 508 (@14)

    @14 	go to state 253



state 72

    old_function_declarator  ->  postfix_old_function_declarator .   (rule 610)

    $default	reduce using rule 610 (old_function_declarator)



state 73

    unary_identifier_declarator  ->  asterisk_or_ampersand . identifier_declarator   (rule 605)
    old_function_declarator  ->  asterisk_or_ampersand . old_function_declarator   (rule 611)
    unary_modifier  ->  asterisk_or_ampersand . type_qualifier_list   (rule 637)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 169
    '(' 	shift, and go to state 29
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 33
    operator_function_name	go to state 34
    type_qualifier_list	go to state 254
    type_qualifier	go to state 42
    aggregate_key	go to state 155
    identifier_declarator	go to state 255
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    old_function_declarator	go to state 256
    postfix_old_function_declarator	go to state 72
    asterisk_or_ampersand	go to state 73
    unary_modifier	go to state 74
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 74

    unary_identifier_declarator  ->  unary_modifier . identifier_declarator   (rule 606)
    old_function_declarator  ->  unary_modifier . old_function_declarator   (rule 612)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 169
    '(' 	shift, and go to state 29
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 33
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    identifier_declarator	go to state 257
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    old_function_declarator	go to state 258
    postfix_old_function_declarator	go to state 72
    asterisk_or_ampersand	go to state 73
    unary_modifier	go to state 74
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 75

    scope  ->  scoping_name . CLCL   (rule 640)

    CLCL	shift, and go to state 259



state 76

    aggregate_name  ->  scope . aggregate_key tag_name   (rule 302)
    unary_modifier  ->  scope . '*' type_qualifier_list_opt   (rule 636)
    scope  ->  scope . scoping_name CLCL   (rule 641)
    global_or_scope  ->  scope .   (rule 647)
    scope_opt_identifier  ->  scope . IDENTIFIER   (rule 650)
    scope_opt_complex_name  ->  scope . complex_name   (rule 652)
    scoped_typedefname  ->  scope . TYPEDEFname   (rule 659)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 260
    TYPEDEFname	shift, and go to state 261
    '*' 	shift, and go to state 262
    '~' 	shift, and go to state 32

    $default	reduce using rule 647 (global_or_scope)

    operator_function_name	go to state 34
    aggregate_key	go to state 263
    scoping_name	go to state 264
    tag_name	go to state 77
    complex_name	go to state 265



state 77

    scoping_name  ->  tag_name .   (rule 638)

    $default	reduce using rule 638 (scoping_name)



state 78

    aggregate_name  ->  global_scope . scope aggregate_key tag_name   (rule 300)
    aggregate_name  ->  global_scope . aggregate_key tag_name   (rule 301)
    global_or_scope  ->  global_scope .   (rule 646)
    global_or_scope  ->  global_scope . scope   (rule 648)
    global_or_scoped_typedefname  ->  global_scope . scoped_typedefname   (rule 661)
    global_or_scoped_typedefname  ->  global_scope . TYPEDEFname   (rule 662)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 266

    $default	reduce using rule 646 (global_or_scope)

    aggregate_key	go to state 267
    scoping_name	go to state 75
    scope	go to state 268
    tag_name	go to state 77
    scoped_typedefname	go to state 269



state 79

    global_scope  ->  @22 . CLCL   (rule 645)

    CLCL	shift, and go to state 270



state 80

    global_opt_scope_opt_enum_key  ->  global_or_scope . ENUM   (rule 389)

    ENUM	shift, and go to state 271



state 81

    paren_identifier_declarator  ->  scope_opt_identifier .   (rule 8)

    $default	reduce using rule 8 (paren_identifier_declarator)



state 82

    paren_identifier_declarator  ->  scope_opt_complex_name .   (rule 9)

    $default	reduce using rule 9 (paren_identifier_declarator)



state 83

    scope_opt_complex_name  ->  complex_name .   (rule 651)

    $default	reduce using rule 651 (scope_opt_complex_name)



state 84

    global_or_scoped_typedefname  ->  scoped_typedefname .   (rule 660)

    $default	reduce using rule 660 (global_or_scoped_typedefname)



state 85

    declaring_list  ->  global_or_scoped_typedefname . declarator @10 initializer_opt   (rule 196)
    declaring_list  ->  global_or_scoped_typedefname . constructed_declarator   (rule 203)
    typedef_declaration_specifier  ->  global_or_scoped_typedefname . storage_class   (rule 268)
    typedef_type_specifier  ->  global_or_scoped_typedefname . type_qualifier   (rule 273)
    new_function_definition  ->  global_or_scoped_typedefname . declarator compound_statement   (rule 505)
    old_function_definition  ->  global_or_scoped_typedefname . old_function_declarator @19 old_function_body   (rule 519)
    constructor_function_definition  ->  global_or_scoped_typedefname . parameter_type_list constructor_init_list_opt compound_statement   (rule 526)
    constructor_function_declaration  ->  global_or_scoped_typedefname . parameter_type_list   (rule 528)

    AUTO	shift, and go to state 2
    STRUCT	shift, and go to state 5
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 146
    '(' 	shift, and go to state 183
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 148
    operator_function_name	go to state 34
    constructed_declarator	go to state 272
    constructed_paren_typedef_declarator	go to state 150
    constructed_parameter_typedef_declarator	go to state 151
    nonunary_constructed_identifier_declarator	go to state 152
    type_qualifier	go to state 273
    storage_class	go to state 274
    aggregate_key	go to state 155
    parameter_type_list	go to state 275
    declarator	go to state 276
    typedef_declarator	go to state 157
    parameter_typedef_declarator	go to state 158
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 161
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 163
    identifier_declarator	go to state 164
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    old_function_declarator	go to state 277
    postfix_old_function_declarator	go to state 72
    asterisk_or_ampersand	go to state 166
    unary_modifier	go to state 167
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 86

    linkage_specifier  ->  EXTERN STRINGliteral .   (rule 494)

    $default	reduce using rule 494 (linkage_specifier)



state 87

    any_operator  ->  NEW .   (rule 58)

    $default	reduce using rule 58 (any_operator)



state 88

    any_operator  ->  DELETE .   (rule 59)

    $default	reduce using rule 59 (any_operator)



state 89

    tag_name  ->  IDENTIFIER .   (rule 642)

    $default	reduce using rule 642 (tag_name)



state 90

    non_elaborating_type_specifier  ->  TYPEDEFname .   (rule 21)
    typedef_type_specifier  ->  TYPEDEFname . type_qualifier   (rule 272)
    tag_name  ->  TYPEDEFname .   (rule 643)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    CLCL	reduce using rule 643 (tag_name)
    $default	reduce using rule 21 (non_elaborating_type_specifier)

    type_qualifier	go to state 153



state 91

    any_operator  ->  ARROW .   (rule 45)

    $default	reduce using rule 45 (any_operator)



state 92

    any_operator  ->  ICR .   (rule 49)

    $default	reduce using rule 49 (any_operator)



state 93

    any_operator  ->  DECR .   (rule 50)

    $default	reduce using rule 50 (any_operator)



state 94

    any_operator  ->  LS .   (rule 41)

    $default	reduce using rule 41 (any_operator)



state 95

    any_operator  ->  RS .   (rule 42)

    $default	reduce using rule 42 (any_operator)



state 96

    any_operator  ->  LE .   (rule 51)

    $default	reduce using rule 51 (any_operator)



state 97

    any_operator  ->  GE .   (rule 52)

    $default	reduce using rule 52 (any_operator)



state 98

    any_operator  ->  EQ .   (rule 53)

    $default	reduce using rule 53 (any_operator)



state 99

    any_operator  ->  NE .   (rule 54)

    $default	reduce using rule 54 (any_operator)



state 100

    any_operator  ->  ANDAND .   (rule 43)

    $default	reduce using rule 43 (any_operator)



state 101

    any_operator  ->  OROR .   (rule 44)

    $default	reduce using rule 44 (any_operator)



state 102

    any_operator  ->  DOTstar .   (rule 48)

    $default	reduce using rule 48 (any_operator)



state 103

    any_operator  ->  ARROWstar .   (rule 46)

    $default	reduce using rule 46 (any_operator)



state 104

    assignment_operator  ->  MULTassign .   (rule 158)

    $default	reduce using rule 158 (assignment_operator)



state 105

    assignment_operator  ->  DIVassign .   (rule 159)

    $default	reduce using rule 159 (assignment_operator)



state 106

    assignment_operator  ->  MODassign .   (rule 160)

    $default	reduce using rule 160 (assignment_operator)



state 107

    assignment_operator  ->  PLUSassign .   (rule 161)

    $default	reduce using rule 161 (assignment_operator)



state 108

    assignment_operator  ->  MINUSassign .   (rule 162)

    $default	reduce using rule 162 (assignment_operator)



state 109

    assignment_operator  ->  LSassign .   (rule 163)

    $default	reduce using rule 163 (assignment_operator)



state 110

    assignment_operator  ->  RSassign .   (rule 164)

    $default	reduce using rule 164 (assignment_operator)



state 111

    assignment_operator  ->  ANDassign .   (rule 165)

    $default	reduce using rule 165 (assignment_operator)



state 112

    assignment_operator  ->  ERassign .   (rule 166)

    $default	reduce using rule 166 (assignment_operator)



state 113

    assignment_operator  ->  ORassign .   (rule 167)

    $default	reduce using rule 167 (assignment_operator)



state 114

    any_operator  ->  '(' . ')'   (rule 56)

    ')' 	shift, and go to state 278



state 115

    any_operator  ->  '+' .   (rule 29)

    $default	reduce using rule 29 (any_operator)



state 116

    any_operator  ->  '-' .   (rule 30)

    $default	reduce using rule 30 (any_operator)



state 117

    any_operator  ->  '*' .   (rule 31)

    $default	reduce using rule 31 (any_operator)



state 118

    any_operator  ->  '/' .   (rule 32)

    $default	reduce using rule 32 (any_operator)



state 119

    any_operator  ->  '%' .   (rule 33)

    $default	reduce using rule 33 (any_operator)



state 120

    any_operator  ->  '^' .   (rule 34)

    $default	reduce using rule 34 (any_operator)



state 121

    any_operator  ->  '&' .   (rule 35)

    $default	reduce using rule 35 (any_operator)



state 122

    any_operator  ->  '|' .   (rule 36)

    $default	reduce using rule 36 (any_operator)



state 123

    any_operator  ->  '~' .   (rule 37)

    $default	reduce using rule 37 (any_operator)



state 124

    any_operator  ->  '!' .   (rule 38)

    $default	reduce using rule 38 (any_operator)



state 125

    any_operator  ->  '<' .   (rule 39)

    $default	reduce using rule 39 (any_operator)



state 126

    any_operator  ->  '>' .   (rule 40)

    $default	reduce using rule 40 (any_operator)



state 127

    any_operator  ->  '.' .   (rule 47)

    $default	reduce using rule 47 (any_operator)



state 128

    any_operator  ->  '[' . ']'   (rule 57)

    ']' 	shift, and go to state 279



state 129

    any_operator  ->  ',' .   (rule 60)

    $default	reduce using rule 60 (any_operator)



state 130

    assignment_operator  ->  '=' .   (rule 157)

    $default	reduce using rule 157 (assignment_operator)



state 131

    operator_function_name  ->  OPERATOR non_elaborating_type_specifier . operator_function_ptr_opt   (rule 25)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 169
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31

    '*' 	[reduce using rule 26 (operator_function_ptr_opt)]
    '&' 	[reduce using rule 26 (operator_function_ptr_opt)]
    $default	reduce using rule 26 (operator_function_ptr_opt)

    operator_function_ptr_opt	go to state 280
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 281
    unary_modifier	go to state 282
    scoping_name	go to state 75
    scope	go to state 283
    tag_name	go to state 77



state 132

    operator_function_name  ->  OPERATOR any_operator .   (rule 23)

    $default	reduce using rule 23 (operator_function_name)



state 133

    any_operator  ->  assignment_operator .   (rule 55)

    $default	reduce using rule 55 (any_operator)



state 134

    operator_function_name  ->  OPERATOR type_qualifier_list . operator_function_ptr_opt   (rule 24)
    type_qualifier_list  ->  type_qualifier_list . type_qualifier   (rule 238)
    basic_type_specifier  ->  type_qualifier_list . basic_type_name   (rule 248)
    sue_type_specifier  ->  type_qualifier_list . elaborated_type_name   (rule 262)
    typedef_type_specifier  ->  type_qualifier_list . TYPEDEFname   (rule 270)
    typedef_type_specifier  ->  type_qualifier_list . global_or_scoped_typedefname   (rule 271)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 206
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31

    CLCL	reduce using rule 644 (@22)
    '*' 	[reduce using rule 26 (operator_function_ptr_opt)]
    '&' 	[reduce using rule 26 (operator_function_ptr_opt)]
    $default	reduce using rule 26 (operator_function_ptr_opt)

    operator_function_ptr_opt	go to state 284
    type_qualifier	go to state 208
    basic_type_name	go to state 210
    elaborated_type_name	go to state 212
    aggregate_name	go to state 139
    aggregate_key	go to state 140
    enum_name	go to state 141
    global_opt_scope_opt_enum_key	go to state 142
    asterisk_or_ampersand	go to state 281
    unary_modifier	go to state 282
    scoping_name	go to state 75
    scope	go to state 285
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 215



state 135

    non_elaborating_type_specifier  ->  basic_type_specifier .   (rule 18)
    basic_type_specifier  ->  basic_type_specifier . type_qualifier   (rule 251)
    basic_type_specifier  ->  basic_type_specifier . basic_type_name   (rule 252)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 18 (non_elaborating_type_specifier)

    type_qualifier	go to state 218
    basic_type_name	go to state 220



state 136

    non_elaborating_type_specifier  ->  sue_type_specifier .   (rule 17)
    sue_type_specifier  ->  sue_type_specifier . type_qualifier   (rule 263)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 17 (non_elaborating_type_specifier)

    type_qualifier	go to state 227



state 137

    non_elaborating_type_specifier  ->  typedef_type_specifier .   (rule 19)
    typedef_type_specifier  ->  typedef_type_specifier . type_qualifier   (rule 274)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 19 (non_elaborating_type_specifier)

    type_qualifier	go to state 230



state 138

    non_elaborating_type_specifier  ->  basic_type_name .   (rule 20)
    basic_type_specifier  ->  basic_type_name . basic_type_name   (rule 249)
    basic_type_specifier  ->  basic_type_name . type_qualifier   (rule 250)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 20 (non_elaborating_type_specifier)

    type_qualifier	go to state 233
    basic_type_name	go to state 235



state 139

    elaborated_type_name  ->  aggregate_name .   (rule 295)

    $default	reduce using rule 295 (elaborated_type_name)



state 140

    aggregate_name  ->  aggregate_key . tag_name   (rule 299)
    scoping_name  ->  aggregate_key . tag_name   (rule 639)

    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 169

    tag_name	go to state 241



state 141

    elaborated_type_name  ->  enum_name .   (rule 296)

    $default	reduce using rule 296 (elaborated_type_name)



state 142

    enum_name  ->  global_opt_scope_opt_enum_key . tag_name   (rule 387)

    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 169

    tag_name	go to state 244



state 143

    aggregate_name  ->  scope . aggregate_key tag_name   (rule 302)
    scope  ->  scope . scoping_name CLCL   (rule 641)
    global_or_scope  ->  scope .   (rule 647)
    scoped_typedefname  ->  scope . TYPEDEFname   (rule 659)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 261

    $default	reduce using rule 647 (global_or_scope)

    aggregate_key	go to state 263
    scoping_name	go to state 264
    tag_name	go to state 77



state 144

    non_elaborating_type_specifier  ->  global_or_scoped_typedefname .   (rule 22)
    typedef_type_specifier  ->  global_or_scoped_typedefname . type_qualifier   (rule 273)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 22 (non_elaborating_type_specifier)

    type_qualifier	go to state 273



state 145

    storage_class  ->  EXTERN .   (rule 275)

    $default	reduce using rule 275 (storage_class)



state 146

    constructed_parameter_typedef_declarator  ->  TYPEDEFname . '(' argument_expression_list ')'   (rule 216)
    constructed_parameter_typedef_declarator  ->  TYPEDEFname . postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 217)
    parameter_typedef_declarator  ->  TYPEDEFname .   (rule 581)
    parameter_typedef_declarator  ->  TYPEDEFname . postfixing_abstract_declarator   (rule 582)
    tag_name  ->  TYPEDEFname .   (rule 643)

    '(' 	shift, and go to state 286
    '[' 	shift, and go to state 175

    CLCL	reduce using rule 643 (tag_name)
    $default	reduce using rule 581 (parameter_typedef_declarator)

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 287
    array_abstract_declarator	go to state 178



state 147

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    constructed_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' '(' argument_expression_list ')'   (rule 212)
    constructed_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 213)
    constructed_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')' '(' argument_expression_list ')'   (rule 214)
    constructed_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')' '(' argument_expression_list ')'   (rule 215)
    constructed_parameter_typedef_declarator  ->  '(' . clean_typedef_declarator ')' '(' argument_expression_list ')'   (rule 218)
    constructed_parameter_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 219)
    nonunary_constructed_identifier_declarator  ->  '(' . unary_identifier_declarator ')' '(' argument_expression_list ')'   (rule 225)
    nonunary_constructed_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 226)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator   (rule 588)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')'   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')'   (rule 597)
    postfix_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')'   (rule 598)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator   (rule 599)
    simple_paren_typedef_declarator  ->  '(' . TYPEDEFname ')'   (rule 600)
    simple_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator ')'   (rule 601)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)
    postfix_old_function_declarator  ->  '(' . old_function_declarator ')'   (rule 614)
    postfix_old_function_declarator  ->  '(' . old_function_declarator ')' old_postfixing_abstract_declarator   (rule 615)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 288
    '(' 	shift, and go to state 289
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 170
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    clean_typedef_declarator	go to state 290
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 291
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 292
    unary_identifier_declarator	go to state 293
    postfix_identifier_declarator	go to state 70
    old_function_declarator	go to state 172
    postfix_old_function_declarator	go to state 72
    asterisk_or_ampersand	go to state 294
    unary_modifier	go to state 295
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 148

    nonunary_constructed_identifier_declarator  ->  paren_identifier_declarator . '(' argument_expression_list ')'   (rule 223)
    nonunary_constructed_identifier_declarator  ->  paren_identifier_declarator . postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 224)
    identifier_declarator  ->  paren_identifier_declarator .   (rule 603)
    postfix_identifier_declarator  ->  paren_identifier_declarator . postfixing_abstract_declarator   (rule 607)
    postfix_old_function_declarator  ->  paren_identifier_declarator . '(' argument_expression_list ')'   (rule 613)

    '(' 	shift, and go to state 296
    '[' 	shift, and go to state 175

    $default	reduce using rule 603 (identifier_declarator)

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 297
    array_abstract_declarator	go to state 178



state 149

    declaring_list  ->  TYPEDEFname constructed_declarator .   (rule 202)

    $default	reduce using rule 202 (declaring_list)



state 150

    constructed_declarator  ->  constructed_paren_typedef_declarator .   (rule 206)

    $default	reduce using rule 206 (constructed_declarator)



state 151

    constructed_declarator  ->  constructed_parameter_typedef_declarator .   (rule 209)

    $default	reduce using rule 209 (constructed_declarator)



state 152

    constructed_declarator  ->  nonunary_constructed_identifier_declarator .   (rule 205)

    $default	reduce using rule 205 (constructed_declarator)



state 153

    typedef_type_specifier  ->  TYPEDEFname type_qualifier .   (rule 272)

    $default	reduce using rule 272 (typedef_type_specifier)



state 154

    typedef_declaration_specifier  ->  TYPEDEFname storage_class .   (rule 267)

    $default	reduce using rule 267 (typedef_declaration_specifier)



state 155

    scoping_name  ->  aggregate_key . tag_name   (rule 639)

    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 169

    tag_name	go to state 298



state 156

    declaring_list  ->  TYPEDEFname declarator . @9 initializer_opt   (rule 194)
    new_function_definition  ->  TYPEDEFname declarator . compound_statement   (rule 504)

    '{' 	shift, and go to state 251

    $default	reduce using rule 193 (@9)

    @9  	go to state 299
    compound_statement	go to state 300



state 157

    declarator  ->  typedef_declarator .   (rule 577)

    $default	reduce using rule 577 (declarator)



state 158

    typedef_declarator  ->  parameter_typedef_declarator .   (rule 580)

    $default	reduce using rule 580 (typedef_declarator)



state 159

    parameter_typedef_declarator  ->  clean_typedef_declarator .   (rule 583)

    $default	reduce using rule 583 (parameter_typedef_declarator)



state 160

    clean_typedef_declarator  ->  clean_postfix_typedef_declarator .   (rule 584)

    $default	reduce using rule 584 (clean_typedef_declarator)



state 161

    typedef_declarator  ->  paren_typedef_declarator .   (rule 578)

    $default	reduce using rule 578 (typedef_declarator)



state 162

    paren_typedef_declarator  ->  postfix_paren_typedef_declarator .   (rule 589)

    $default	reduce using rule 589 (paren_typedef_declarator)



state 163

    constructed_declarator  ->  simple_paren_typedef_declarator . '(' argument_expression_list ')'   (rule 207)
    constructed_declarator  ->  simple_paren_typedef_declarator . postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 208)
    typedef_declarator  ->  simple_paren_typedef_declarator .   (rule 579)

    '(' 	shift, and go to state 301
    '[' 	shift, and go to state 175

    $default	reduce using rule 579 (typedef_declarator)

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 302
    array_abstract_declarator	go to state 178



state 164

    declarator  ->  identifier_declarator .   (rule 576)

    $default	reduce using rule 576 (declarator)



state 165

    old_function_definition  ->  TYPEDEFname old_function_declarator . @18 old_function_body   (rule 517)

    $default	reduce using rule 516 (@18)

    @18 	go to state 303



state 166

    constructed_declarator  ->  asterisk_or_ampersand . constructed_declarator   (rule 210)
    clean_typedef_declarator  ->  asterisk_or_ampersand . parameter_typedef_declarator   (rule 585)
    paren_typedef_declarator  ->  asterisk_or_ampersand . '(' simple_paren_typedef_declarator ')'   (rule 590)
    paren_typedef_declarator  ->  asterisk_or_ampersand . '(' TYPEDEFname ')'   (rule 592)
    paren_typedef_declarator  ->  asterisk_or_ampersand . paren_typedef_declarator   (rule 594)
    unary_identifier_declarator  ->  asterisk_or_ampersand . identifier_declarator   (rule 605)
    old_function_declarator  ->  asterisk_or_ampersand . old_function_declarator   (rule 611)
    unary_modifier  ->  asterisk_or_ampersand . type_qualifier_list   (rule 637)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 146
    '(' 	shift, and go to state 304
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 148
    operator_function_name	go to state 34
    constructed_declarator	go to state 305
    constructed_paren_typedef_declarator	go to state 150
    constructed_parameter_typedef_declarator	go to state 151
    nonunary_constructed_identifier_declarator	go to state 152
    type_qualifier_list	go to state 254
    type_qualifier	go to state 42
    aggregate_key	go to state 155
    parameter_typedef_declarator	go to state 306
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 307
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 308
    identifier_declarator	go to state 255
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    old_function_declarator	go to state 256
    postfix_old_function_declarator	go to state 72
    asterisk_or_ampersand	go to state 166
    unary_modifier	go to state 167
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 167

    constructed_declarator  ->  unary_modifier . constructed_declarator   (rule 211)
    clean_typedef_declarator  ->  unary_modifier . parameter_typedef_declarator   (rule 586)
    paren_typedef_declarator  ->  unary_modifier . '(' simple_paren_typedef_declarator ')'   (rule 591)
    paren_typedef_declarator  ->  unary_modifier . '(' TYPEDEFname ')'   (rule 593)
    paren_typedef_declarator  ->  unary_modifier . paren_typedef_declarator   (rule 595)
    unary_identifier_declarator  ->  unary_modifier . identifier_declarator   (rule 606)
    old_function_declarator  ->  unary_modifier . old_function_declarator   (rule 612)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 146
    '(' 	shift, and go to state 309
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 148
    operator_function_name	go to state 34
    constructed_declarator	go to state 310
    constructed_paren_typedef_declarator	go to state 150
    constructed_parameter_typedef_declarator	go to state 151
    nonunary_constructed_identifier_declarator	go to state 152
    aggregate_key	go to state 155
    parameter_typedef_declarator	go to state 311
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 312
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 308
    identifier_declarator	go to state 257
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    old_function_declarator	go to state 258
    postfix_old_function_declarator	go to state 72
    asterisk_or_ampersand	go to state 166
    unary_modifier	go to state 167
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 168

    unary_modifier  ->  scope . '*' type_qualifier_list_opt   (rule 636)
    scope  ->  scope . scoping_name CLCL   (rule 641)
    scope_opt_identifier  ->  scope . IDENTIFIER   (rule 650)
    scope_opt_complex_name  ->  scope . complex_name   (rule 652)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 260
    TYPEDEFname	shift, and go to state 169
    '*' 	shift, and go to state 262
    '~' 	shift, and go to state 32

    operator_function_name	go to state 34
    aggregate_key	go to state 155
    scoping_name	go to state 264
    tag_name	go to state 77
    complex_name	go to state 265



state 169

    tag_name  ->  TYPEDEFname .   (rule 643)

    $default	reduce using rule 643 (tag_name)



state 170

    paren_identifier_declarator  ->  '(' paren_identifier_declarator . ')'   (rule 10)
    postfix_identifier_declarator  ->  paren_identifier_declarator . postfixing_abstract_declarator   (rule 607)
    postfix_old_function_declarator  ->  paren_identifier_declarator . '(' argument_expression_list ')'   (rule 613)

    '(' 	shift, and go to state 174
    ')' 	shift, and go to state 313
    '[' 	shift, and go to state 175

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 177
    array_abstract_declarator	go to state 178



state 171

    postfix_identifier_declarator  ->  '(' unary_identifier_declarator . ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' unary_identifier_declarator . ')' postfixing_abstract_declarator   (rule 609)

    ')' 	shift, and go to state 314



state 172

    postfix_old_function_declarator  ->  '(' old_function_declarator . ')'   (rule 614)
    postfix_old_function_declarator  ->  '(' old_function_declarator . ')' old_postfixing_abstract_declarator   (rule 615)

    ')' 	shift, and go to state 315



state 173

    complex_name  ->  '~' TYPEDEFname .   (rule 653)

    $default	reduce using rule 653 (complex_name)



state 174

    parameter_type_list  ->  '(' . ')' type_qualifier_list_opt   (rule 398)
    parameter_type_list  ->  '(' . type_name ')' type_qualifier_list_opt   (rule 399)
    parameter_type_list  ->  '(' . type_name initializer ')' type_qualifier_list_opt   (rule 400)
    parameter_type_list  ->  '(' . named_parameter_type_list ')' type_qualifier_list_opt   (rule 401)
    postfix_old_function_declarator  ->  paren_identifier_declarator '(' . argument_expression_list ')'   (rule 613)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 326
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    ELLIPSIS	shift, and go to state 329
    '(' 	shift, and go to state 330
    ')' 	shift, and go to state 331
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 340
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    declaration_specifier	go to state 360
    type_specifier	go to state 361
    declaration_qualifier_list	go to state 362
    type_qualifier_list	go to state 363
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 364
    sue_type_specifier_elaboration	go to state 365
    sue_type_specifier	go to state 366
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 367
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    named_parameter_type_list	go to state 368
    parameter_list	go to state 369
    non_casting_parameter_declaration	go to state 370
    type_name	go to state 371
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 373
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 380



state 175

    array_abstract_declarator  ->  '[' . ']'   (rule 623)
    array_abstract_declarator  ->  '[' . constant_expression ']'   (rule 624)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335
    ']' 	shift, and go to state 382

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 384
    constant_expression	go to state 385
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 176

    postfixing_abstract_declarator  ->  parameter_type_list .   (rule 622)

    $default	reduce using rule 622 (postfixing_abstract_declarator)



state 177

    postfix_identifier_declarator  ->  paren_identifier_declarator postfixing_abstract_declarator .   (rule 607)

    $default	reduce using rule 607 (postfix_identifier_declarator)



state 178

    postfixing_abstract_declarator  ->  array_abstract_declarator .   (rule 621)
    array_abstract_declarator  ->  array_abstract_declarator . '[' constant_expression ']'   (rule 625)

    '[' 	shift, and go to state 391

    $default	reduce using rule 621 (postfixing_abstract_declarator)



state 179

    default_declaring_list  ->  default_declaring_list ',' . identifier_declarator @5 initializer_opt   (rule 183)
    default_declaring_list  ->  default_declaring_list ',' . constructed_identifier_declarator   (rule 186)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 169
    '(' 	shift, and go to state 392
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 393
    operator_function_name	go to state 34
    constructed_identifier_declarator	go to state 394
    nonunary_constructed_identifier_declarator	go to state 194
    aggregate_key	go to state 155
    identifier_declarator	go to state 395
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 396
    unary_modifier	go to state 397
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 180

    declaration  ->  default_declaring_list ';' .   (rule 174)

    $default	reduce using rule 174 (declaration)



state 181

    declaring_list  ->  declaring_list ',' . declarator @11 initializer_opt   (rule 198)
    declaring_list  ->  declaring_list ',' . constructed_declarator   (rule 204)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 146
    '(' 	shift, and go to state 398
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 393
    operator_function_name	go to state 34
    constructed_declarator	go to state 399
    constructed_paren_typedef_declarator	go to state 150
    constructed_parameter_typedef_declarator	go to state 151
    nonunary_constructed_identifier_declarator	go to state 152
    aggregate_key	go to state 155
    declarator	go to state 400
    typedef_declarator	go to state 157
    parameter_typedef_declarator	go to state 158
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 161
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 163
    identifier_declarator	go to state 164
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 401
    unary_modifier	go to state 402
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 182

    declaration  ->  declaring_list ';' .   (rule 173)

    $default	reduce using rule 173 (declaration)



state 183

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    constructed_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' '(' argument_expression_list ')'   (rule 212)
    constructed_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 213)
    constructed_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')' '(' argument_expression_list ')'   (rule 214)
    constructed_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')' '(' argument_expression_list ')'   (rule 215)
    constructed_parameter_typedef_declarator  ->  '(' . clean_typedef_declarator ')' '(' argument_expression_list ')'   (rule 218)
    constructed_parameter_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 219)
    nonunary_constructed_identifier_declarator  ->  '(' . unary_identifier_declarator ')' '(' argument_expression_list ')'   (rule 225)
    nonunary_constructed_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 226)
    parameter_type_list  ->  '(' . ')' type_qualifier_list_opt   (rule 398)
    parameter_type_list  ->  '(' . type_name ')' type_qualifier_list_opt   (rule 399)
    parameter_type_list  ->  '(' . type_name initializer ')' type_qualifier_list_opt   (rule 400)
    parameter_type_list  ->  '(' . named_parameter_type_list ')' type_qualifier_list_opt   (rule 401)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator   (rule 588)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')'   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')'   (rule 597)
    postfix_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')'   (rule 598)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator   (rule 599)
    simple_paren_typedef_declarator  ->  '(' . TYPEDEFname ')'   (rule 600)
    simple_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator ')'   (rule 601)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)
    postfix_old_function_declarator  ->  '(' . old_function_declarator ')'   (rule 614)
    postfix_old_function_declarator  ->  '(' . old_function_declarator ')' old_postfixing_abstract_declarator   (rule 615)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 403
    ELLIPSIS	shift, and go to state 329
    '(' 	shift, and go to state 289
    ')' 	shift, and go to state 331
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    $default	reduce using rule 644 (@22)

    paren_identifier_declarator	go to state 170
    operator_function_name	go to state 34
    declaration_specifier	go to state 360
    type_specifier	go to state 361
    declaration_qualifier_list	go to state 362
    type_qualifier_list	go to state 363
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 364
    sue_type_specifier_elaboration	go to state 365
    sue_type_specifier	go to state 366
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 404
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    named_parameter_type_list	go to state 368
    parameter_list	go to state 369
    non_casting_parameter_declaration	go to state 370
    type_name	go to state 371
    clean_typedef_declarator	go to state 290
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 291
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 292
    unary_identifier_declarator	go to state 293
    postfix_identifier_declarator	go to state 70
    old_function_declarator	go to state 172
    postfix_old_function_declarator	go to state 72
    asterisk_or_ampersand	go to state 294
    unary_modifier	go to state 295
    scoping_name	go to state 75
    scope	go to state 76
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 405



state 184

    declaring_list  ->  declaration_specifier constructed_declarator .   (rule 199)

    $default	reduce using rule 199 (declaring_list)



state 185

    constructor_function_definition  ->  declaration_specifier parameter_type_list . constructor_init_list_opt compound_statement   (rule 527)
    constructor_function_declaration  ->  declaration_specifier parameter_type_list .   (rule 529)

    ':' 	shift, and go to state 406

    '{' 	reduce using rule 564 (constructor_init_list_opt)
    $default	reduce using rule 529 (constructor_function_declaration)

    constructor_init_list_opt	go to state 407
    constructor_init_list	go to state 408



state 186

    declaring_list  ->  declaration_specifier declarator . @6 initializer_opt   (rule 188)
    new_function_definition  ->  declaration_specifier declarator . compound_statement   (rule 501)

    '{' 	shift, and go to state 251

    $default	reduce using rule 187 (@6)

    @6  	go to state 409
    compound_statement	go to state 410



state 187

    old_function_definition  ->  declaration_specifier old_function_declarator . @15 old_function_body   (rule 511)

    $default	reduce using rule 510 (@15)

    @15 	go to state 411



state 188

    declaring_list  ->  type_specifier constructed_declarator .   (rule 200)

    $default	reduce using rule 200 (declaring_list)



state 189

    declaring_list  ->  type_specifier declarator . @7 initializer_opt   (rule 190)
    new_function_definition  ->  type_specifier declarator . compound_statement   (rule 502)

    '{' 	shift, and go to state 251

    $default	reduce using rule 189 (@7)

    @7  	go to state 412
    compound_statement	go to state 413



state 190

    old_function_definition  ->  type_specifier old_function_declarator . @16 old_function_body   (rule 513)

    $default	reduce using rule 512 (@16)

    @16 	go to state 414



state 191

    typedef_declaration_specifier  ->  declaration_qualifier_list TYPEDEFname .   (rule 264)
    tag_name  ->  TYPEDEFname .   (rule 643)

    CLCL	reduce using rule 643 (tag_name)
    $default	reduce using rule 264 (typedef_declaration_specifier)



state 192

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    nonunary_constructed_identifier_declarator  ->  '(' . unary_identifier_declarator ')' '(' argument_expression_list ')'   (rule 225)
    nonunary_constructed_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 226)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)
    postfix_old_function_declarator  ->  '(' . old_function_declarator ')'   (rule 614)
    postfix_old_function_declarator  ->  '(' . old_function_declarator ')' old_postfixing_abstract_declarator   (rule 615)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 169
    '(' 	shift, and go to state 29
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 170
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    unary_identifier_declarator	go to state 293
    postfix_identifier_declarator	go to state 70
    old_function_declarator	go to state 172
    postfix_old_function_declarator	go to state 72
    asterisk_or_ampersand	go to state 73
    unary_modifier	go to state 74
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 193

    default_declaring_list  ->  declaration_qualifier_list constructed_identifier_declarator .   (rule 184)

    $default	reduce using rule 184 (default_declaring_list)



state 194

    constructed_identifier_declarator  ->  nonunary_constructed_identifier_declarator .   (rule 220)

    $default	reduce using rule 220 (constructed_identifier_declarator)



state 195

    declaration_qualifier_list  ->  declaration_qualifier_list declaration_qualifier .   (rule 236)

    $default	reduce using rule 236 (declaration_qualifier_list)



state 196

    declaration_qualifier  ->  type_qualifier .   (rule 240)

    $default	reduce using rule 240 (declaration_qualifier)



state 197

    declaration_qualifier  ->  storage_class .   (rule 239)

    $default	reduce using rule 239 (declaration_qualifier)



state 198

    basic_declaration_specifier  ->  declaration_qualifier_list basic_type_name .   (rule 243)

    $default	reduce using rule 243 (basic_declaration_specifier)



state 199

    sue_declaration_specifier  ->  declaration_qualifier_list elaborated_type_name_elaboration .   (rule 254)

    $default	reduce using rule 254 (sue_declaration_specifier)



state 200

    sue_declaration_specifier  ->  declaration_qualifier_list elaborated_type_name .   (rule 253)

    $default	reduce using rule 253 (sue_declaration_specifier)



state 201

    default_declaring_list  ->  declaration_qualifier_list identifier_declarator . @3 initializer_opt   (rule 179)
    new_function_definition  ->  declaration_qualifier_list identifier_declarator . compound_statement   (rule 506)

    '{' 	shift, and go to state 251

    $default	reduce using rule 178 (@3)

    @3  	go to state 415
    compound_statement	go to state 416



state 202

    old_function_definition  ->  declaration_qualifier_list old_function_declarator . @20 old_function_body   (rule 521)

    $default	reduce using rule 520 (@20)

    @20 	go to state 417



state 203

    constructed_identifier_declarator  ->  asterisk_or_ampersand . constructed_identifier_declarator   (rule 221)
    unary_identifier_declarator  ->  asterisk_or_ampersand . identifier_declarator   (rule 605)
    old_function_declarator  ->  asterisk_or_ampersand . old_function_declarator   (rule 611)
    unary_modifier  ->  asterisk_or_ampersand . type_qualifier_list   (rule 637)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 169
    '(' 	shift, and go to state 192
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 148
    operator_function_name	go to state 34
    constructed_identifier_declarator	go to state 418
    nonunary_constructed_identifier_declarator	go to state 194
    type_qualifier_list	go to state 254
    type_qualifier	go to state 42
    aggregate_key	go to state 155
    identifier_declarator	go to state 255
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    old_function_declarator	go to state 256
    postfix_old_function_declarator	go to state 72
    asterisk_or_ampersand	go to state 203
    unary_modifier	go to state 204
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 204

    constructed_identifier_declarator  ->  unary_modifier . constructed_identifier_declarator   (rule 222)
    unary_identifier_declarator  ->  unary_modifier . identifier_declarator   (rule 606)
    old_function_declarator  ->  unary_modifier . old_function_declarator   (rule 612)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 169
    '(' 	shift, and go to state 192
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 148
    operator_function_name	go to state 34
    constructed_identifier_declarator	go to state 419
    nonunary_constructed_identifier_declarator	go to state 194
    aggregate_key	go to state 155
    identifier_declarator	go to state 257
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    old_function_declarator	go to state 258
    postfix_old_function_declarator	go to state 72
    asterisk_or_ampersand	go to state 203
    unary_modifier	go to state 204
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 205

    typedef_declaration_specifier  ->  declaration_qualifier_list global_or_scoped_typedefname .   (rule 265)

    $default	reduce using rule 265 (typedef_declaration_specifier)



state 206

    typedef_type_specifier  ->  type_qualifier_list TYPEDEFname .   (rule 270)
    tag_name  ->  TYPEDEFname .   (rule 643)

    CLCL	reduce using rule 643 (tag_name)
    $default	reduce using rule 270 (typedef_type_specifier)



state 207

    default_declaring_list  ->  type_qualifier_list constructed_identifier_declarator .   (rule 185)

    $default	reduce using rule 185 (default_declaring_list)



state 208

    type_qualifier_list  ->  type_qualifier_list type_qualifier .   (rule 238)

    $default	reduce using rule 238 (type_qualifier_list)



state 209

    declaration_qualifier_list  ->  type_qualifier_list storage_class .   (rule 235)

    $default	reduce using rule 235 (declaration_qualifier_list)



state 210

    basic_type_specifier  ->  type_qualifier_list basic_type_name .   (rule 248)

    $default	reduce using rule 248 (basic_type_specifier)



state 211

    sue_type_specifier_elaboration  ->  type_qualifier_list elaborated_type_name_elaboration .   (rule 259)

    $default	reduce using rule 259 (sue_type_specifier_elaboration)



state 212

    sue_type_specifier  ->  type_qualifier_list elaborated_type_name .   (rule 262)

    $default	reduce using rule 262 (sue_type_specifier)



state 213

    default_declaring_list  ->  type_qualifier_list identifier_declarator . @4 initializer_opt   (rule 181)
    new_function_definition  ->  type_qualifier_list identifier_declarator . compound_statement   (rule 507)

    '{' 	shift, and go to state 251

    $default	reduce using rule 180 (@4)

    @4  	go to state 420
    compound_statement	go to state 421



state 214

    old_function_definition  ->  type_qualifier_list old_function_declarator . @21 old_function_body   (rule 523)

    $default	reduce using rule 522 (@21)

    @21 	go to state 422



state 215

    typedef_type_specifier  ->  type_qualifier_list global_or_scoped_typedefname .   (rule 271)

    $default	reduce using rule 271 (typedef_type_specifier)



state 216

    basic_declaration_specifier  ->  basic_declaration_specifier declaration_qualifier .   (rule 246)

    $default	reduce using rule 246 (basic_declaration_specifier)



state 217

    basic_declaration_specifier  ->  basic_declaration_specifier basic_type_name .   (rule 247)

    $default	reduce using rule 247 (basic_declaration_specifier)



state 218

    basic_type_specifier  ->  basic_type_specifier type_qualifier .   (rule 251)

    $default	reduce using rule 251 (basic_type_specifier)



state 219

    basic_declaration_specifier  ->  basic_type_specifier storage_class .   (rule 244)

    $default	reduce using rule 244 (basic_declaration_specifier)



state 220

    basic_type_specifier  ->  basic_type_specifier basic_type_name .   (rule 252)

    $default	reduce using rule 252 (basic_type_specifier)



state 221

    declaration  ->  sue_declaration_specifier ';' .   (rule 175)

    $default	reduce using rule 175 (declaration)



state 222

    sue_declaration_specifier  ->  sue_declaration_specifier declaration_qualifier .   (rule 257)

    $default	reduce using rule 257 (sue_declaration_specifier)



state 223

    declaration  ->  sue_type_specifier_elaboration ';' .   (rule 177)

    $default	reduce using rule 177 (declaration)



state 224

    sue_type_specifier_elaboration  ->  sue_type_specifier_elaboration type_qualifier .   (rule 260)

    $default	reduce using rule 260 (sue_type_specifier_elaboration)



state 225

    sue_declaration_specifier  ->  sue_type_specifier_elaboration storage_class .   (rule 256)

    $default	reduce using rule 256 (sue_declaration_specifier)



state 226

    declaration  ->  sue_type_specifier ';' .   (rule 176)

    $default	reduce using rule 176 (declaration)



state 227

    sue_type_specifier  ->  sue_type_specifier type_qualifier .   (rule 263)

    $default	reduce using rule 263 (sue_type_specifier)



state 228

    sue_declaration_specifier  ->  sue_type_specifier storage_class .   (rule 255)

    $default	reduce using rule 255 (sue_declaration_specifier)



state 229

    typedef_declaration_specifier  ->  typedef_declaration_specifier declaration_qualifier .   (rule 269)

    $default	reduce using rule 269 (typedef_declaration_specifier)



state 230

    typedef_type_specifier  ->  typedef_type_specifier type_qualifier .   (rule 274)

    $default	reduce using rule 274 (typedef_type_specifier)



state 231

    typedef_declaration_specifier  ->  typedef_type_specifier storage_class .   (rule 266)

    $default	reduce using rule 266 (typedef_declaration_specifier)



state 232

    declaring_list  ->  basic_type_name constructed_declarator .   (rule 201)

    $default	reduce using rule 201 (declaring_list)



state 233

    basic_type_specifier  ->  basic_type_name type_qualifier .   (rule 250)

    $default	reduce using rule 250 (basic_type_specifier)



state 234

    basic_declaration_specifier  ->  basic_type_name storage_class .   (rule 245)

    $default	reduce using rule 245 (basic_declaration_specifier)



state 235

    basic_type_specifier  ->  basic_type_name basic_type_name .   (rule 249)

    $default	reduce using rule 249 (basic_type_specifier)



state 236

    declaring_list  ->  basic_type_name declarator . @8 initializer_opt   (rule 192)
    new_function_definition  ->  basic_type_name declarator . compound_statement   (rule 503)

    '{' 	shift, and go to state 251

    $default	reduce using rule 191 (@8)

    @8  	go to state 423
    compound_statement	go to state 424



state 237

    old_function_definition  ->  basic_type_name old_function_declarator . @17 old_function_body   (rule 515)

    $default	reduce using rule 514 (@17)

    @17 	go to state 425



state 238

    derivation_opt  ->  ':' . derivation_list   (rule 304)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CLASS	shift, and go to state 22
    PUBLIC	shift, and go to state 426
    PROTECTED	shift, and go to state 427
    PRIVATE	shift, and go to state 428
    VIRTUAL	shift, and go to state 429
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 430

    $default	reduce using rule 644 (@22)

    derivation_list	go to state 431
    parent_class	go to state 432
    access_specifier	go to state 433
    aggregate_key	go to state 155
    scoping_name	go to state 75
    scope	go to state 434
    tag_name	go to state 77
    global_scope	go to state 435
    @22 	go to state 79
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 436
    global_opt_scope_opt_typedefname	go to state 437



state 239

    aggregate_name_elaboration  ->  aggregate_name derivation_opt . '{' member_declaration_list_opt '}'   (rule 297)

    '{' 	shift, and go to state 438



state 240

    aggregate_name_elaboration  ->  aggregate_key derivation_opt . '{' member_declaration_list_opt '}'   (rule 298)

    '{' 	shift, and go to state 439



state 241

    aggregate_name  ->  aggregate_key tag_name .   (rule 299)
    scoping_name  ->  aggregate_key tag_name .   (rule 639)

    CLCL	reduce using rule 639 (scoping_name)
    $default	reduce using rule 299 (aggregate_name)



state 242

    enum_name_elaboration  ->  enum_name '{' . enumerator_list '}'   (rule 386)

    IDENTIFIER	shift, and go to state 440
    TYPEDEFname	shift, and go to state 441

    enumerator_list	go to state 442
    enumerator_list_no_trailing_comma	go to state 443
    enumerator_name	go to state 444



state 243

    enum_name_elaboration  ->  global_opt_scope_opt_enum_key '{' . enumerator_list '}'   (rule 385)

    IDENTIFIER	shift, and go to state 440
    TYPEDEFname	shift, and go to state 441

    enumerator_list	go to state 445
    enumerator_list_no_trailing_comma	go to state 443
    enumerator_name	go to state 444



state 244

    enum_name  ->  global_opt_scope_opt_enum_key tag_name .   (rule 387)

    $default	reduce using rule 387 (enum_name)



state 245

    external_definition  ->  linkage_specifier '{' . translation_unit '}'   (rule 493)

    $default	reduce using rule 485 (translation_unit)

    translation_unit	go to state 446



state 246

    external_definition  ->  linkage_specifier declaration .   (rule 492)

    $default	reduce using rule 492 (external_definition)



state 247

    external_definition  ->  linkage_specifier function_declaration .   (rule 490)

    $default	reduce using rule 490 (external_definition)



state 248

    external_definition  ->  linkage_specifier function_definition .   (rule 491)

    $default	reduce using rule 491 (external_definition)



state 249

    function_declaration  ->  constructor_function_declaration ';' .   (rule 496)

    $default	reduce using rule 496 (function_declaration)



state 250

    function_declaration  ->  identifier_declarator ';' .   (rule 495)

    $default	reduce using rule 495 (function_declaration)



state 251

    compound_statement  ->  '{' . statement_list_opt '}'   (rule 466)

    $default	reduce using rule 469 (statement_list_opt)

    statement_list_opt	go to state 447



state 252

    new_function_definition  ->  identifier_declarator compound_statement .   (rule 500)

    $default	reduce using rule 500 (new_function_definition)



state 253

    old_function_definition  ->  old_function_declarator @14 . old_function_body   (rule 509)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 448
    '{' 	shift, and go to state 251

    $default	reduce using rule 644 (@22)

    declaration	go to state 449
    default_declaring_list	go to state 36
    declaring_list	go to state 37
    declaration_specifier	go to state 450
    type_specifier	go to state 451
    declaration_qualifier_list	go to state 452
    type_qualifier_list	go to state 453
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 45
    sue_type_specifier_elaboration	go to state 46
    sue_type_specifier	go to state 47
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 454
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    compound_statement	go to state 455
    declaration_list	go to state 456
    old_function_body	go to state 457
    scoping_name	go to state 75
    scope	go to state 143
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 458



state 254

    type_qualifier_list  ->  type_qualifier_list . type_qualifier   (rule 238)
    unary_modifier  ->  asterisk_or_ampersand type_qualifier_list .   (rule 637)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 637 (unary_modifier)

    type_qualifier	go to state 208



state 255

    unary_identifier_declarator  ->  asterisk_or_ampersand identifier_declarator .   (rule 605)

    $default	reduce using rule 605 (unary_identifier_declarator)



state 256

    old_function_declarator  ->  asterisk_or_ampersand old_function_declarator .   (rule 611)

    $default	reduce using rule 611 (old_function_declarator)



state 257

    unary_identifier_declarator  ->  unary_modifier identifier_declarator .   (rule 606)

    $default	reduce using rule 606 (unary_identifier_declarator)



state 258

    old_function_declarator  ->  unary_modifier old_function_declarator .   (rule 612)

    $default	reduce using rule 612 (old_function_declarator)



state 259

    scope  ->  scoping_name CLCL .   (rule 640)

    $default	reduce using rule 640 (scope)



state 260

    tag_name  ->  IDENTIFIER .   (rule 642)
    scope_opt_identifier  ->  scope IDENTIFIER .   (rule 650)

    CLCL	reduce using rule 642 (tag_name)
    $default	reduce using rule 650 (scope_opt_identifier)



state 261

    tag_name  ->  TYPEDEFname .   (rule 643)
    scoped_typedefname  ->  scope TYPEDEFname .   (rule 659)

    CLCL	reduce using rule 643 (tag_name)
    $default	reduce using rule 659 (scoped_typedefname)



state 262

    unary_modifier  ->  scope '*' . type_qualifier_list_opt   (rule 636)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 61 (type_qualifier_list_opt)

    type_qualifier_list_opt	go to state 459
    type_qualifier_list	go to state 460
    type_qualifier	go to state 42



state 263

    aggregate_name  ->  scope aggregate_key . tag_name   (rule 302)
    scoping_name  ->  aggregate_key . tag_name   (rule 639)

    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 169

    tag_name	go to state 461



state 264

    scope  ->  scope scoping_name . CLCL   (rule 641)

    CLCL	shift, and go to state 462



state 265

    scope_opt_complex_name  ->  scope complex_name .   (rule 652)

    $default	reduce using rule 652 (scope_opt_complex_name)



state 266

    tag_name  ->  TYPEDEFname .   (rule 643)
    global_or_scoped_typedefname  ->  global_scope TYPEDEFname .   (rule 662)

    CLCL	reduce using rule 643 (tag_name)
    $default	reduce using rule 662 (global_or_scoped_typedefname)



state 267

    aggregate_name  ->  global_scope aggregate_key . tag_name   (rule 301)
    scoping_name  ->  aggregate_key . tag_name   (rule 639)

    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 169

    tag_name	go to state 463



state 268

    aggregate_name  ->  global_scope scope . aggregate_key tag_name   (rule 300)
    scope  ->  scope . scoping_name CLCL   (rule 641)
    global_or_scope  ->  global_scope scope .   (rule 648)
    scoped_typedefname  ->  scope . TYPEDEFname   (rule 659)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 261

    $default	reduce using rule 648 (global_or_scope)

    aggregate_key	go to state 464
    scoping_name	go to state 264
    tag_name	go to state 77



state 269

    global_or_scoped_typedefname  ->  global_scope scoped_typedefname .   (rule 661)

    $default	reduce using rule 661 (global_or_scoped_typedefname)



state 270

    global_scope  ->  @22 CLCL .   (rule 645)

    $default	reduce using rule 645 (global_scope)



state 271

    global_opt_scope_opt_enum_key  ->  global_or_scope ENUM .   (rule 389)

    $default	reduce using rule 389 (global_opt_scope_opt_enum_key)



state 272

    declaring_list  ->  global_or_scoped_typedefname constructed_declarator .   (rule 203)

    $default	reduce using rule 203 (declaring_list)



state 273

    typedef_type_specifier  ->  global_or_scoped_typedefname type_qualifier .   (rule 273)

    $default	reduce using rule 273 (typedef_type_specifier)



state 274

    typedef_declaration_specifier  ->  global_or_scoped_typedefname storage_class .   (rule 268)

    $default	reduce using rule 268 (typedef_declaration_specifier)



state 275

    constructor_function_definition  ->  global_or_scoped_typedefname parameter_type_list . constructor_init_list_opt compound_statement   (rule 526)
    constructor_function_declaration  ->  global_or_scoped_typedefname parameter_type_list .   (rule 528)

    ':' 	shift, and go to state 406

    '{' 	reduce using rule 564 (constructor_init_list_opt)
    $default	reduce using rule 528 (constructor_function_declaration)

    constructor_init_list_opt	go to state 465
    constructor_init_list	go to state 408



state 276

    declaring_list  ->  global_or_scoped_typedefname declarator . @10 initializer_opt   (rule 196)
    new_function_definition  ->  global_or_scoped_typedefname declarator . compound_statement   (rule 505)

    '{' 	shift, and go to state 251

    $default	reduce using rule 195 (@10)

    @10 	go to state 466
    compound_statement	go to state 467



state 277

    old_function_definition  ->  global_or_scoped_typedefname old_function_declarator . @19 old_function_body   (rule 519)

    $default	reduce using rule 518 (@19)

    @19 	go to state 468



state 278

    any_operator  ->  '(' ')' .   (rule 56)

    $default	reduce using rule 56 (any_operator)



state 279

    any_operator  ->  '[' ']' .   (rule 57)

    $default	reduce using rule 57 (any_operator)



state 280

    operator_function_name  ->  OPERATOR non_elaborating_type_specifier operator_function_ptr_opt .   (rule 25)

    $default	reduce using rule 25 (operator_function_name)



state 281

    operator_function_ptr_opt  ->  asterisk_or_ampersand . operator_function_ptr_opt   (rule 28)
    unary_modifier  ->  asterisk_or_ampersand . type_qualifier_list   (rule 637)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 169
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31

    '*' 	[reduce using rule 26 (operator_function_ptr_opt)]
    '&' 	[reduce using rule 26 (operator_function_ptr_opt)]
    $default	reduce using rule 26 (operator_function_ptr_opt)

    operator_function_ptr_opt	go to state 469
    type_qualifier_list	go to state 254
    type_qualifier	go to state 42
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 281
    unary_modifier	go to state 282
    scoping_name	go to state 75
    scope	go to state 283
    tag_name	go to state 77



state 282

    operator_function_ptr_opt  ->  unary_modifier . operator_function_ptr_opt   (rule 27)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 169
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31

    '*' 	[reduce using rule 26 (operator_function_ptr_opt)]
    '&' 	[reduce using rule 26 (operator_function_ptr_opt)]
    $default	reduce using rule 26 (operator_function_ptr_opt)

    operator_function_ptr_opt	go to state 470
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 281
    unary_modifier	go to state 282
    scoping_name	go to state 75
    scope	go to state 283
    tag_name	go to state 77



state 283

    unary_modifier  ->  scope . '*' type_qualifier_list_opt   (rule 636)
    scope  ->  scope . scoping_name CLCL   (rule 641)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 169
    '*' 	shift, and go to state 262

    aggregate_key	go to state 155
    scoping_name	go to state 264
    tag_name	go to state 77



state 284

    operator_function_name  ->  OPERATOR type_qualifier_list operator_function_ptr_opt .   (rule 24)

    $default	reduce using rule 24 (operator_function_name)



state 285

    aggregate_name  ->  scope . aggregate_key tag_name   (rule 302)
    unary_modifier  ->  scope . '*' type_qualifier_list_opt   (rule 636)
    scope  ->  scope . scoping_name CLCL   (rule 641)
    global_or_scope  ->  scope .   (rule 647)
    scoped_typedefname  ->  scope . TYPEDEFname   (rule 659)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 261
    '*' 	shift, and go to state 262

    $default	reduce using rule 647 (global_or_scope)

    aggregate_key	go to state 263
    scoping_name	go to state 264
    tag_name	go to state 77



state 286

    constructed_parameter_typedef_declarator  ->  TYPEDEFname '(' . argument_expression_list ')'   (rule 216)
    parameter_type_list  ->  '(' . ')' type_qualifier_list_opt   (rule 398)
    parameter_type_list  ->  '(' . type_name ')' type_qualifier_list_opt   (rule 399)
    parameter_type_list  ->  '(' . type_name initializer ')' type_qualifier_list_opt   (rule 400)
    parameter_type_list  ->  '(' . named_parameter_type_list ')' type_qualifier_list_opt   (rule 401)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 326
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    ELLIPSIS	shift, and go to state 329
    '(' 	shift, and go to state 330
    ')' 	shift, and go to state 331
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 471
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    declaration_specifier	go to state 360
    type_specifier	go to state 361
    declaration_qualifier_list	go to state 362
    type_qualifier_list	go to state 363
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 364
    sue_type_specifier_elaboration	go to state 365
    sue_type_specifier	go to state 366
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 367
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    named_parameter_type_list	go to state 368
    parameter_list	go to state 369
    non_casting_parameter_declaration	go to state 370
    type_name	go to state 371
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 373
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 380



state 287

    constructed_parameter_typedef_declarator  ->  TYPEDEFname postfixing_abstract_declarator . '(' argument_expression_list ')'   (rule 217)
    parameter_typedef_declarator  ->  TYPEDEFname postfixing_abstract_declarator .   (rule 582)

    '(' 	shift, and go to state 472

    $default	reduce using rule 582 (parameter_typedef_declarator)



state 288

    constructed_paren_typedef_declarator  ->  '(' TYPEDEFname . postfixing_abstract_declarator ')' '(' argument_expression_list ')'   (rule 215)
    postfix_paren_typedef_declarator  ->  '(' TYPEDEFname . postfixing_abstract_declarator ')'   (rule 598)
    simple_paren_typedef_declarator  ->  '(' TYPEDEFname . ')'   (rule 600)
    tag_name  ->  TYPEDEFname .   (rule 643)

    '(' 	shift, and go to state 473
    ')' 	shift, and go to state 474
    '[' 	shift, and go to state 175

    $default	reduce using rule 643 (tag_name)

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 475
    array_abstract_declarator	go to state 178



state 289

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator   (rule 588)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')'   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')'   (rule 597)
    postfix_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')'   (rule 598)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator   (rule 599)
    simple_paren_typedef_declarator  ->  '(' . TYPEDEFname ')'   (rule 600)
    simple_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator ')'   (rule 601)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)
    postfix_old_function_declarator  ->  '(' . old_function_declarator ')'   (rule 614)
    postfix_old_function_declarator  ->  '(' . old_function_declarator ')' old_postfixing_abstract_declarator   (rule 615)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 476
    '(' 	shift, and go to state 289
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 170
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    clean_typedef_declarator	go to state 477
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 478
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 479
    unary_identifier_declarator	go to state 171
    postfix_identifier_declarator	go to state 70
    old_function_declarator	go to state 172
    postfix_old_function_declarator	go to state 72
    asterisk_or_ampersand	go to state 294
    unary_modifier	go to state 295
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 290

    constructed_parameter_typedef_declarator  ->  '(' clean_typedef_declarator . ')' '(' argument_expression_list ')'   (rule 218)
    constructed_parameter_typedef_declarator  ->  '(' clean_typedef_declarator . ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 219)
    clean_postfix_typedef_declarator  ->  '(' clean_typedef_declarator . ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' clean_typedef_declarator . ')' postfixing_abstract_declarator   (rule 588)

    ')' 	shift, and go to state 480



state 291

    constructed_paren_typedef_declarator  ->  '(' paren_typedef_declarator . ')' '(' argument_expression_list ')'   (rule 212)
    constructed_paren_typedef_declarator  ->  '(' paren_typedef_declarator . ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 213)
    postfix_paren_typedef_declarator  ->  '(' paren_typedef_declarator . ')'   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' paren_typedef_declarator . ')' postfixing_abstract_declarator   (rule 599)

    ')' 	shift, and go to state 481



state 292

    constructed_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator . postfixing_abstract_declarator ')' '(' argument_expression_list ')'   (rule 214)
    postfix_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator . postfixing_abstract_declarator ')'   (rule 597)
    simple_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator . ')'   (rule 601)

    '(' 	shift, and go to state 473
    ')' 	shift, and go to state 482
    '[' 	shift, and go to state 175

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 483
    array_abstract_declarator	go to state 178



state 293

    nonunary_constructed_identifier_declarator  ->  '(' unary_identifier_declarator . ')' '(' argument_expression_list ')'   (rule 225)
    nonunary_constructed_identifier_declarator  ->  '(' unary_identifier_declarator . ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 226)
    postfix_identifier_declarator  ->  '(' unary_identifier_declarator . ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' unary_identifier_declarator . ')' postfixing_abstract_declarator   (rule 609)

    ')' 	shift, and go to state 484



state 294

    clean_typedef_declarator  ->  asterisk_or_ampersand . parameter_typedef_declarator   (rule 585)
    paren_typedef_declarator  ->  asterisk_or_ampersand . '(' simple_paren_typedef_declarator ')'   (rule 590)
    paren_typedef_declarator  ->  asterisk_or_ampersand . '(' TYPEDEFname ')'   (rule 592)
    paren_typedef_declarator  ->  asterisk_or_ampersand . paren_typedef_declarator   (rule 594)
    unary_identifier_declarator  ->  asterisk_or_ampersand . identifier_declarator   (rule 605)
    old_function_declarator  ->  asterisk_or_ampersand . old_function_declarator   (rule 611)
    unary_modifier  ->  asterisk_or_ampersand . type_qualifier_list   (rule 637)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 485
    '(' 	shift, and go to state 486
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 33
    operator_function_name	go to state 34
    type_qualifier_list	go to state 254
    type_qualifier	go to state 42
    aggregate_key	go to state 155
    parameter_typedef_declarator	go to state 306
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 307
    postfix_paren_typedef_declarator	go to state 162
    identifier_declarator	go to state 255
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    old_function_declarator	go to state 256
    postfix_old_function_declarator	go to state 72
    asterisk_or_ampersand	go to state 294
    unary_modifier	go to state 295
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 295

    clean_typedef_declarator  ->  unary_modifier . parameter_typedef_declarator   (rule 586)
    paren_typedef_declarator  ->  unary_modifier . '(' simple_paren_typedef_declarator ')'   (rule 591)
    paren_typedef_declarator  ->  unary_modifier . '(' TYPEDEFname ')'   (rule 593)
    paren_typedef_declarator  ->  unary_modifier . paren_typedef_declarator   (rule 595)
    unary_identifier_declarator  ->  unary_modifier . identifier_declarator   (rule 606)
    old_function_declarator  ->  unary_modifier . old_function_declarator   (rule 612)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 485
    '(' 	shift, and go to state 487
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 33
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    parameter_typedef_declarator	go to state 311
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 312
    postfix_paren_typedef_declarator	go to state 162
    identifier_declarator	go to state 257
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    old_function_declarator	go to state 258
    postfix_old_function_declarator	go to state 72
    asterisk_or_ampersand	go to state 294
    unary_modifier	go to state 295
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 296

    nonunary_constructed_identifier_declarator  ->  paren_identifier_declarator '(' . argument_expression_list ')'   (rule 223)
    parameter_type_list  ->  '(' . ')' type_qualifier_list_opt   (rule 398)
    parameter_type_list  ->  '(' . type_name ')' type_qualifier_list_opt   (rule 399)
    parameter_type_list  ->  '(' . type_name initializer ')' type_qualifier_list_opt   (rule 400)
    parameter_type_list  ->  '(' . named_parameter_type_list ')' type_qualifier_list_opt   (rule 401)
    postfix_old_function_declarator  ->  paren_identifier_declarator '(' . argument_expression_list ')'   (rule 613)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 326
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    ELLIPSIS	shift, and go to state 329
    '(' 	shift, and go to state 330
    ')' 	shift, and go to state 331
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 488
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    declaration_specifier	go to state 360
    type_specifier	go to state 361
    declaration_qualifier_list	go to state 362
    type_qualifier_list	go to state 363
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 364
    sue_type_specifier_elaboration	go to state 365
    sue_type_specifier	go to state 366
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 367
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    named_parameter_type_list	go to state 368
    parameter_list	go to state 369
    non_casting_parameter_declaration	go to state 370
    type_name	go to state 371
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 373
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 380



state 297

    nonunary_constructed_identifier_declarator  ->  paren_identifier_declarator postfixing_abstract_declarator . '(' argument_expression_list ')'   (rule 224)
    postfix_identifier_declarator  ->  paren_identifier_declarator postfixing_abstract_declarator .   (rule 607)

    '(' 	shift, and go to state 489

    $default	reduce using rule 607 (postfix_identifier_declarator)



state 298

    scoping_name  ->  aggregate_key tag_name .   (rule 639)

    $default	reduce using rule 639 (scoping_name)



state 299

    declaring_list  ->  TYPEDEFname declarator @9 . initializer_opt   (rule 194)

    '=' 	shift, and go to state 490

    $default	reduce using rule 448 (initializer_opt)

    initializer_opt	go to state 491
    initializer	go to state 492



state 300

    new_function_definition  ->  TYPEDEFname declarator compound_statement .   (rule 504)

    $default	reduce using rule 504 (new_function_definition)



state 301

    constructed_declarator  ->  simple_paren_typedef_declarator '(' . argument_expression_list ')'   (rule 207)
    parameter_type_list  ->  '(' . ')' type_qualifier_list_opt   (rule 398)
    parameter_type_list  ->  '(' . type_name ')' type_qualifier_list_opt   (rule 399)
    parameter_type_list  ->  '(' . type_name initializer ')' type_qualifier_list_opt   (rule 400)
    parameter_type_list  ->  '(' . named_parameter_type_list ')' type_qualifier_list_opt   (rule 401)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 326
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    ELLIPSIS	shift, and go to state 329
    '(' 	shift, and go to state 330
    ')' 	shift, and go to state 331
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 493
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    declaration_specifier	go to state 360
    type_specifier	go to state 361
    declaration_qualifier_list	go to state 362
    type_qualifier_list	go to state 363
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 364
    sue_type_specifier_elaboration	go to state 365
    sue_type_specifier	go to state 366
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 367
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    named_parameter_type_list	go to state 368
    parameter_list	go to state 369
    non_casting_parameter_declaration	go to state 370
    type_name	go to state 371
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 373
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 380



state 302

    constructed_declarator  ->  simple_paren_typedef_declarator postfixing_abstract_declarator . '(' argument_expression_list ')'   (rule 208)

    '(' 	shift, and go to state 494



state 303

    old_function_definition  ->  TYPEDEFname old_function_declarator @18 . old_function_body   (rule 517)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 448
    '{' 	shift, and go to state 251

    $default	reduce using rule 644 (@22)

    declaration	go to state 449
    default_declaring_list	go to state 36
    declaring_list	go to state 37
    declaration_specifier	go to state 450
    type_specifier	go to state 451
    declaration_qualifier_list	go to state 452
    type_qualifier_list	go to state 453
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 45
    sue_type_specifier_elaboration	go to state 46
    sue_type_specifier	go to state 47
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 454
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    compound_statement	go to state 455
    declaration_list	go to state 456
    old_function_body	go to state 495
    scoping_name	go to state 75
    scope	go to state 143
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 458



state 304

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    constructed_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' '(' argument_expression_list ')'   (rule 212)
    constructed_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 213)
    constructed_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')' '(' argument_expression_list ')'   (rule 214)
    constructed_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')' '(' argument_expression_list ')'   (rule 215)
    constructed_parameter_typedef_declarator  ->  '(' . clean_typedef_declarator ')' '(' argument_expression_list ')'   (rule 218)
    constructed_parameter_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 219)
    nonunary_constructed_identifier_declarator  ->  '(' . unary_identifier_declarator ')' '(' argument_expression_list ')'   (rule 225)
    nonunary_constructed_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 226)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator   (rule 588)
    paren_typedef_declarator  ->  asterisk_or_ampersand '(' . simple_paren_typedef_declarator ')'   (rule 590)
    paren_typedef_declarator  ->  asterisk_or_ampersand '(' . TYPEDEFname ')'   (rule 592)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')'   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')'   (rule 597)
    postfix_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')'   (rule 598)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator   (rule 599)
    simple_paren_typedef_declarator  ->  '(' . TYPEDEFname ')'   (rule 600)
    simple_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator ')'   (rule 601)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)
    postfix_old_function_declarator  ->  '(' . old_function_declarator ')'   (rule 614)
    postfix_old_function_declarator  ->  '(' . old_function_declarator ')' old_postfixing_abstract_declarator   (rule 615)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 496
    '(' 	shift, and go to state 289
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 170
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    clean_typedef_declarator	go to state 290
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 291
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 497
    unary_identifier_declarator	go to state 293
    postfix_identifier_declarator	go to state 70
    old_function_declarator	go to state 172
    postfix_old_function_declarator	go to state 72
    asterisk_or_ampersand	go to state 294
    unary_modifier	go to state 295
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 305

    constructed_declarator  ->  asterisk_or_ampersand constructed_declarator .   (rule 210)

    $default	reduce using rule 210 (constructed_declarator)



state 306

    clean_typedef_declarator  ->  asterisk_or_ampersand parameter_typedef_declarator .   (rule 585)

    $default	reduce using rule 585 (clean_typedef_declarator)



state 307

    paren_typedef_declarator  ->  asterisk_or_ampersand paren_typedef_declarator .   (rule 594)

    $default	reduce using rule 594 (paren_typedef_declarator)



state 308

    constructed_declarator  ->  simple_paren_typedef_declarator . '(' argument_expression_list ')'   (rule 207)
    constructed_declarator  ->  simple_paren_typedef_declarator . postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 208)

    '(' 	shift, and go to state 301
    '[' 	shift, and go to state 175

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 302
    array_abstract_declarator	go to state 178



state 309

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    constructed_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' '(' argument_expression_list ')'   (rule 212)
    constructed_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 213)
    constructed_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')' '(' argument_expression_list ')'   (rule 214)
    constructed_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')' '(' argument_expression_list ')'   (rule 215)
    constructed_parameter_typedef_declarator  ->  '(' . clean_typedef_declarator ')' '(' argument_expression_list ')'   (rule 218)
    constructed_parameter_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 219)
    nonunary_constructed_identifier_declarator  ->  '(' . unary_identifier_declarator ')' '(' argument_expression_list ')'   (rule 225)
    nonunary_constructed_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 226)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator   (rule 588)
    paren_typedef_declarator  ->  unary_modifier '(' . simple_paren_typedef_declarator ')'   (rule 591)
    paren_typedef_declarator  ->  unary_modifier '(' . TYPEDEFname ')'   (rule 593)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')'   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')'   (rule 597)
    postfix_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')'   (rule 598)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator   (rule 599)
    simple_paren_typedef_declarator  ->  '(' . TYPEDEFname ')'   (rule 600)
    simple_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator ')'   (rule 601)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)
    postfix_old_function_declarator  ->  '(' . old_function_declarator ')'   (rule 614)
    postfix_old_function_declarator  ->  '(' . old_function_declarator ')' old_postfixing_abstract_declarator   (rule 615)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 498
    '(' 	shift, and go to state 289
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 170
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    clean_typedef_declarator	go to state 290
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 291
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 499
    unary_identifier_declarator	go to state 293
    postfix_identifier_declarator	go to state 70
    old_function_declarator	go to state 172
    postfix_old_function_declarator	go to state 72
    asterisk_or_ampersand	go to state 294
    unary_modifier	go to state 295
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 310

    constructed_declarator  ->  unary_modifier constructed_declarator .   (rule 211)

    $default	reduce using rule 211 (constructed_declarator)



state 311

    clean_typedef_declarator  ->  unary_modifier parameter_typedef_declarator .   (rule 586)

    $default	reduce using rule 586 (clean_typedef_declarator)



state 312

    paren_typedef_declarator  ->  unary_modifier paren_typedef_declarator .   (rule 595)

    $default	reduce using rule 595 (paren_typedef_declarator)



state 313

    paren_identifier_declarator  ->  '(' paren_identifier_declarator ')' .   (rule 10)

    $default	reduce using rule 10 (paren_identifier_declarator)



state 314

    postfix_identifier_declarator  ->  '(' unary_identifier_declarator ')' .   (rule 608)
    postfix_identifier_declarator  ->  '(' unary_identifier_declarator ')' . postfixing_abstract_declarator   (rule 609)

    '(' 	shift, and go to state 473
    '[' 	shift, and go to state 175

    $default	reduce using rule 608 (postfix_identifier_declarator)

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 500
    array_abstract_declarator	go to state 178



state 315

    postfix_old_function_declarator  ->  '(' old_function_declarator ')' .   (rule 614)
    postfix_old_function_declarator  ->  '(' old_function_declarator ')' . old_postfixing_abstract_declarator   (rule 615)

    '(' 	shift, and go to state 501
    '[' 	shift, and go to state 175

    $default	reduce using rule 614 (postfix_old_function_declarator)

    old_parameter_type_list	go to state 502
    old_postfixing_abstract_declarator	go to state 503
    array_abstract_declarator	go to state 504



state 316

    unary_expression  ->  SIZEOF . unary_expression   (rule 93)
    unary_expression  ->  SIZEOF . '(' type_name ')'   (rule 94)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 505
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 506
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 507
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 317

    global_opt_scope_opt_operator_new  ->  NEW .   (rule 100)

    $default	reduce using rule 100 (global_opt_scope_opt_operator_new)



state 318

    global_opt_scope_opt_delete  ->  DELETE .   (rule 120)

    $default	reduce using rule 120 (global_opt_scope_opt_delete)



state 319

    primary_expression  ->  THIS .   (rule 13)

    $default	reduce using rule 13 (primary_expression)



state 320

    string_literal_list  ->  STRINGliteral .   (rule 6)

    $default	reduce using rule 6 (string_literal_list)



state 321

    constant  ->  FLOATINGconstant .   (rule 2)

    $default	reduce using rule 2 (constant)



state 322

    constant  ->  INTEGERconstant .   (rule 1)

    $default	reduce using rule 1 (constant)



state 323

    constant  ->  CHARACTERconstant .   (rule 5)

    $default	reduce using rule 5 (constant)



state 324

    constant  ->  OCTALconstant .   (rule 3)

    $default	reduce using rule 3 (constant)



state 325

    constant  ->  HEXconstant .   (rule 4)

    $default	reduce using rule 4 (constant)



state 326

    postfix_expression  ->  TYPEDEFname . '(' ')'   (rule 73)
    postfix_expression  ->  TYPEDEFname . '(' argument_expression_list ')'   (rule 75)
    typedef_declaration_specifier  ->  TYPEDEFname . storage_class   (rule 267)
    typedef_type_specifier  ->  TYPEDEFname . type_qualifier   (rule 272)
    non_casting_parameter_declaration  ->  TYPEDEFname . identifier_declarator   (rule 433)
    non_casting_parameter_declaration  ->  TYPEDEFname . parameter_typedef_declarator   (rule 434)
    type_name  ->  TYPEDEFname .   (rule 440)
    type_name  ->  TYPEDEFname . abstract_declarator   (rule 445)
    tag_name  ->  TYPEDEFname .   (rule 643)

    AUTO	shift, and go to state 2
    STRUCT	shift, and go to state 5
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 485
    '(' 	shift, and go to state 508
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    '[' 	shift, and go to state 175

    CLCL	reduce using rule 643 (tag_name)
    $default	reduce using rule 440 (type_name)

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    type_qualifier	go to state 153
    storage_class	go to state 154
    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    parameter_typedef_declarator	go to state 510
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    identifier_declarator	go to state 511
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    abstract_declarator	go to state 512
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 516
    unary_modifier	go to state 517
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 327

    unary_expression  ->  ICR . unary_expression   (rule 86)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 518
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 519
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 507
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 328

    unary_expression  ->  DECR . unary_expression   (rule 87)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 518
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 520
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 507
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 329

    named_parameter_type_list  ->  ELLIPSIS .   (rule 410)

    $default	reduce using rule 410 (named_parameter_type_list)



state 330

    primary_expression  ->  '(' . comma_expression ')'   (rule 16)
    cast_expression  ->  '(' . type_name ')' cast_expression   (rule 115)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 521
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 523
    type_specifier	go to state 524
    type_qualifier_list	go to state 525
    type_qualifier	go to state 42
    basic_type_specifier	go to state 526
    sue_type_specifier_elaboration	go to state 527
    sue_type_specifier	go to state 528
    typedef_type_specifier	go to state 529
    basic_type_name	go to state 530
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    type_name	go to state 531
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 373
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 532



state 331

    parameter_type_list  ->  '(' ')' . type_qualifier_list_opt   (rule 398)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 61 (type_qualifier_list_opt)

    type_qualifier_list_opt	go to state 533
    type_qualifier_list	go to state 460
    type_qualifier	go to state 42



state 332

    unary_expression  ->  '+' . cast_expression   (rule 90)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 534
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 507
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 333

    unary_expression  ->  '-' . cast_expression   (rule 89)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 535
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 507
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 334

    unary_expression  ->  '~' . cast_expression   (rule 91)
    complex_name  ->  '~' . TYPEDEFname   (rule 653)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 536
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 537
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 507
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 335

    unary_expression  ->  '!' . cast_expression   (rule 92)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 538
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 507
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 336

    primary_expression  ->  constant .   (rule 14)

    $default	reduce using rule 14 (primary_expression)



state 337

    string_literal_list  ->  string_literal_list . STRINGliteral   (rule 7)
    primary_expression  ->  string_literal_list .   (rule 15)

    STRINGliteral	shift, and go to state 539

    $default	reduce using rule 15 (primary_expression)



state 338

    postfix_expression  ->  primary_expression .   (rule 63)

    $default	reduce using rule 63 (postfix_expression)



state 339

    postfix_expression  ->  postfix_expression . '[' comma_expression ']'   (rule 64)
    postfix_expression  ->  postfix_expression . '(' ')'   (rule 65)
    postfix_expression  ->  postfix_expression . '(' argument_expression_list ')'   (rule 66)
    postfix_expression  ->  postfix_expression . @1 '.' member_name   (rule 68)
    postfix_expression  ->  postfix_expression . @2 ARROW member_name   (rule 70)
    postfix_expression  ->  postfix_expression . ICR   (rule 71)
    postfix_expression  ->  postfix_expression . DECR   (rule 72)
    unary_expression  ->  postfix_expression .   (rule 85)

    ICR 	shift, and go to state 540
    DECR	shift, and go to state 541
    '(' 	shift, and go to state 542
    '[' 	shift, and go to state 543

    ARROW	reduce using rule 69 (@2)
    '.' 	reduce using rule 67 (@1)
    $default	reduce using rule 85 (unary_expression)

    @1  	go to state 544
    @2  	go to state 545



state 340

    argument_expression_list  ->  argument_expression_list . ',' assignment_expression   (rule 84)
    postfix_old_function_declarator  ->  paren_identifier_declarator '(' argument_expression_list . ')'   (rule 613)

    ')' 	shift, and go to state 546
    ',' 	shift, and go to state 547



state 341

    cast_expression  ->  unary_expression .   (rule 114)
    assignment_expression  ->  unary_expression . assignment_operator assignment_expression   (rule 156)

    MULTassign	shift, and go to state 104
    DIVassign	shift, and go to state 105
    MODassign	shift, and go to state 106
    PLUSassign	shift, and go to state 107
    MINUSassign	shift, and go to state 108
    LSassign	shift, and go to state 109
    RSassign	shift, and go to state 110
    ANDassign	shift, and go to state 111
    ERassign	shift, and go to state 112
    ORassign	shift, and go to state 113
    '=' 	shift, and go to state 130

    $default	reduce using rule 114 (cast_expression)

    assignment_operator	go to state 548



state 342

    unary_expression  ->  allocation_expression .   (rule 95)

    $default	reduce using rule 95 (unary_expression)



state 343

    allocation_expression  ->  global_opt_scope_opt_operator_new . '(' type_name ')' operator_new_initializer_opt   (rule 96)
    allocation_expression  ->  global_opt_scope_opt_operator_new . '(' argument_expression_list ')' '(' type_name ')' operator_new_initializer_opt   (rule 97)
    allocation_expression  ->  global_opt_scope_opt_operator_new . operator_new_type   (rule 98)
    allocation_expression  ->  global_opt_scope_opt_operator_new . '(' argument_expression_list ')' operator_new_type   (rule 99)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 90
    '(' 	shift, and go to state 549

    $default	reduce using rule 644 (@22)

    non_elaborating_type_specifier	go to state 550
    operator_new_type	go to state 551
    type_qualifier_list	go to state 552
    type_qualifier	go to state 42
    basic_type_specifier	go to state 135
    sue_type_specifier	go to state 136
    typedef_type_specifier	go to state 137
    basic_type_name	go to state 138
    elaborated_type_name	go to state 53
    aggregate_name	go to state 139
    aggregate_key	go to state 140
    enum_name	go to state 141
    global_opt_scope_opt_enum_key	go to state 142
    scoping_name	go to state 75
    scope	go to state 143
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 144



state 344

    deallocation_expression  ->  cast_expression .   (rule 116)

    $default	reduce using rule 116 (deallocation_expression)



state 345

    point_member_expression  ->  deallocation_expression .   (rule 122)

    $default	reduce using rule 122 (point_member_expression)



state 346

    deallocation_expression  ->  global_opt_scope_opt_delete . deallocation_expression   (rule 117)
    deallocation_expression  ->  global_opt_scope_opt_delete . '[' comma_expression ']' deallocation_expression   (rule 118)
    deallocation_expression  ->  global_opt_scope_opt_delete . '[' ']' deallocation_expression   (rule 119)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335
    '[' 	shift, and go to state 553

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 554
    global_opt_scope_opt_delete	go to state 346
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 347

    point_member_expression  ->  point_member_expression . DOTstar deallocation_expression   (rule 123)
    point_member_expression  ->  point_member_expression . ARROWstar deallocation_expression   (rule 124)
    multiplicative_expression  ->  point_member_expression .   (rule 125)

    DOTstar	shift, and go to state 555
    ARROWstar	shift, and go to state 556

    $default	reduce using rule 125 (multiplicative_expression)



state 348

    multiplicative_expression  ->  multiplicative_expression . '*' point_member_expression   (rule 126)
    multiplicative_expression  ->  multiplicative_expression . '/' point_member_expression   (rule 127)
    multiplicative_expression  ->  multiplicative_expression . '%' point_member_expression   (rule 128)
    additive_expression  ->  multiplicative_expression .   (rule 129)

    '*' 	shift, and go to state 557
    '/' 	shift, and go to state 558
    '%' 	shift, and go to state 559

    $default	reduce using rule 129 (additive_expression)



state 349

    additive_expression  ->  additive_expression . '+' multiplicative_expression   (rule 130)
    additive_expression  ->  additive_expression . '-' multiplicative_expression   (rule 131)
    shift_expression  ->  additive_expression .   (rule 132)

    '+' 	shift, and go to state 560
    '-' 	shift, and go to state 561

    $default	reduce using rule 132 (shift_expression)



state 350

    shift_expression  ->  shift_expression . LS additive_expression   (rule 133)
    shift_expression  ->  shift_expression . RS additive_expression   (rule 134)
    relational_expression  ->  shift_expression .   (rule 135)

    LS  	shift, and go to state 562
    RS  	shift, and go to state 563

    $default	reduce using rule 135 (relational_expression)



state 351

    relational_expression  ->  relational_expression . '<' shift_expression   (rule 136)
    relational_expression  ->  relational_expression . '>' shift_expression   (rule 137)
    relational_expression  ->  relational_expression . LE shift_expression   (rule 138)
    relational_expression  ->  relational_expression . GE shift_expression   (rule 139)
    equality_expression  ->  relational_expression .   (rule 140)

    LE  	shift, and go to state 564
    GE  	shift, and go to state 565
    '<' 	shift, and go to state 566
    '>' 	shift, and go to state 567

    $default	reduce using rule 140 (equality_expression)



state 352

    equality_expression  ->  equality_expression . EQ relational_expression   (rule 141)
    equality_expression  ->  equality_expression . NE relational_expression   (rule 142)
    AND_expression  ->  equality_expression .   (rule 143)

    EQ  	shift, and go to state 568
    NE  	shift, and go to state 569

    $default	reduce using rule 143 (AND_expression)



state 353

    AND_expression  ->  AND_expression . '&' equality_expression   (rule 144)
    exclusive_OR_expression  ->  AND_expression .   (rule 145)

    '&' 	shift, and go to state 570

    $default	reduce using rule 145 (exclusive_OR_expression)



state 354

    exclusive_OR_expression  ->  exclusive_OR_expression . '^' AND_expression   (rule 146)
    inclusive_OR_expression  ->  exclusive_OR_expression .   (rule 147)

    '^' 	shift, and go to state 571

    $default	reduce using rule 147 (inclusive_OR_expression)



state 355

    inclusive_OR_expression  ->  inclusive_OR_expression . '|' exclusive_OR_expression   (rule 148)
    logical_AND_expression  ->  inclusive_OR_expression .   (rule 149)

    '|' 	shift, and go to state 572

    $default	reduce using rule 149 (logical_AND_expression)



state 356

    logical_AND_expression  ->  logical_AND_expression . ANDAND inclusive_OR_expression   (rule 150)
    logical_OR_expression  ->  logical_AND_expression .   (rule 151)

    ANDAND	shift, and go to state 573

    $default	reduce using rule 151 (logical_OR_expression)



state 357

    logical_OR_expression  ->  logical_OR_expression . OROR logical_AND_expression   (rule 152)
    conditional_expression  ->  logical_OR_expression .   (rule 153)
    conditional_expression  ->  logical_OR_expression . '?' comma_expression ':' conditional_expression   (rule 154)

    OROR	shift, and go to state 574
    '?' 	shift, and go to state 575

    $default	reduce using rule 153 (conditional_expression)



state 358

    assignment_expression  ->  conditional_expression .   (rule 155)

    $default	reduce using rule 155 (assignment_expression)



state 359

    argument_expression_list  ->  assignment_expression .   (rule 83)

    $default	reduce using rule 83 (argument_expression_list)



state 360

    non_casting_parameter_declaration  ->  declaration_specifier .   (rule 422)
    non_casting_parameter_declaration  ->  declaration_specifier . abstract_declarator   (rule 423)
    non_casting_parameter_declaration  ->  declaration_specifier . identifier_declarator   (rule 424)
    non_casting_parameter_declaration  ->  declaration_specifier . parameter_typedef_declarator   (rule 425)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 485
    '(' 	shift, and go to state 576
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    '[' 	shift, and go to state 175

    $default	reduce using rule 422 (non_casting_parameter_declaration)

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    parameter_typedef_declarator	go to state 577
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    identifier_declarator	go to state 578
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    abstract_declarator	go to state 579
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 516
    unary_modifier	go to state 517
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 361

    non_casting_parameter_declaration  ->  type_specifier . identifier_declarator   (rule 429)
    non_casting_parameter_declaration  ->  type_specifier . parameter_typedef_declarator   (rule 430)
    type_name  ->  type_specifier .   (rule 438)
    type_name  ->  type_specifier . abstract_declarator   (rule 443)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 485
    '(' 	shift, and go to state 576
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    '[' 	shift, and go to state 175

    $default	reduce using rule 438 (type_name)

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    parameter_typedef_declarator	go to state 580
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    identifier_declarator	go to state 581
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    abstract_declarator	go to state 582
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 516
    unary_modifier	go to state 517
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 362

    declaration_qualifier_list  ->  declaration_qualifier_list . declaration_qualifier   (rule 236)
    basic_declaration_specifier  ->  declaration_qualifier_list . basic_type_name   (rule 243)
    sue_declaration_specifier  ->  declaration_qualifier_list . elaborated_type_name   (rule 253)
    sue_declaration_specifier  ->  declaration_qualifier_list . elaborated_type_name_elaboration   (rule 254)
    typedef_declaration_specifier  ->  declaration_qualifier_list . TYPEDEFname   (rule 264)
    typedef_declaration_specifier  ->  declaration_qualifier_list . global_or_scoped_typedefname   (rule 265)
    non_casting_parameter_declaration  ->  declaration_qualifier_list .   (rule 426)
    non_casting_parameter_declaration  ->  declaration_qualifier_list . abstract_declarator   (rule 427)
    non_casting_parameter_declaration  ->  declaration_qualifier_list . identifier_declarator   (rule 428)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 191
    '(' 	shift, and go to state 583
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    '[' 	shift, and go to state 175

    CLCL	reduce using rule 644 (@22)
    $default	reduce using rule 426 (non_casting_parameter_declaration)

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    declaration_qualifier	go to state 195
    type_qualifier	go to state 196
    storage_class	go to state 197
    basic_type_name	go to state 198
    elaborated_type_name_elaboration	go to state 199
    elaborated_type_name	go to state 200
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    parameter_type_list	go to state 176
    identifier_declarator	go to state 584
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    abstract_declarator	go to state 585
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 586
    unary_modifier	go to state 587
    scoping_name	go to state 75
    scope	go to state 76
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 205



state 363

    declaration_qualifier_list  ->  type_qualifier_list . storage_class   (rule 235)
    type_qualifier_list  ->  type_qualifier_list . type_qualifier   (rule 238)
    basic_type_specifier  ->  type_qualifier_list . basic_type_name   (rule 248)
    sue_type_specifier_elaboration  ->  type_qualifier_list . elaborated_type_name_elaboration   (rule 259)
    sue_type_specifier  ->  type_qualifier_list . elaborated_type_name   (rule 262)
    typedef_type_specifier  ->  type_qualifier_list . TYPEDEFname   (rule 270)
    typedef_type_specifier  ->  type_qualifier_list . global_or_scoped_typedefname   (rule 271)
    non_casting_parameter_declaration  ->  type_qualifier_list . identifier_declarator   (rule 437)
    type_name  ->  type_qualifier_list .   (rule 442)
    type_name  ->  type_qualifier_list . abstract_declarator   (rule 447)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 206
    '(' 	shift, and go to state 583
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    '[' 	shift, and go to state 175

    CLCL	reduce using rule 644 (@22)
    $default	reduce using rule 442 (type_name)

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    type_qualifier	go to state 208
    storage_class	go to state 209
    basic_type_name	go to state 210
    elaborated_type_name_elaboration	go to state 211
    elaborated_type_name	go to state 212
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    parameter_type_list	go to state 176
    identifier_declarator	go to state 588
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    abstract_declarator	go to state 589
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 586
    unary_modifier	go to state 587
    scoping_name	go to state 75
    scope	go to state 76
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 215



state 364

    declaration_specifier  ->  sue_declaration_specifier .   (rule 228)
    sue_declaration_specifier  ->  sue_declaration_specifier . declaration_qualifier   (rule 257)

    AUTO	shift, and go to state 2
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26

    $default	reduce using rule 228 (declaration_specifier)

    declaration_qualifier	go to state 222
    type_qualifier	go to state 196
    storage_class	go to state 197



state 365

    type_specifier  ->  sue_type_specifier_elaboration .   (rule 232)
    sue_declaration_specifier  ->  sue_type_specifier_elaboration . storage_class   (rule 256)
    sue_type_specifier_elaboration  ->  sue_type_specifier_elaboration . type_qualifier   (rule 260)

    AUTO	shift, and go to state 2
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26

    $default	reduce using rule 232 (type_specifier)

    type_qualifier	go to state 224
    storage_class	go to state 225



state 366

    type_specifier  ->  sue_type_specifier .   (rule 231)
    sue_declaration_specifier  ->  sue_type_specifier . storage_class   (rule 255)
    sue_type_specifier  ->  sue_type_specifier . type_qualifier   (rule 263)

    AUTO	shift, and go to state 2
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26

    $default	reduce using rule 231 (type_specifier)

    type_qualifier	go to state 227
    storage_class	go to state 228



state 367

    postfix_expression  ->  basic_type_name . '(' assignment_expression ')'   (rule 77)
    basic_declaration_specifier  ->  basic_type_name . storage_class   (rule 245)
    basic_type_specifier  ->  basic_type_name . basic_type_name   (rule 249)
    basic_type_specifier  ->  basic_type_name . type_qualifier   (rule 250)
    non_casting_parameter_declaration  ->  basic_type_name . identifier_declarator   (rule 431)
    non_casting_parameter_declaration  ->  basic_type_name . parameter_typedef_declarator   (rule 432)
    type_name  ->  basic_type_name .   (rule 439)
    type_name  ->  basic_type_name . abstract_declarator   (rule 444)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 485
    '(' 	shift, and go to state 590
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    '[' 	shift, and go to state 175

    $default	reduce using rule 439 (type_name)

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    type_qualifier	go to state 233
    storage_class	go to state 234
    basic_type_name	go to state 235
    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    parameter_typedef_declarator	go to state 591
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    identifier_declarator	go to state 592
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    abstract_declarator	go to state 593
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 516
    unary_modifier	go to state 517
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 368

    parameter_type_list  ->  '(' named_parameter_type_list . ')' type_qualifier_list_opt   (rule 401)

    ')' 	shift, and go to state 594



state 369

    named_parameter_type_list  ->  parameter_list .   (rule 406)
    named_parameter_type_list  ->  parameter_list . comma_opt_ellipsis   (rule 407)
    parameter_list  ->  parameter_list . ',' parameter_declaration   (rule 417)

    ELLIPSIS	shift, and go to state 595
    ',' 	shift, and go to state 596

    $default	reduce using rule 406 (named_parameter_type_list)

    comma_opt_ellipsis	go to state 597



state 370

    parameter_list  ->  non_casting_parameter_declaration .   (rule 413)
    parameter_list  ->  non_casting_parameter_declaration . initializer   (rule 414)

    '=' 	shift, and go to state 490

    $default	reduce using rule 413 (parameter_list)

    initializer	go to state 598



state 371

    parameter_type_list  ->  '(' type_name . ')' type_qualifier_list_opt   (rule 399)
    parameter_type_list  ->  '(' type_name . initializer ')' type_qualifier_list_opt   (rule 400)
    named_parameter_type_list  ->  type_name . comma_opt_ellipsis   (rule 408)
    named_parameter_type_list  ->  type_name . initializer comma_opt_ellipsis   (rule 409)
    parameter_list  ->  type_name . ',' parameter_declaration   (rule 415)
    parameter_list  ->  type_name . initializer ',' parameter_declaration   (rule 416)

    ELLIPSIS	shift, and go to state 595
    ')' 	shift, and go to state 599
    ',' 	shift, and go to state 600
    '=' 	shift, and go to state 490

    comma_opt_ellipsis	go to state 601
    initializer	go to state 602



state 372

    unary_expression  ->  asterisk_or_ampersand . cast_expression   (rule 88)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 603
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 507
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 373

    aggregate_name  ->  scope . aggregate_key tag_name   (rule 302)
    scope  ->  scope . scoping_name CLCL   (rule 641)
    global_or_scope  ->  scope .   (rule 647)
    scope_opt_identifier  ->  scope . IDENTIFIER   (rule 650)
    scope_opt_complex_name  ->  scope . complex_name   (rule 652)
    scoped_typedefname  ->  scope . TYPEDEFname   (rule 659)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 260
    TYPEDEFname	shift, and go to state 261
    '~' 	shift, and go to state 32

    $default	reduce using rule 647 (global_or_scope)

    operator_function_name	go to state 34
    aggregate_key	go to state 263
    scoping_name	go to state 264
    tag_name	go to state 77
    complex_name	go to state 265



state 374

    aggregate_name  ->  global_scope . scope aggregate_key tag_name   (rule 300)
    aggregate_name  ->  global_scope . aggregate_key tag_name   (rule 301)
    global_or_scope  ->  global_scope .   (rule 646)
    global_or_scope  ->  global_scope . scope   (rule 648)
    global_opt_scope_opt_identifier  ->  global_scope . scope_opt_identifier   (rule 655)
    global_opt_scope_opt_complex_name  ->  global_scope . scope_opt_complex_name   (rule 657)
    global_or_scoped_typedefname  ->  global_scope . scoped_typedefname   (rule 661)
    global_or_scoped_typedefname  ->  global_scope . TYPEDEFname   (rule 662)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 266
    '~' 	shift, and go to state 32

    $default	reduce using rule 646 (global_or_scope)

    operator_function_name	go to state 34
    aggregate_key	go to state 267
    scoping_name	go to state 75
    scope	go to state 604
    tag_name	go to state 77
    scope_opt_identifier	go to state 605
    scope_opt_complex_name	go to state 606
    complex_name	go to state 83
    scoped_typedefname	go to state 269



state 375

    global_opt_scope_opt_operator_new  ->  global_or_scope . NEW   (rule 101)
    global_opt_scope_opt_delete  ->  global_or_scope . DELETE   (rule 121)
    global_opt_scope_opt_enum_key  ->  global_or_scope . ENUM   (rule 389)

    ENUM	shift, and go to state 271
    NEW 	shift, and go to state 607
    DELETE	shift, and go to state 608



state 376

    global_opt_scope_opt_identifier  ->  scope_opt_identifier .   (rule 656)

    $default	reduce using rule 656 (global_opt_scope_opt_identifier)



state 377

    global_opt_scope_opt_complex_name  ->  scope_opt_complex_name .   (rule 658)

    $default	reduce using rule 658 (global_opt_scope_opt_complex_name)



state 378

    primary_expression  ->  global_opt_scope_opt_identifier .   (rule 11)

    $default	reduce using rule 11 (primary_expression)



state 379

    primary_expression  ->  global_opt_scope_opt_complex_name .   (rule 12)

    $default	reduce using rule 12 (primary_expression)



state 380

    postfix_expression  ->  global_or_scoped_typedefname . '(' ')'   (rule 74)
    postfix_expression  ->  global_or_scoped_typedefname . '(' argument_expression_list ')'   (rule 76)
    typedef_declaration_specifier  ->  global_or_scoped_typedefname . storage_class   (rule 268)
    typedef_type_specifier  ->  global_or_scoped_typedefname . type_qualifier   (rule 273)
    non_casting_parameter_declaration  ->  global_or_scoped_typedefname . identifier_declarator   (rule 435)
    non_casting_parameter_declaration  ->  global_or_scoped_typedefname . parameter_typedef_declarator   (rule 436)
    type_name  ->  global_or_scoped_typedefname .   (rule 441)
    type_name  ->  global_or_scoped_typedefname . abstract_declarator   (rule 446)

    AUTO	shift, and go to state 2
    STRUCT	shift, and go to state 5
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 485
    '(' 	shift, and go to state 609
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    '[' 	shift, and go to state 175

    $default	reduce using rule 441 (type_name)

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    type_qualifier	go to state 273
    storage_class	go to state 274
    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    parameter_typedef_declarator	go to state 610
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    identifier_declarator	go to state 611
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    abstract_declarator	go to state 612
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 516
    unary_modifier	go to state 517
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 381

    postfix_expression  ->  TYPEDEFname . '(' ')'   (rule 73)
    postfix_expression  ->  TYPEDEFname . '(' argument_expression_list ')'   (rule 75)
    tag_name  ->  TYPEDEFname .   (rule 643)

    '(' 	shift, and go to state 613

    $default	reduce using rule 643 (tag_name)



state 382

    array_abstract_declarator  ->  '[' ']' .   (rule 623)

    $default	reduce using rule 623 (array_abstract_declarator)



state 383

    cast_expression  ->  unary_expression .   (rule 114)

    $default	reduce using rule 114 (cast_expression)



state 384

    constant_expression  ->  conditional_expression .   (rule 170)

    $default	reduce using rule 170 (constant_expression)



state 385

    array_abstract_declarator  ->  '[' constant_expression . ']'   (rule 624)

    ']' 	shift, and go to state 614



state 386

    postfix_expression  ->  basic_type_name . '(' assignment_expression ')'   (rule 77)

    '(' 	shift, and go to state 615



state 387

    scope  ->  scope . scoping_name CLCL   (rule 641)
    global_or_scope  ->  scope .   (rule 647)
    scope_opt_identifier  ->  scope . IDENTIFIER   (rule 650)
    scope_opt_complex_name  ->  scope . complex_name   (rule 652)
    scoped_typedefname  ->  scope . TYPEDEFname   (rule 659)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 260
    TYPEDEFname	shift, and go to state 261
    '~' 	shift, and go to state 32

    $default	reduce using rule 647 (global_or_scope)

    operator_function_name	go to state 34
    aggregate_key	go to state 155
    scoping_name	go to state 264
    tag_name	go to state 77
    complex_name	go to state 265



state 388

    global_or_scope  ->  global_scope .   (rule 646)
    global_or_scope  ->  global_scope . scope   (rule 648)
    global_opt_scope_opt_identifier  ->  global_scope . scope_opt_identifier   (rule 655)
    global_opt_scope_opt_complex_name  ->  global_scope . scope_opt_complex_name   (rule 657)
    global_or_scoped_typedefname  ->  global_scope . scoped_typedefname   (rule 661)
    global_or_scoped_typedefname  ->  global_scope . TYPEDEFname   (rule 662)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 266
    '~' 	shift, and go to state 32

    $default	reduce using rule 646 (global_or_scope)

    operator_function_name	go to state 34
    aggregate_key	go to state 155
    scoping_name	go to state 75
    scope	go to state 616
    tag_name	go to state 77
    scope_opt_identifier	go to state 605
    scope_opt_complex_name	go to state 606
    complex_name	go to state 83
    scoped_typedefname	go to state 269



state 389

    global_opt_scope_opt_operator_new  ->  global_or_scope . NEW   (rule 101)
    global_opt_scope_opt_delete  ->  global_or_scope . DELETE   (rule 121)

    NEW 	shift, and go to state 607
    DELETE	shift, and go to state 608



state 390

    postfix_expression  ->  global_or_scoped_typedefname . '(' ')'   (rule 74)
    postfix_expression  ->  global_or_scoped_typedefname . '(' argument_expression_list ')'   (rule 76)

    '(' 	shift, and go to state 617



state 391

    array_abstract_declarator  ->  array_abstract_declarator '[' . constant_expression ']'   (rule 625)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 384
    constant_expression	go to state 618
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 392

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    nonunary_constructed_identifier_declarator  ->  '(' . unary_identifier_declarator ')' '(' argument_expression_list ')'   (rule 225)
    nonunary_constructed_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 226)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 169
    '(' 	shift, and go to state 619
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 620
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    unary_identifier_declarator	go to state 293
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 621
    unary_modifier	go to state 622
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 393

    nonunary_constructed_identifier_declarator  ->  paren_identifier_declarator . '(' argument_expression_list ')'   (rule 223)
    nonunary_constructed_identifier_declarator  ->  paren_identifier_declarator . postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 224)
    identifier_declarator  ->  paren_identifier_declarator .   (rule 603)
    postfix_identifier_declarator  ->  paren_identifier_declarator . postfixing_abstract_declarator   (rule 607)

    '(' 	shift, and go to state 623
    '[' 	shift, and go to state 175

    $default	reduce using rule 603 (identifier_declarator)

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 297
    array_abstract_declarator	go to state 178



state 394

    default_declaring_list  ->  default_declaring_list ',' constructed_identifier_declarator .   (rule 186)

    $default	reduce using rule 186 (default_declaring_list)



state 395

    default_declaring_list  ->  default_declaring_list ',' identifier_declarator . @5 initializer_opt   (rule 183)

    $default	reduce using rule 182 (@5)

    @5  	go to state 624



state 396

    constructed_identifier_declarator  ->  asterisk_or_ampersand . constructed_identifier_declarator   (rule 221)
    unary_identifier_declarator  ->  asterisk_or_ampersand . identifier_declarator   (rule 605)
    unary_modifier  ->  asterisk_or_ampersand . type_qualifier_list   (rule 637)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 169
    '(' 	shift, and go to state 392
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 393
    operator_function_name	go to state 34
    constructed_identifier_declarator	go to state 418
    nonunary_constructed_identifier_declarator	go to state 194
    type_qualifier_list	go to state 254
    type_qualifier	go to state 42
    aggregate_key	go to state 155
    identifier_declarator	go to state 255
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 396
    unary_modifier	go to state 397
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 397

    constructed_identifier_declarator  ->  unary_modifier . constructed_identifier_declarator   (rule 222)
    unary_identifier_declarator  ->  unary_modifier . identifier_declarator   (rule 606)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 169
    '(' 	shift, and go to state 392
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 393
    operator_function_name	go to state 34
    constructed_identifier_declarator	go to state 419
    nonunary_constructed_identifier_declarator	go to state 194
    aggregate_key	go to state 155
    identifier_declarator	go to state 257
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 396
    unary_modifier	go to state 397
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 398

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    constructed_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' '(' argument_expression_list ')'   (rule 212)
    constructed_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 213)
    constructed_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')' '(' argument_expression_list ')'   (rule 214)
    constructed_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')' '(' argument_expression_list ')'   (rule 215)
    constructed_parameter_typedef_declarator  ->  '(' . clean_typedef_declarator ')' '(' argument_expression_list ')'   (rule 218)
    constructed_parameter_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 219)
    nonunary_constructed_identifier_declarator  ->  '(' . unary_identifier_declarator ')' '(' argument_expression_list ')'   (rule 225)
    nonunary_constructed_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 226)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator   (rule 588)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')'   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')'   (rule 597)
    postfix_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')'   (rule 598)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator   (rule 599)
    simple_paren_typedef_declarator  ->  '(' . TYPEDEFname ')'   (rule 600)
    simple_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator ')'   (rule 601)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 288
    '(' 	shift, and go to state 625
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 620
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    clean_typedef_declarator	go to state 290
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 291
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 292
    unary_identifier_declarator	go to state 293
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 626
    unary_modifier	go to state 627
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 399

    declaring_list  ->  declaring_list ',' constructed_declarator .   (rule 204)

    $default	reduce using rule 204 (declaring_list)



state 400

    declaring_list  ->  declaring_list ',' declarator . @11 initializer_opt   (rule 198)

    $default	reduce using rule 197 (@11)

    @11 	go to state 628



state 401

    constructed_declarator  ->  asterisk_or_ampersand . constructed_declarator   (rule 210)
    clean_typedef_declarator  ->  asterisk_or_ampersand . parameter_typedef_declarator   (rule 585)
    paren_typedef_declarator  ->  asterisk_or_ampersand . '(' simple_paren_typedef_declarator ')'   (rule 590)
    paren_typedef_declarator  ->  asterisk_or_ampersand . '(' TYPEDEFname ')'   (rule 592)
    paren_typedef_declarator  ->  asterisk_or_ampersand . paren_typedef_declarator   (rule 594)
    unary_identifier_declarator  ->  asterisk_or_ampersand . identifier_declarator   (rule 605)
    unary_modifier  ->  asterisk_or_ampersand . type_qualifier_list   (rule 637)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 146
    '(' 	shift, and go to state 629
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 393
    operator_function_name	go to state 34
    constructed_declarator	go to state 305
    constructed_paren_typedef_declarator	go to state 150
    constructed_parameter_typedef_declarator	go to state 151
    nonunary_constructed_identifier_declarator	go to state 152
    type_qualifier_list	go to state 254
    type_qualifier	go to state 42
    aggregate_key	go to state 155
    parameter_typedef_declarator	go to state 306
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 307
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 308
    identifier_declarator	go to state 255
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 401
    unary_modifier	go to state 402
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 402

    constructed_declarator  ->  unary_modifier . constructed_declarator   (rule 211)
    clean_typedef_declarator  ->  unary_modifier . parameter_typedef_declarator   (rule 586)
    paren_typedef_declarator  ->  unary_modifier . '(' simple_paren_typedef_declarator ')'   (rule 591)
    paren_typedef_declarator  ->  unary_modifier . '(' TYPEDEFname ')'   (rule 593)
    paren_typedef_declarator  ->  unary_modifier . paren_typedef_declarator   (rule 595)
    unary_identifier_declarator  ->  unary_modifier . identifier_declarator   (rule 606)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 146
    '(' 	shift, and go to state 630
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 393
    operator_function_name	go to state 34
    constructed_declarator	go to state 310
    constructed_paren_typedef_declarator	go to state 150
    constructed_parameter_typedef_declarator	go to state 151
    nonunary_constructed_identifier_declarator	go to state 152
    aggregate_key	go to state 155
    parameter_typedef_declarator	go to state 311
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 312
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 308
    identifier_declarator	go to state 257
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 401
    unary_modifier	go to state 402
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 403

    constructed_paren_typedef_declarator  ->  '(' TYPEDEFname . postfixing_abstract_declarator ')' '(' argument_expression_list ')'   (rule 215)
    typedef_declaration_specifier  ->  TYPEDEFname . storage_class   (rule 267)
    typedef_type_specifier  ->  TYPEDEFname . type_qualifier   (rule 272)
    non_casting_parameter_declaration  ->  TYPEDEFname . identifier_declarator   (rule 433)
    non_casting_parameter_declaration  ->  TYPEDEFname . parameter_typedef_declarator   (rule 434)
    type_name  ->  TYPEDEFname .   (rule 440)
    type_name  ->  TYPEDEFname . abstract_declarator   (rule 445)
    postfix_paren_typedef_declarator  ->  '(' TYPEDEFname . postfixing_abstract_declarator ')'   (rule 598)
    simple_paren_typedef_declarator  ->  '(' TYPEDEFname . ')'   (rule 600)
    tag_name  ->  TYPEDEFname .   (rule 643)

    AUTO	shift, and go to state 2
    STRUCT	shift, and go to state 5
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 485
    '(' 	shift, and go to state 576
    ')' 	shift, and go to state 474
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    '[' 	shift, and go to state 175

    CLCL	reduce using rule 643 (tag_name)
    ')' 	[reduce using rule 440 (type_name)]
    $default	reduce using rule 440 (type_name)

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    type_qualifier	go to state 153
    storage_class	go to state 154
    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    parameter_typedef_declarator	go to state 510
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    identifier_declarator	go to state 511
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    abstract_declarator	go to state 512
    postfixing_abstract_declarator	go to state 631
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 516
    unary_modifier	go to state 517
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 404

    basic_declaration_specifier  ->  basic_type_name . storage_class   (rule 245)
    basic_type_specifier  ->  basic_type_name . basic_type_name   (rule 249)
    basic_type_specifier  ->  basic_type_name . type_qualifier   (rule 250)
    non_casting_parameter_declaration  ->  basic_type_name . identifier_declarator   (rule 431)
    non_casting_parameter_declaration  ->  basic_type_name . parameter_typedef_declarator   (rule 432)
    type_name  ->  basic_type_name .   (rule 439)
    type_name  ->  basic_type_name . abstract_declarator   (rule 444)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 485
    '(' 	shift, and go to state 576
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    '[' 	shift, and go to state 175

    $default	reduce using rule 439 (type_name)

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    type_qualifier	go to state 233
    storage_class	go to state 234
    basic_type_name	go to state 235
    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    parameter_typedef_declarator	go to state 591
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    identifier_declarator	go to state 592
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    abstract_declarator	go to state 593
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 516
    unary_modifier	go to state 517
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 405

    typedef_declaration_specifier  ->  global_or_scoped_typedefname . storage_class   (rule 268)
    typedef_type_specifier  ->  global_or_scoped_typedefname . type_qualifier   (rule 273)
    non_casting_parameter_declaration  ->  global_or_scoped_typedefname . identifier_declarator   (rule 435)
    non_casting_parameter_declaration  ->  global_or_scoped_typedefname . parameter_typedef_declarator   (rule 436)
    type_name  ->  global_or_scoped_typedefname .   (rule 441)
    type_name  ->  global_or_scoped_typedefname . abstract_declarator   (rule 446)

    AUTO	shift, and go to state 2
    STRUCT	shift, and go to state 5
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 485
    '(' 	shift, and go to state 576
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    '[' 	shift, and go to state 175

    $default	reduce using rule 441 (type_name)

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    type_qualifier	go to state 273
    storage_class	go to state 274
    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    parameter_typedef_declarator	go to state 610
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    identifier_declarator	go to state 611
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    abstract_declarator	go to state 612
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 516
    unary_modifier	go to state 517
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 406

    constructor_init_list  ->  ':' . constructor_init   (rule 566)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 632
    TYPEDEFname	shift, and go to state 633
    '(' 	shift, and go to state 634

    $default	reduce using rule 644 (@22)

    aggregate_key	go to state 155
    constructor_init	go to state 635
    scoping_name	go to state 75
    scope	go to state 434
    tag_name	go to state 77
    global_scope	go to state 435
    @22 	go to state 79
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 636



state 407

    constructor_function_definition  ->  declaration_specifier parameter_type_list constructor_init_list_opt . compound_statement   (rule 527)

    '{' 	shift, and go to state 251

    compound_statement	go to state 637



state 408

    constructor_init_list_opt  ->  constructor_init_list .   (rule 565)
    constructor_init_list  ->  constructor_init_list . ',' constructor_init   (rule 567)

    ',' 	shift, and go to state 638

    $default	reduce using rule 565 (constructor_init_list_opt)



state 409

    declaring_list  ->  declaration_specifier declarator @6 . initializer_opt   (rule 188)

    '=' 	shift, and go to state 490

    $default	reduce using rule 448 (initializer_opt)

    initializer_opt	go to state 639
    initializer	go to state 492



state 410

    new_function_definition  ->  declaration_specifier declarator compound_statement .   (rule 501)

    $default	reduce using rule 501 (new_function_definition)



state 411

    old_function_definition  ->  declaration_specifier old_function_declarator @15 . old_function_body   (rule 511)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 448
    '{' 	shift, and go to state 251

    $default	reduce using rule 644 (@22)

    declaration	go to state 449
    default_declaring_list	go to state 36
    declaring_list	go to state 37
    declaration_specifier	go to state 450
    type_specifier	go to state 451
    declaration_qualifier_list	go to state 452
    type_qualifier_list	go to state 453
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 45
    sue_type_specifier_elaboration	go to state 46
    sue_type_specifier	go to state 47
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 454
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    compound_statement	go to state 455
    declaration_list	go to state 456
    old_function_body	go to state 640
    scoping_name	go to state 75
    scope	go to state 143
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 458



state 412

    declaring_list  ->  type_specifier declarator @7 . initializer_opt   (rule 190)

    '=' 	shift, and go to state 490

    $default	reduce using rule 448 (initializer_opt)

    initializer_opt	go to state 641
    initializer	go to state 492



state 413

    new_function_definition  ->  type_specifier declarator compound_statement .   (rule 502)

    $default	reduce using rule 502 (new_function_definition)



state 414

    old_function_definition  ->  type_specifier old_function_declarator @16 . old_function_body   (rule 513)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 448
    '{' 	shift, and go to state 251

    $default	reduce using rule 644 (@22)

    declaration	go to state 449
    default_declaring_list	go to state 36
    declaring_list	go to state 37
    declaration_specifier	go to state 450
    type_specifier	go to state 451
    declaration_qualifier_list	go to state 452
    type_qualifier_list	go to state 453
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 45
    sue_type_specifier_elaboration	go to state 46
    sue_type_specifier	go to state 47
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 454
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    compound_statement	go to state 455
    declaration_list	go to state 456
    old_function_body	go to state 642
    scoping_name	go to state 75
    scope	go to state 143
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 458



state 415

    default_declaring_list  ->  declaration_qualifier_list identifier_declarator @3 . initializer_opt   (rule 179)

    '=' 	shift, and go to state 490

    $default	reduce using rule 448 (initializer_opt)

    initializer_opt	go to state 643
    initializer	go to state 492



state 416

    new_function_definition  ->  declaration_qualifier_list identifier_declarator compound_statement .   (rule 506)

    $default	reduce using rule 506 (new_function_definition)



state 417

    old_function_definition  ->  declaration_qualifier_list old_function_declarator @20 . old_function_body   (rule 521)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 448
    '{' 	shift, and go to state 251

    $default	reduce using rule 644 (@22)

    declaration	go to state 449
    default_declaring_list	go to state 36
    declaring_list	go to state 37
    declaration_specifier	go to state 450
    type_specifier	go to state 451
    declaration_qualifier_list	go to state 452
    type_qualifier_list	go to state 453
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 45
    sue_type_specifier_elaboration	go to state 46
    sue_type_specifier	go to state 47
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 454
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    compound_statement	go to state 455
    declaration_list	go to state 456
    old_function_body	go to state 644
    scoping_name	go to state 75
    scope	go to state 143
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 458



state 418

    constructed_identifier_declarator  ->  asterisk_or_ampersand constructed_identifier_declarator .   (rule 221)

    $default	reduce using rule 221 (constructed_identifier_declarator)



state 419

    constructed_identifier_declarator  ->  unary_modifier constructed_identifier_declarator .   (rule 222)

    $default	reduce using rule 222 (constructed_identifier_declarator)



state 420

    default_declaring_list  ->  type_qualifier_list identifier_declarator @4 . initializer_opt   (rule 181)

    '=' 	shift, and go to state 490

    $default	reduce using rule 448 (initializer_opt)

    initializer_opt	go to state 645
    initializer	go to state 492



state 421

    new_function_definition  ->  type_qualifier_list identifier_declarator compound_statement .   (rule 507)

    $default	reduce using rule 507 (new_function_definition)



state 422

    old_function_definition  ->  type_qualifier_list old_function_declarator @21 . old_function_body   (rule 523)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 448
    '{' 	shift, and go to state 251

    $default	reduce using rule 644 (@22)

    declaration	go to state 449
    default_declaring_list	go to state 36
    declaring_list	go to state 37
    declaration_specifier	go to state 450
    type_specifier	go to state 451
    declaration_qualifier_list	go to state 452
    type_qualifier_list	go to state 453
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 45
    sue_type_specifier_elaboration	go to state 46
    sue_type_specifier	go to state 47
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 454
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    compound_statement	go to state 455
    declaration_list	go to state 456
    old_function_body	go to state 646
    scoping_name	go to state 75
    scope	go to state 143
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 458



state 423

    declaring_list  ->  basic_type_name declarator @8 . initializer_opt   (rule 192)

    '=' 	shift, and go to state 490

    $default	reduce using rule 448 (initializer_opt)

    initializer_opt	go to state 647
    initializer	go to state 492



state 424

    new_function_definition  ->  basic_type_name declarator compound_statement .   (rule 503)

    $default	reduce using rule 503 (new_function_definition)



state 425

    old_function_definition  ->  basic_type_name old_function_declarator @17 . old_function_body   (rule 515)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 448
    '{' 	shift, and go to state 251

    $default	reduce using rule 644 (@22)

    declaration	go to state 449
    default_declaring_list	go to state 36
    declaring_list	go to state 37
    declaration_specifier	go to state 450
    type_specifier	go to state 451
    declaration_qualifier_list	go to state 452
    type_qualifier_list	go to state 453
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 45
    sue_type_specifier_elaboration	go to state 46
    sue_type_specifier	go to state 47
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 454
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    compound_statement	go to state 455
    declaration_list	go to state 456
    old_function_body	go to state 648
    scoping_name	go to state 75
    scope	go to state 143
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 458



state 426

    access_specifier  ->  PUBLIC .   (rule 314)

    $default	reduce using rule 314 (access_specifier)



state 427

    access_specifier  ->  PROTECTED .   (rule 316)

    $default	reduce using rule 316 (access_specifier)



state 428

    access_specifier  ->  PRIVATE .   (rule 315)

    $default	reduce using rule 315 (access_specifier)



state 429

    parent_class  ->  VIRTUAL . access_specifier_opt global_opt_scope_opt_typedefname   (rule 308)

    PUBLIC	shift, and go to state 426
    PROTECTED	shift, and go to state 427
    PRIVATE	shift, and go to state 428

    $default	reduce using rule 312 (access_specifier_opt)

    access_specifier_opt	go to state 649
    access_specifier	go to state 650



state 430

    tag_name  ->  TYPEDEFname .   (rule 643)
    global_opt_scope_opt_typedefname  ->  TYPEDEFname .   (rule 663)

    CLCL	reduce using rule 643 (tag_name)
    $default	reduce using rule 663 (global_opt_scope_opt_typedefname)



state 431

    derivation_opt  ->  ':' derivation_list .   (rule 304)
    derivation_list  ->  derivation_list . ',' parent_class   (rule 306)

    ',' 	shift, and go to state 651

    $default	reduce using rule 304 (derivation_opt)



state 432

    derivation_list  ->  parent_class .   (rule 305)

    $default	reduce using rule 305 (derivation_list)



state 433

    parent_class  ->  access_specifier . virtual_opt global_opt_scope_opt_typedefname   (rule 309)

    VIRTUAL	shift, and go to state 652

    $default	reduce using rule 310 (virtual_opt)

    virtual_opt	go to state 653



state 434

    scope  ->  scope . scoping_name CLCL   (rule 641)
    scoped_typedefname  ->  scope . TYPEDEFname   (rule 659)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 261

    aggregate_key	go to state 155
    scoping_name	go to state 264
    tag_name	go to state 77



state 435

    global_or_scoped_typedefname  ->  global_scope . scoped_typedefname   (rule 661)
    global_or_scoped_typedefname  ->  global_scope . TYPEDEFname   (rule 662)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 266

    aggregate_key	go to state 155
    scoping_name	go to state 75
    scope	go to state 434
    tag_name	go to state 77
    scoped_typedefname	go to state 269



state 436

    global_opt_scope_opt_typedefname  ->  global_or_scoped_typedefname .   (rule 664)

    $default	reduce using rule 664 (global_opt_scope_opt_typedefname)



state 437

    parent_class  ->  global_opt_scope_opt_typedefname .   (rule 307)

    $default	reduce using rule 307 (parent_class)



state 438

    aggregate_name_elaboration  ->  aggregate_name derivation_opt '{' . member_declaration_list_opt '}'   (rule 297)

    $default	reduce using rule 320 (member_declaration_list_opt)

    member_declaration_list_opt	go to state 654



state 439

    aggregate_name_elaboration  ->  aggregate_key derivation_opt '{' . member_declaration_list_opt '}'   (rule 298)

    $default	reduce using rule 320 (member_declaration_list_opt)

    member_declaration_list_opt	go to state 655



state 440

    enumerator_name  ->  IDENTIFIER .   (rule 394)

    $default	reduce using rule 394 (enumerator_name)



state 441

    enumerator_name  ->  TYPEDEFname .   (rule 395)

    $default	reduce using rule 395 (enumerator_name)



state 442

    enum_name_elaboration  ->  enum_name '{' enumerator_list . '}'   (rule 386)

    '}' 	shift, and go to state 656



state 443

    enumerator_list  ->  enumerator_list_no_trailing_comma .   (rule 390)
    enumerator_list  ->  enumerator_list_no_trailing_comma . ','   (rule 391)
    enumerator_list_no_trailing_comma  ->  enumerator_list_no_trailing_comma . ',' enumerator_name enumerator_value_opt   (rule 393)

    ',' 	shift, and go to state 657

    $default	reduce using rule 390 (enumerator_list)



state 444

    enumerator_list_no_trailing_comma  ->  enumerator_name . enumerator_value_opt   (rule 392)

    '=' 	shift, and go to state 658

    $default	reduce using rule 396 (enumerator_value_opt)

    enumerator_value_opt	go to state 659



state 445

    enum_name_elaboration  ->  global_opt_scope_opt_enum_key '{' enumerator_list . '}'   (rule 385)

    '}' 	shift, and go to state 660



state 446

    translation_unit  ->  translation_unit . external_definition   (rule 486)
    external_definition  ->  linkage_specifier '{' translation_unit . '}'   (rule 493)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 11
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 28
    '(' 	shift, and go to state 29
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    '}' 	shift, and go to state 661

    $default	reduce using rule 644 (@22)

    paren_identifier_declarator	go to state 33
    operator_function_name	go to state 34
    declaration	go to state 35
    default_declaring_list	go to state 36
    declaring_list	go to state 37
    declaration_specifier	go to state 38
    type_specifier	go to state 39
    declaration_qualifier_list	go to state 40
    type_qualifier_list	go to state 41
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 45
    sue_type_specifier_elaboration	go to state 46
    sue_type_specifier	go to state 47
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 51
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    external_definition	go to state 60
    linkage_specifier	go to state 61
    function_declaration	go to state 62
    function_definition	go to state 63
    new_function_definition	go to state 64
    old_function_definition	go to state 65
    constructor_function_definition	go to state 66
    constructor_function_declaration	go to state 67
    identifier_declarator	go to state 68
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    old_function_declarator	go to state 71
    postfix_old_function_declarator	go to state 72
    asterisk_or_ampersand	go to state 73
    unary_modifier	go to state 74
    scoping_name	go to state 75
    scope	go to state 76
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 85



state 447

    compound_statement  ->  '{' statement_list_opt . '}'   (rule 466)
    statement_list_opt  ->  statement_list_opt . statement   (rule 470)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    BREAK	shift, and go to state 662
    LONG	shift, and go to state 6
    SWITCH	shift, and go to state 663
    CASE	shift, and go to state 664
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    RETURN	shift, and go to state 665
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    CONTINUE	shift, and go to state 666
    FOR 	shift, and go to state 667
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    DEFAULT	shift, and go to state 668
    GOTO	shift, and go to state 669
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    DO  	shift, and go to state 670
    IF  	shift, and go to state 671
    STATIC	shift, and go to state 20
    WHILE	shift, and go to state 672
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 673
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 674
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335
    '{' 	shift, and go to state 251
    '}' 	shift, and go to state 675

    CLCL	reduce using rule 644 (@22)
    $default	reduce using rule 171 (comma_expression_opt)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 676
    comma_expression_opt	go to state 677
    declaration	go to state 678
    default_declaring_list	go to state 36
    declaring_list	go to state 37
    declaration_specifier	go to state 450
    type_specifier	go to state 451
    declaration_qualifier_list	go to state 452
    type_qualifier_list	go to state 453
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 45
    sue_type_specifier_elaboration	go to state 46
    sue_type_specifier	go to state 47
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 679
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    statement	go to state 680
    labeled_statement	go to state 681
    compound_statement	go to state 682
    expression_statement	go to state 683
    selection_statement	go to state 684
    iteration_statement	go to state 685
    jump_statement	go to state 686
    label	go to state 687
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 373
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 688



state 448

    declaring_list  ->  TYPEDEFname . declarator @9 initializer_opt   (rule 194)
    declaring_list  ->  TYPEDEFname . constructed_declarator   (rule 202)
    typedef_declaration_specifier  ->  TYPEDEFname . storage_class   (rule 267)
    typedef_type_specifier  ->  TYPEDEFname . type_qualifier   (rule 272)
    tag_name  ->  TYPEDEFname .   (rule 643)

    AUTO	shift, and go to state 2
    STRUCT	shift, and go to state 5
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 146
    '(' 	shift, and go to state 398
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    $default	reduce using rule 643 (tag_name)

    paren_identifier_declarator	go to state 393
    operator_function_name	go to state 34
    constructed_declarator	go to state 149
    constructed_paren_typedef_declarator	go to state 150
    constructed_parameter_typedef_declarator	go to state 151
    nonunary_constructed_identifier_declarator	go to state 152
    type_qualifier	go to state 153
    storage_class	go to state 154
    aggregate_key	go to state 155
    declarator	go to state 689
    typedef_declarator	go to state 157
    parameter_typedef_declarator	go to state 158
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 161
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 163
    identifier_declarator	go to state 164
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 401
    unary_modifier	go to state 402
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 449

    declaration_list  ->  declaration .   (rule 467)

    $default	reduce using rule 467 (declaration_list)



state 450

    declaring_list  ->  declaration_specifier . declarator @6 initializer_opt   (rule 188)
    declaring_list  ->  declaration_specifier . constructed_declarator   (rule 199)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 146
    '(' 	shift, and go to state 398
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 393
    operator_function_name	go to state 34
    constructed_declarator	go to state 184
    constructed_paren_typedef_declarator	go to state 150
    constructed_parameter_typedef_declarator	go to state 151
    nonunary_constructed_identifier_declarator	go to state 152
    aggregate_key	go to state 155
    declarator	go to state 690
    typedef_declarator	go to state 157
    parameter_typedef_declarator	go to state 158
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 161
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 163
    identifier_declarator	go to state 164
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 401
    unary_modifier	go to state 402
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 451

    declaring_list  ->  type_specifier . declarator @7 initializer_opt   (rule 190)
    declaring_list  ->  type_specifier . constructed_declarator   (rule 200)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 146
    '(' 	shift, and go to state 398
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 393
    operator_function_name	go to state 34
    constructed_declarator	go to state 188
    constructed_paren_typedef_declarator	go to state 150
    constructed_parameter_typedef_declarator	go to state 151
    nonunary_constructed_identifier_declarator	go to state 152
    aggregate_key	go to state 155
    declarator	go to state 691
    typedef_declarator	go to state 157
    parameter_typedef_declarator	go to state 158
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 161
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 163
    identifier_declarator	go to state 164
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 401
    unary_modifier	go to state 402
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 452

    default_declaring_list  ->  declaration_qualifier_list . identifier_declarator @3 initializer_opt   (rule 179)
    default_declaring_list  ->  declaration_qualifier_list . constructed_identifier_declarator   (rule 184)
    declaration_qualifier_list  ->  declaration_qualifier_list . declaration_qualifier   (rule 236)
    basic_declaration_specifier  ->  declaration_qualifier_list . basic_type_name   (rule 243)
    sue_declaration_specifier  ->  declaration_qualifier_list . elaborated_type_name   (rule 253)
    sue_declaration_specifier  ->  declaration_qualifier_list . elaborated_type_name_elaboration   (rule 254)
    typedef_declaration_specifier  ->  declaration_qualifier_list . TYPEDEFname   (rule 264)
    typedef_declaration_specifier  ->  declaration_qualifier_list . global_or_scoped_typedefname   (rule 265)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 191
    '(' 	shift, and go to state 392
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    $default	reduce using rule 644 (@22)

    paren_identifier_declarator	go to state 393
    operator_function_name	go to state 34
    constructed_identifier_declarator	go to state 193
    nonunary_constructed_identifier_declarator	go to state 194
    declaration_qualifier	go to state 195
    type_qualifier	go to state 196
    storage_class	go to state 197
    basic_type_name	go to state 198
    elaborated_type_name_elaboration	go to state 199
    elaborated_type_name	go to state 200
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    identifier_declarator	go to state 692
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 396
    unary_modifier	go to state 397
    scoping_name	go to state 75
    scope	go to state 76
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 205



state 453

    default_declaring_list  ->  type_qualifier_list . identifier_declarator @4 initializer_opt   (rule 181)
    default_declaring_list  ->  type_qualifier_list . constructed_identifier_declarator   (rule 185)
    declaration_qualifier_list  ->  type_qualifier_list . storage_class   (rule 235)
    type_qualifier_list  ->  type_qualifier_list . type_qualifier   (rule 238)
    basic_type_specifier  ->  type_qualifier_list . basic_type_name   (rule 248)
    sue_type_specifier_elaboration  ->  type_qualifier_list . elaborated_type_name_elaboration   (rule 259)
    sue_type_specifier  ->  type_qualifier_list . elaborated_type_name   (rule 262)
    typedef_type_specifier  ->  type_qualifier_list . TYPEDEFname   (rule 270)
    typedef_type_specifier  ->  type_qualifier_list . global_or_scoped_typedefname   (rule 271)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 206
    '(' 	shift, and go to state 392
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    $default	reduce using rule 644 (@22)

    paren_identifier_declarator	go to state 393
    operator_function_name	go to state 34
    constructed_identifier_declarator	go to state 207
    nonunary_constructed_identifier_declarator	go to state 194
    type_qualifier	go to state 208
    storage_class	go to state 209
    basic_type_name	go to state 210
    elaborated_type_name_elaboration	go to state 211
    elaborated_type_name	go to state 212
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    identifier_declarator	go to state 693
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 396
    unary_modifier	go to state 397
    scoping_name	go to state 75
    scope	go to state 76
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 215



state 454

    declaring_list  ->  basic_type_name . declarator @8 initializer_opt   (rule 192)
    declaring_list  ->  basic_type_name . constructed_declarator   (rule 201)
    basic_declaration_specifier  ->  basic_type_name . storage_class   (rule 245)
    basic_type_specifier  ->  basic_type_name . basic_type_name   (rule 249)
    basic_type_specifier  ->  basic_type_name . type_qualifier   (rule 250)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 146
    '(' 	shift, and go to state 398
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 393
    operator_function_name	go to state 34
    constructed_declarator	go to state 232
    constructed_paren_typedef_declarator	go to state 150
    constructed_parameter_typedef_declarator	go to state 151
    nonunary_constructed_identifier_declarator	go to state 152
    type_qualifier	go to state 233
    storage_class	go to state 234
    basic_type_name	go to state 235
    aggregate_key	go to state 155
    declarator	go to state 694
    typedef_declarator	go to state 157
    parameter_typedef_declarator	go to state 158
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 161
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 163
    identifier_declarator	go to state 164
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 401
    unary_modifier	go to state 402
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 455

    old_function_body  ->  compound_statement .   (rule 525)

    $default	reduce using rule 525 (old_function_body)



state 456

    declaration_list  ->  declaration_list . declaration   (rule 468)
    old_function_body  ->  declaration_list . compound_statement   (rule 524)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 448
    '{' 	shift, and go to state 251

    $default	reduce using rule 644 (@22)

    declaration	go to state 695
    default_declaring_list	go to state 36
    declaring_list	go to state 37
    declaration_specifier	go to state 450
    type_specifier	go to state 451
    declaration_qualifier_list	go to state 452
    type_qualifier_list	go to state 453
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 45
    sue_type_specifier_elaboration	go to state 46
    sue_type_specifier	go to state 47
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 454
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    compound_statement	go to state 696
    scoping_name	go to state 75
    scope	go to state 143
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 458



state 457

    old_function_definition  ->  old_function_declarator @14 old_function_body .   (rule 509)

    $default	reduce using rule 509 (old_function_definition)



state 458

    declaring_list  ->  global_or_scoped_typedefname . declarator @10 initializer_opt   (rule 196)
    declaring_list  ->  global_or_scoped_typedefname . constructed_declarator   (rule 203)
    typedef_declaration_specifier  ->  global_or_scoped_typedefname . storage_class   (rule 268)
    typedef_type_specifier  ->  global_or_scoped_typedefname . type_qualifier   (rule 273)

    AUTO	shift, and go to state 2
    STRUCT	shift, and go to state 5
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 146
    '(' 	shift, and go to state 398
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 393
    operator_function_name	go to state 34
    constructed_declarator	go to state 272
    constructed_paren_typedef_declarator	go to state 150
    constructed_parameter_typedef_declarator	go to state 151
    nonunary_constructed_identifier_declarator	go to state 152
    type_qualifier	go to state 273
    storage_class	go to state 274
    aggregate_key	go to state 155
    declarator	go to state 697
    typedef_declarator	go to state 157
    parameter_typedef_declarator	go to state 158
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 161
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 163
    identifier_declarator	go to state 164
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 401
    unary_modifier	go to state 402
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 459

    unary_modifier  ->  scope '*' type_qualifier_list_opt .   (rule 636)

    $default	reduce using rule 636 (unary_modifier)



state 460

    type_qualifier_list_opt  ->  type_qualifier_list .   (rule 62)
    type_qualifier_list  ->  type_qualifier_list . type_qualifier   (rule 238)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 62 (type_qualifier_list_opt)

    type_qualifier	go to state 208



state 461

    aggregate_name  ->  scope aggregate_key tag_name .   (rule 302)
    scoping_name  ->  aggregate_key tag_name .   (rule 639)

    CLCL	reduce using rule 639 (scoping_name)
    $default	reduce using rule 302 (aggregate_name)



state 462

    scope  ->  scope scoping_name CLCL .   (rule 641)

    $default	reduce using rule 641 (scope)



state 463

    aggregate_name  ->  global_scope aggregate_key tag_name .   (rule 301)
    scoping_name  ->  aggregate_key tag_name .   (rule 639)

    CLCL	reduce using rule 639 (scoping_name)
    $default	reduce using rule 301 (aggregate_name)



state 464

    aggregate_name  ->  global_scope scope aggregate_key . tag_name   (rule 300)
    scoping_name  ->  aggregate_key . tag_name   (rule 639)

    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 169

    tag_name	go to state 698



state 465

    constructor_function_definition  ->  global_or_scoped_typedefname parameter_type_list constructor_init_list_opt . compound_statement   (rule 526)

    '{' 	shift, and go to state 251

    compound_statement	go to state 699



state 466

    declaring_list  ->  global_or_scoped_typedefname declarator @10 . initializer_opt   (rule 196)

    '=' 	shift, and go to state 490

    $default	reduce using rule 448 (initializer_opt)

    initializer_opt	go to state 700
    initializer	go to state 492



state 467

    new_function_definition  ->  global_or_scoped_typedefname declarator compound_statement .   (rule 505)

    $default	reduce using rule 505 (new_function_definition)



state 468

    old_function_definition  ->  global_or_scoped_typedefname old_function_declarator @19 . old_function_body   (rule 519)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 448
    '{' 	shift, and go to state 251

    $default	reduce using rule 644 (@22)

    declaration	go to state 449
    default_declaring_list	go to state 36
    declaring_list	go to state 37
    declaration_specifier	go to state 450
    type_specifier	go to state 451
    declaration_qualifier_list	go to state 452
    type_qualifier_list	go to state 453
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 45
    sue_type_specifier_elaboration	go to state 46
    sue_type_specifier	go to state 47
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 454
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    compound_statement	go to state 455
    declaration_list	go to state 456
    old_function_body	go to state 701
    scoping_name	go to state 75
    scope	go to state 143
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 458



state 469

    operator_function_ptr_opt  ->  asterisk_or_ampersand operator_function_ptr_opt .   (rule 28)

    $default	reduce using rule 28 (operator_function_ptr_opt)



state 470

    operator_function_ptr_opt  ->  unary_modifier operator_function_ptr_opt .   (rule 27)

    $default	reduce using rule 27 (operator_function_ptr_opt)



state 471

    argument_expression_list  ->  argument_expression_list . ',' assignment_expression   (rule 84)
    constructed_parameter_typedef_declarator  ->  TYPEDEFname '(' argument_expression_list . ')'   (rule 216)

    ')' 	shift, and go to state 702
    ',' 	shift, and go to state 547



state 472

    constructed_parameter_typedef_declarator  ->  TYPEDEFname postfixing_abstract_declarator '(' . argument_expression_list ')'   (rule 217)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 703
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 473

    parameter_type_list  ->  '(' . ')' type_qualifier_list_opt   (rule 398)
    parameter_type_list  ->  '(' . type_name ')' type_qualifier_list_opt   (rule 399)
    parameter_type_list  ->  '(' . type_name initializer ')' type_qualifier_list_opt   (rule 400)
    parameter_type_list  ->  '(' . named_parameter_type_list ')' type_qualifier_list_opt   (rule 401)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 704
    ELLIPSIS	shift, and go to state 329
    ')' 	shift, and go to state 331

    $default	reduce using rule 644 (@22)

    declaration_specifier	go to state 360
    type_specifier	go to state 361
    declaration_qualifier_list	go to state 362
    type_qualifier_list	go to state 363
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 364
    sue_type_specifier_elaboration	go to state 365
    sue_type_specifier	go to state 366
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 404
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    named_parameter_type_list	go to state 368
    parameter_list	go to state 369
    non_casting_parameter_declaration	go to state 370
    type_name	go to state 371
    scoping_name	go to state 75
    scope	go to state 143
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 405



state 474

    simple_paren_typedef_declarator  ->  '(' TYPEDEFname ')' .   (rule 600)

    $default	reduce using rule 600 (simple_paren_typedef_declarator)



state 475

    constructed_paren_typedef_declarator  ->  '(' TYPEDEFname postfixing_abstract_declarator . ')' '(' argument_expression_list ')'   (rule 215)
    postfix_paren_typedef_declarator  ->  '(' TYPEDEFname postfixing_abstract_declarator . ')'   (rule 598)

    ')' 	shift, and go to state 705



state 476

    postfix_paren_typedef_declarator  ->  '(' TYPEDEFname . postfixing_abstract_declarator ')'   (rule 598)
    simple_paren_typedef_declarator  ->  '(' TYPEDEFname . ')'   (rule 600)
    tag_name  ->  TYPEDEFname .   (rule 643)

    '(' 	shift, and go to state 473
    ')' 	shift, and go to state 474
    '[' 	shift, and go to state 175

    $default	reduce using rule 643 (tag_name)

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 706
    array_abstract_declarator	go to state 178



state 477

    clean_postfix_typedef_declarator  ->  '(' clean_typedef_declarator . ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' clean_typedef_declarator . ')' postfixing_abstract_declarator   (rule 588)

    ')' 	shift, and go to state 707



state 478

    postfix_paren_typedef_declarator  ->  '(' paren_typedef_declarator . ')'   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' paren_typedef_declarator . ')' postfixing_abstract_declarator   (rule 599)

    ')' 	shift, and go to state 708



state 479

    postfix_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator . postfixing_abstract_declarator ')'   (rule 597)
    simple_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator . ')'   (rule 601)

    '(' 	shift, and go to state 473
    ')' 	shift, and go to state 482
    '[' 	shift, and go to state 175

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 709
    array_abstract_declarator	go to state 178



state 480

    constructed_parameter_typedef_declarator  ->  '(' clean_typedef_declarator ')' . '(' argument_expression_list ')'   (rule 218)
    constructed_parameter_typedef_declarator  ->  '(' clean_typedef_declarator ')' . postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 219)
    clean_postfix_typedef_declarator  ->  '(' clean_typedef_declarator ')' .   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' clean_typedef_declarator ')' . postfixing_abstract_declarator   (rule 588)

    '(' 	shift, and go to state 710
    '[' 	shift, and go to state 175

    $default	reduce using rule 587 (clean_postfix_typedef_declarator)

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 711
    array_abstract_declarator	go to state 178



state 481

    constructed_paren_typedef_declarator  ->  '(' paren_typedef_declarator ')' . '(' argument_expression_list ')'   (rule 212)
    constructed_paren_typedef_declarator  ->  '(' paren_typedef_declarator ')' . postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 213)
    postfix_paren_typedef_declarator  ->  '(' paren_typedef_declarator ')' .   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' paren_typedef_declarator ')' . postfixing_abstract_declarator   (rule 599)

    '(' 	shift, and go to state 712
    '[' 	shift, and go to state 175

    $default	reduce using rule 596 (postfix_paren_typedef_declarator)

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 713
    array_abstract_declarator	go to state 178



state 482

    simple_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator ')' .   (rule 601)

    $default	reduce using rule 601 (simple_paren_typedef_declarator)



state 483

    constructed_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator postfixing_abstract_declarator . ')' '(' argument_expression_list ')'   (rule 214)
    postfix_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator postfixing_abstract_declarator . ')'   (rule 597)

    ')' 	shift, and go to state 714



state 484

    nonunary_constructed_identifier_declarator  ->  '(' unary_identifier_declarator ')' . '(' argument_expression_list ')'   (rule 225)
    nonunary_constructed_identifier_declarator  ->  '(' unary_identifier_declarator ')' . postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 226)
    postfix_identifier_declarator  ->  '(' unary_identifier_declarator ')' .   (rule 608)
    postfix_identifier_declarator  ->  '(' unary_identifier_declarator ')' . postfixing_abstract_declarator   (rule 609)

    '(' 	shift, and go to state 715
    '[' 	shift, and go to state 175

    $default	reduce using rule 608 (postfix_identifier_declarator)

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 716
    array_abstract_declarator	go to state 178



state 485

    parameter_typedef_declarator  ->  TYPEDEFname .   (rule 581)
    parameter_typedef_declarator  ->  TYPEDEFname . postfixing_abstract_declarator   (rule 582)
    tag_name  ->  TYPEDEFname .   (rule 643)

    '(' 	shift, and go to state 473
    '[' 	shift, and go to state 175

    CLCL	reduce using rule 643 (tag_name)
    $default	reduce using rule 581 (parameter_typedef_declarator)

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 717
    array_abstract_declarator	go to state 178



state 486

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator   (rule 588)
    paren_typedef_declarator  ->  asterisk_or_ampersand '(' . simple_paren_typedef_declarator ')'   (rule 590)
    paren_typedef_declarator  ->  asterisk_or_ampersand '(' . TYPEDEFname ')'   (rule 592)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')'   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')'   (rule 597)
    postfix_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')'   (rule 598)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator   (rule 599)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)
    postfix_old_function_declarator  ->  '(' . old_function_declarator ')'   (rule 614)
    postfix_old_function_declarator  ->  '(' . old_function_declarator ')' old_postfixing_abstract_declarator   (rule 615)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 718
    '(' 	shift, and go to state 289
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 170
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    clean_typedef_declarator	go to state 477
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 478
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 719
    unary_identifier_declarator	go to state 171
    postfix_identifier_declarator	go to state 70
    old_function_declarator	go to state 172
    postfix_old_function_declarator	go to state 72
    asterisk_or_ampersand	go to state 294
    unary_modifier	go to state 295
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 487

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator   (rule 588)
    paren_typedef_declarator  ->  unary_modifier '(' . simple_paren_typedef_declarator ')'   (rule 591)
    paren_typedef_declarator  ->  unary_modifier '(' . TYPEDEFname ')'   (rule 593)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')'   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')'   (rule 597)
    postfix_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')'   (rule 598)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator   (rule 599)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)
    postfix_old_function_declarator  ->  '(' . old_function_declarator ')'   (rule 614)
    postfix_old_function_declarator  ->  '(' . old_function_declarator ')' old_postfixing_abstract_declarator   (rule 615)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 720
    '(' 	shift, and go to state 289
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 170
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    clean_typedef_declarator	go to state 477
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 478
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 721
    unary_identifier_declarator	go to state 171
    postfix_identifier_declarator	go to state 70
    old_function_declarator	go to state 172
    postfix_old_function_declarator	go to state 72
    asterisk_or_ampersand	go to state 294
    unary_modifier	go to state 295
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 488

    argument_expression_list  ->  argument_expression_list . ',' assignment_expression   (rule 84)
    nonunary_constructed_identifier_declarator  ->  paren_identifier_declarator '(' argument_expression_list . ')'   (rule 223)
    postfix_old_function_declarator  ->  paren_identifier_declarator '(' argument_expression_list . ')'   (rule 613)

    ')' 	shift, and go to state 722
    ',' 	shift, and go to state 547



state 489

    nonunary_constructed_identifier_declarator  ->  paren_identifier_declarator postfixing_abstract_declarator '(' . argument_expression_list ')'   (rule 224)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 723
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 490

    initializer  ->  '=' . initializer_group   (rule 450)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335
    '{' 	shift, and go to state 724

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 725
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    initializer_group	go to state 726
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 491

    declaring_list  ->  TYPEDEFname declarator @9 initializer_opt .   (rule 194)

    $default	reduce using rule 194 (declaring_list)



state 492

    initializer_opt  ->  initializer .   (rule 449)

    $default	reduce using rule 449 (initializer_opt)



state 493

    argument_expression_list  ->  argument_expression_list . ',' assignment_expression   (rule 84)
    constructed_declarator  ->  simple_paren_typedef_declarator '(' argument_expression_list . ')'   (rule 207)

    ')' 	shift, and go to state 727
    ',' 	shift, and go to state 547



state 494

    constructed_declarator  ->  simple_paren_typedef_declarator postfixing_abstract_declarator '(' . argument_expression_list ')'   (rule 208)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 728
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 495

    old_function_definition  ->  TYPEDEFname old_function_declarator @18 old_function_body .   (rule 517)

    $default	reduce using rule 517 (old_function_definition)



state 496

    constructed_paren_typedef_declarator  ->  '(' TYPEDEFname . postfixing_abstract_declarator ')' '(' argument_expression_list ')'   (rule 215)
    paren_typedef_declarator  ->  asterisk_or_ampersand '(' TYPEDEFname . ')'   (rule 592)
    postfix_paren_typedef_declarator  ->  '(' TYPEDEFname . postfixing_abstract_declarator ')'   (rule 598)
    simple_paren_typedef_declarator  ->  '(' TYPEDEFname . ')'   (rule 600)
    tag_name  ->  TYPEDEFname .   (rule 643)

    '(' 	shift, and go to state 473
    ')' 	shift, and go to state 729
    '[' 	shift, and go to state 175

    $default	reduce using rule 643 (tag_name)

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 475
    array_abstract_declarator	go to state 178



state 497

    constructed_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator . postfixing_abstract_declarator ')' '(' argument_expression_list ')'   (rule 214)
    paren_typedef_declarator  ->  asterisk_or_ampersand '(' simple_paren_typedef_declarator . ')'   (rule 590)
    postfix_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator . postfixing_abstract_declarator ')'   (rule 597)
    simple_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator . ')'   (rule 601)

    '(' 	shift, and go to state 473
    ')' 	shift, and go to state 730
    '[' 	shift, and go to state 175

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 483
    array_abstract_declarator	go to state 178



state 498

    constructed_paren_typedef_declarator  ->  '(' TYPEDEFname . postfixing_abstract_declarator ')' '(' argument_expression_list ')'   (rule 215)
    paren_typedef_declarator  ->  unary_modifier '(' TYPEDEFname . ')'   (rule 593)
    postfix_paren_typedef_declarator  ->  '(' TYPEDEFname . postfixing_abstract_declarator ')'   (rule 598)
    simple_paren_typedef_declarator  ->  '(' TYPEDEFname . ')'   (rule 600)
    tag_name  ->  TYPEDEFname .   (rule 643)

    '(' 	shift, and go to state 473
    ')' 	shift, and go to state 731
    '[' 	shift, and go to state 175

    $default	reduce using rule 643 (tag_name)

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 475
    array_abstract_declarator	go to state 178



state 499

    constructed_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator . postfixing_abstract_declarator ')' '(' argument_expression_list ')'   (rule 214)
    paren_typedef_declarator  ->  unary_modifier '(' simple_paren_typedef_declarator . ')'   (rule 591)
    postfix_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator . postfixing_abstract_declarator ')'   (rule 597)
    simple_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator . ')'   (rule 601)

    '(' 	shift, and go to state 473
    ')' 	shift, and go to state 732
    '[' 	shift, and go to state 175

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 483
    array_abstract_declarator	go to state 178



state 500

    postfix_identifier_declarator  ->  '(' unary_identifier_declarator ')' postfixing_abstract_declarator .   (rule 609)

    $default	reduce using rule 609 (postfix_identifier_declarator)



state 501

    old_parameter_type_list  ->  '(' . ')'   (rule 402)
    old_parameter_type_list  ->  '(' . type_name ')'   (rule 403)
    old_parameter_type_list  ->  '(' . type_name initializer ')'   (rule 404)
    old_parameter_type_list  ->  '(' . named_parameter_type_list ')'   (rule 405)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 704
    ELLIPSIS	shift, and go to state 329
    ')' 	shift, and go to state 733

    $default	reduce using rule 644 (@22)

    declaration_specifier	go to state 360
    type_specifier	go to state 361
    declaration_qualifier_list	go to state 362
    type_qualifier_list	go to state 363
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 364
    sue_type_specifier_elaboration	go to state 365
    sue_type_specifier	go to state 366
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 404
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    named_parameter_type_list	go to state 734
    parameter_list	go to state 369
    non_casting_parameter_declaration	go to state 370
    type_name	go to state 735
    scoping_name	go to state 75
    scope	go to state 143
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 405



state 502

    old_postfixing_abstract_declarator  ->  old_parameter_type_list .   (rule 617)

    $default	reduce using rule 617 (old_postfixing_abstract_declarator)



state 503

    postfix_old_function_declarator  ->  '(' old_function_declarator ')' old_postfixing_abstract_declarator .   (rule 615)

    $default	reduce using rule 615 (postfix_old_function_declarator)



state 504

    old_postfixing_abstract_declarator  ->  array_abstract_declarator .   (rule 616)
    array_abstract_declarator  ->  array_abstract_declarator . '[' constant_expression ']'   (rule 625)

    '[' 	shift, and go to state 391

    $default	reduce using rule 616 (old_postfixing_abstract_declarator)



state 505

    primary_expression  ->  '(' . comma_expression ')'   (rule 16)
    unary_expression  ->  SIZEOF '(' . type_name ')'   (rule 94)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 521
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 523
    type_specifier	go to state 524
    type_qualifier_list	go to state 525
    type_qualifier	go to state 42
    basic_type_specifier	go to state 526
    sue_type_specifier_elaboration	go to state 527
    sue_type_specifier	go to state 528
    typedef_type_specifier	go to state 529
    basic_type_name	go to state 530
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    type_name	go to state 736
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 373
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 532



state 506

    unary_expression  ->  SIZEOF unary_expression .   (rule 93)

    $default	reduce using rule 93 (unary_expression)



state 507

    global_opt_scope_opt_operator_new  ->  global_or_scope . NEW   (rule 101)

    NEW 	shift, and go to state 607



state 508

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    postfix_expression  ->  TYPEDEFname '(' . ')'   (rule 73)
    postfix_expression  ->  TYPEDEFname '(' . argument_expression_list ')'   (rule 75)
    parameter_type_list  ->  '(' . ')' type_qualifier_list_opt   (rule 398)
    parameter_type_list  ->  '(' . type_name ')' type_qualifier_list_opt   (rule 399)
    parameter_type_list  ->  '(' . type_name initializer ')' type_qualifier_list_opt   (rule 400)
    parameter_type_list  ->  '(' . named_parameter_type_list ')' type_qualifier_list_opt   (rule 401)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator   (rule 588)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)
    postfix_abstract_declarator  ->  '(' . unary_abstract_declarator ')'   (rule 630)
    postfix_abstract_declarator  ->  '(' . postfix_abstract_declarator ')'   (rule 631)
    postfix_abstract_declarator  ->  '(' . postfixing_abstract_declarator ')'   (rule 632)
    postfix_abstract_declarator  ->  '(' . unary_abstract_declarator ')' postfixing_abstract_declarator   (rule 633)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 326
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    ELLIPSIS	shift, and go to state 329
    '(' 	shift, and go to state 737
    ')' 	shift, and go to state 738
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335
    '[' 	shift, and go to state 175

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    paren_identifier_declarator	go to state 620
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 739
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    declaration_specifier	go to state 360
    type_specifier	go to state 361
    declaration_qualifier_list	go to state 362
    type_qualifier_list	go to state 363
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 364
    sue_type_specifier_elaboration	go to state 365
    sue_type_specifier	go to state 366
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 367
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    parameter_type_list	go to state 176
    named_parameter_type_list	go to state 368
    parameter_list	go to state 369
    non_casting_parameter_declaration	go to state 370
    type_name	go to state 371
    clean_typedef_declarator	go to state 477
    clean_postfix_typedef_declarator	go to state 160
    unary_identifier_declarator	go to state 171
    postfix_identifier_declarator	go to state 70
    postfixing_abstract_declarator	go to state 740
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 741
    postfix_abstract_declarator	go to state 742
    asterisk_or_ampersand	go to state 743
    unary_modifier	go to state 517
    scoping_name	go to state 75
    scope	go to state 76
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 744
    scope_opt_complex_name	go to state 745
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 380



state 509

    identifier_declarator  ->  paren_identifier_declarator .   (rule 603)
    postfix_identifier_declarator  ->  paren_identifier_declarator . postfixing_abstract_declarator   (rule 607)

    '(' 	shift, and go to state 473
    '[' 	shift, and go to state 175

    $default	reduce using rule 603 (identifier_declarator)

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 177
    array_abstract_declarator	go to state 178



state 510

    non_casting_parameter_declaration  ->  TYPEDEFname parameter_typedef_declarator .   (rule 434)

    $default	reduce using rule 434 (non_casting_parameter_declaration)



state 511

    non_casting_parameter_declaration  ->  TYPEDEFname identifier_declarator .   (rule 433)

    $default	reduce using rule 433 (non_casting_parameter_declaration)



state 512

    type_name  ->  TYPEDEFname abstract_declarator .   (rule 445)

    $default	reduce using rule 445 (type_name)



state 513

    abstract_declarator  ->  postfixing_abstract_declarator .   (rule 620)

    $default	reduce using rule 620 (abstract_declarator)



state 514

    abstract_declarator  ->  unary_abstract_declarator .   (rule 618)

    $default	reduce using rule 618 (abstract_declarator)



state 515

    abstract_declarator  ->  postfix_abstract_declarator .   (rule 619)

    $default	reduce using rule 619 (abstract_declarator)



state 516

    clean_typedef_declarator  ->  asterisk_or_ampersand . parameter_typedef_declarator   (rule 585)
    unary_identifier_declarator  ->  asterisk_or_ampersand . identifier_declarator   (rule 605)
    unary_abstract_declarator  ->  asterisk_or_ampersand .   (rule 626)
    unary_abstract_declarator  ->  asterisk_or_ampersand . abstract_declarator   (rule 628)
    unary_modifier  ->  asterisk_or_ampersand . type_qualifier_list   (rule 637)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 485
    '(' 	shift, and go to state 576
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    '[' 	shift, and go to state 175

    $default	reduce using rule 626 (unary_abstract_declarator)

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    type_qualifier_list	go to state 254
    type_qualifier	go to state 42
    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    parameter_typedef_declarator	go to state 306
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    identifier_declarator	go to state 255
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    abstract_declarator	go to state 746
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 516
    unary_modifier	go to state 517
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 517

    clean_typedef_declarator  ->  unary_modifier . parameter_typedef_declarator   (rule 586)
    unary_identifier_declarator  ->  unary_modifier . identifier_declarator   (rule 606)
    unary_abstract_declarator  ->  unary_modifier .   (rule 627)
    unary_abstract_declarator  ->  unary_modifier . abstract_declarator   (rule 629)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 485
    '(' 	shift, and go to state 576
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    '[' 	shift, and go to state 175

    $default	reduce using rule 627 (unary_abstract_declarator)

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    parameter_typedef_declarator	go to state 311
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    identifier_declarator	go to state 257
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    abstract_declarator	go to state 747
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 516
    unary_modifier	go to state 517
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 518

    primary_expression  ->  '(' . comma_expression ')'   (rule 16)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 523
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 519

    unary_expression  ->  ICR unary_expression .   (rule 86)

    $default	reduce using rule 86 (unary_expression)



state 520

    unary_expression  ->  DECR unary_expression .   (rule 87)

    $default	reduce using rule 87 (unary_expression)



state 521

    postfix_expression  ->  TYPEDEFname . '(' ')'   (rule 73)
    postfix_expression  ->  TYPEDEFname . '(' argument_expression_list ')'   (rule 75)
    typedef_type_specifier  ->  TYPEDEFname . type_qualifier   (rule 272)
    type_name  ->  TYPEDEFname .   (rule 440)
    type_name  ->  TYPEDEFname . abstract_declarator   (rule 445)
    tag_name  ->  TYPEDEFname .   (rule 643)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 169
    '(' 	shift, and go to state 748
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '[' 	shift, and go to state 175

    CLCL	reduce using rule 643 (tag_name)
    $default	reduce using rule 440 (type_name)

    type_qualifier	go to state 153
    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    abstract_declarator	go to state 512
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 749
    unary_modifier	go to state 750
    scoping_name	go to state 75
    scope	go to state 283
    tag_name	go to state 77



state 522

    comma_expression  ->  assignment_expression .   (rule 168)

    $default	reduce using rule 168 (comma_expression)



state 523

    primary_expression  ->  '(' comma_expression . ')'   (rule 16)
    comma_expression  ->  comma_expression . ',' assignment_expression   (rule 169)

    ')' 	shift, and go to state 751
    ',' 	shift, and go to state 752



state 524

    type_name  ->  type_specifier .   (rule 438)
    type_name  ->  type_specifier . abstract_declarator   (rule 443)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 169
    '(' 	shift, and go to state 753
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '[' 	shift, and go to state 175

    $default	reduce using rule 438 (type_name)

    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    abstract_declarator	go to state 582
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 749
    unary_modifier	go to state 750
    scoping_name	go to state 75
    scope	go to state 283
    tag_name	go to state 77



state 525

    type_qualifier_list  ->  type_qualifier_list . type_qualifier   (rule 238)
    basic_type_specifier  ->  type_qualifier_list . basic_type_name   (rule 248)
    sue_type_specifier_elaboration  ->  type_qualifier_list . elaborated_type_name_elaboration   (rule 259)
    sue_type_specifier  ->  type_qualifier_list . elaborated_type_name   (rule 262)
    typedef_type_specifier  ->  type_qualifier_list . TYPEDEFname   (rule 270)
    typedef_type_specifier  ->  type_qualifier_list . global_or_scoped_typedefname   (rule 271)
    type_name  ->  type_qualifier_list .   (rule 442)
    type_name  ->  type_qualifier_list . abstract_declarator   (rule 447)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 206
    '(' 	shift, and go to state 753
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '[' 	shift, and go to state 175

    CLCL	reduce using rule 644 (@22)
    $default	reduce using rule 442 (type_name)

    type_qualifier	go to state 208
    basic_type_name	go to state 210
    elaborated_type_name_elaboration	go to state 211
    elaborated_type_name	go to state 212
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    parameter_type_list	go to state 176
    abstract_declarator	go to state 589
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 749
    unary_modifier	go to state 750
    scoping_name	go to state 75
    scope	go to state 285
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 215



state 526

    type_specifier  ->  basic_type_specifier .   (rule 230)
    basic_type_specifier  ->  basic_type_specifier . type_qualifier   (rule 251)
    basic_type_specifier  ->  basic_type_specifier . basic_type_name   (rule 252)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 230 (type_specifier)

    type_qualifier	go to state 218
    basic_type_name	go to state 220



state 527

    type_specifier  ->  sue_type_specifier_elaboration .   (rule 232)
    sue_type_specifier_elaboration  ->  sue_type_specifier_elaboration . type_qualifier   (rule 260)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 232 (type_specifier)

    type_qualifier	go to state 224



state 528

    type_specifier  ->  sue_type_specifier .   (rule 231)
    sue_type_specifier  ->  sue_type_specifier . type_qualifier   (rule 263)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 231 (type_specifier)

    type_qualifier	go to state 227



state 529

    type_specifier  ->  typedef_type_specifier .   (rule 233)
    typedef_type_specifier  ->  typedef_type_specifier . type_qualifier   (rule 274)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 233 (type_specifier)

    type_qualifier	go to state 230



state 530

    postfix_expression  ->  basic_type_name . '(' assignment_expression ')'   (rule 77)
    basic_type_specifier  ->  basic_type_name . basic_type_name   (rule 249)
    basic_type_specifier  ->  basic_type_name . type_qualifier   (rule 250)
    type_name  ->  basic_type_name .   (rule 439)
    type_name  ->  basic_type_name . abstract_declarator   (rule 444)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 169
    '(' 	shift, and go to state 754
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '[' 	shift, and go to state 175

    $default	reduce using rule 439 (type_name)

    type_qualifier	go to state 233
    basic_type_name	go to state 235
    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    abstract_declarator	go to state 593
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 749
    unary_modifier	go to state 750
    scoping_name	go to state 75
    scope	go to state 283
    tag_name	go to state 77



state 531

    cast_expression  ->  '(' type_name . ')' cast_expression   (rule 115)

    ')' 	shift, and go to state 755



state 532

    postfix_expression  ->  global_or_scoped_typedefname . '(' ')'   (rule 74)
    postfix_expression  ->  global_or_scoped_typedefname . '(' argument_expression_list ')'   (rule 76)
    typedef_type_specifier  ->  global_or_scoped_typedefname . type_qualifier   (rule 273)
    type_name  ->  global_or_scoped_typedefname .   (rule 441)
    type_name  ->  global_or_scoped_typedefname . abstract_declarator   (rule 446)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 169
    '(' 	shift, and go to state 756
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '[' 	shift, and go to state 175

    $default	reduce using rule 441 (type_name)

    type_qualifier	go to state 273
    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    abstract_declarator	go to state 612
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 749
    unary_modifier	go to state 750
    scoping_name	go to state 75
    scope	go to state 283
    tag_name	go to state 77



state 533

    parameter_type_list  ->  '(' ')' type_qualifier_list_opt .   (rule 398)

    $default	reduce using rule 398 (parameter_type_list)



state 534

    unary_expression  ->  '+' cast_expression .   (rule 90)

    $default	reduce using rule 90 (unary_expression)



state 535

    unary_expression  ->  '-' cast_expression .   (rule 89)

    $default	reduce using rule 89 (unary_expression)



state 536

    postfix_expression  ->  TYPEDEFname . '(' ')'   (rule 73)
    postfix_expression  ->  TYPEDEFname . '(' argument_expression_list ')'   (rule 75)
    tag_name  ->  TYPEDEFname .   (rule 643)
    complex_name  ->  '~' TYPEDEFname .   (rule 653)

    '(' 	shift, and go to state 613

    CLCL	reduce using rule 643 (tag_name)
    '(' 	[reduce using rule 653 (complex_name)]
    $default	reduce using rule 653 (complex_name)



state 537

    unary_expression  ->  '~' cast_expression .   (rule 91)

    $default	reduce using rule 91 (unary_expression)



state 538

    unary_expression  ->  '!' cast_expression .   (rule 92)

    $default	reduce using rule 92 (unary_expression)



state 539

    string_literal_list  ->  string_literal_list STRINGliteral .   (rule 7)

    $default	reduce using rule 7 (string_literal_list)



state 540

    postfix_expression  ->  postfix_expression ICR .   (rule 71)

    $default	reduce using rule 71 (postfix_expression)



state 541

    postfix_expression  ->  postfix_expression DECR .   (rule 72)

    $default	reduce using rule 72 (postfix_expression)



state 542

    postfix_expression  ->  postfix_expression '(' . ')'   (rule 65)
    postfix_expression  ->  postfix_expression '(' . argument_expression_list ')'   (rule 66)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    ')' 	shift, and go to state 757
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 758
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 543

    postfix_expression  ->  postfix_expression '[' . comma_expression ']'   (rule 64)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 759
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 544

    postfix_expression  ->  postfix_expression @1 . '.' member_name   (rule 68)

    '.' 	shift, and go to state 760



state 545

    postfix_expression  ->  postfix_expression @2 . ARROW member_name   (rule 70)

    ARROW	shift, and go to state 761



state 546

    postfix_old_function_declarator  ->  paren_identifier_declarator '(' argument_expression_list ')' .   (rule 613)

    $default	reduce using rule 613 (postfix_old_function_declarator)



state 547

    argument_expression_list  ->  argument_expression_list ',' . assignment_expression   (rule 84)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 762
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 548

    assignment_expression  ->  unary_expression assignment_operator . assignment_expression   (rule 156)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 763
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 549

    allocation_expression  ->  global_opt_scope_opt_operator_new '(' . type_name ')' operator_new_initializer_opt   (rule 96)
    allocation_expression  ->  global_opt_scope_opt_operator_new '(' . argument_expression_list ')' '(' type_name ')' operator_new_initializer_opt   (rule 97)
    allocation_expression  ->  global_opt_scope_opt_operator_new '(' . argument_expression_list ')' operator_new_type   (rule 99)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 521
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 764
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    type_specifier	go to state 524
    type_qualifier_list	go to state 525
    type_qualifier	go to state 42
    basic_type_specifier	go to state 526
    sue_type_specifier_elaboration	go to state 527
    sue_type_specifier	go to state 528
    typedef_type_specifier	go to state 529
    basic_type_name	go to state 530
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    type_name	go to state 765
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 373
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 532



state 550

    operator_new_type  ->  non_elaborating_type_specifier . operator_new_declarator_opt operator_new_initializer_opt   (rule 103)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 169
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '[' 	shift, and go to state 766

    '*' 	[reduce using rule 104 (operator_new_declarator_opt)]
    '&' 	[reduce using rule 104 (operator_new_declarator_opt)]
    $default	reduce using rule 104 (operator_new_declarator_opt)

    operator_new_declarator_opt	go to state 767
    operator_new_array_declarator	go to state 768
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 769
    unary_modifier	go to state 770
    scoping_name	go to state 75
    scope	go to state 283
    tag_name	go to state 77



state 551

    allocation_expression  ->  global_opt_scope_opt_operator_new operator_new_type .   (rule 98)

    $default	reduce using rule 98 (allocation_expression)



state 552

    operator_new_type  ->  type_qualifier_list . operator_new_declarator_opt operator_new_initializer_opt   (rule 102)
    type_qualifier_list  ->  type_qualifier_list . type_qualifier   (rule 238)
    basic_type_specifier  ->  type_qualifier_list . basic_type_name   (rule 248)
    sue_type_specifier  ->  type_qualifier_list . elaborated_type_name   (rule 262)
    typedef_type_specifier  ->  type_qualifier_list . TYPEDEFname   (rule 270)
    typedef_type_specifier  ->  type_qualifier_list . global_or_scoped_typedefname   (rule 271)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 206
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '[' 	shift, and go to state 766

    CLCL	reduce using rule 644 (@22)
    '*' 	[reduce using rule 104 (operator_new_declarator_opt)]
    '&' 	[reduce using rule 104 (operator_new_declarator_opt)]
    $default	reduce using rule 104 (operator_new_declarator_opt)

    operator_new_declarator_opt	go to state 771
    operator_new_array_declarator	go to state 768
    type_qualifier	go to state 208
    basic_type_name	go to state 210
    elaborated_type_name	go to state 212
    aggregate_name	go to state 139
    aggregate_key	go to state 140
    enum_name	go to state 141
    global_opt_scope_opt_enum_key	go to state 142
    asterisk_or_ampersand	go to state 769
    unary_modifier	go to state 770
    scoping_name	go to state 75
    scope	go to state 285
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 215



state 553

    deallocation_expression  ->  global_opt_scope_opt_delete '[' . comma_expression ']' deallocation_expression   (rule 118)
    deallocation_expression  ->  global_opt_scope_opt_delete '[' . ']' deallocation_expression   (rule 119)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335
    ']' 	shift, and go to state 772

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 773
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 554

    deallocation_expression  ->  global_opt_scope_opt_delete deallocation_expression .   (rule 117)

    $default	reduce using rule 117 (deallocation_expression)



state 555

    point_member_expression  ->  point_member_expression DOTstar . deallocation_expression   (rule 123)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 774
    global_opt_scope_opt_delete	go to state 346
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 556

    point_member_expression  ->  point_member_expression ARROWstar . deallocation_expression   (rule 124)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 775
    global_opt_scope_opt_delete	go to state 346
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 557

    multiplicative_expression  ->  multiplicative_expression '*' . point_member_expression   (rule 126)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 776
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 558

    multiplicative_expression  ->  multiplicative_expression '/' . point_member_expression   (rule 127)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 777
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 559

    multiplicative_expression  ->  multiplicative_expression '%' . point_member_expression   (rule 128)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 778
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 560

    additive_expression  ->  additive_expression '+' . multiplicative_expression   (rule 130)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 779
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 561

    additive_expression  ->  additive_expression '-' . multiplicative_expression   (rule 131)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 780
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 562

    shift_expression  ->  shift_expression LS . additive_expression   (rule 133)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 781
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 563

    shift_expression  ->  shift_expression RS . additive_expression   (rule 134)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 782
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 564

    relational_expression  ->  relational_expression LE . shift_expression   (rule 138)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 783
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 565

    relational_expression  ->  relational_expression GE . shift_expression   (rule 139)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 784
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 566

    relational_expression  ->  relational_expression '<' . shift_expression   (rule 136)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 785
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 567

    relational_expression  ->  relational_expression '>' . shift_expression   (rule 137)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 786
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 568

    equality_expression  ->  equality_expression EQ . relational_expression   (rule 141)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 787
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 569

    equality_expression  ->  equality_expression NE . relational_expression   (rule 142)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 788
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 570

    AND_expression  ->  AND_expression '&' . equality_expression   (rule 144)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 789
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 571

    exclusive_OR_expression  ->  exclusive_OR_expression '^' . AND_expression   (rule 146)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 790
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 572

    inclusive_OR_expression  ->  inclusive_OR_expression '|' . exclusive_OR_expression   (rule 148)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 791
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 573

    logical_AND_expression  ->  logical_AND_expression ANDAND . inclusive_OR_expression   (rule 150)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 792
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 574

    logical_OR_expression  ->  logical_OR_expression OROR . logical_AND_expression   (rule 152)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 793
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 575

    conditional_expression  ->  logical_OR_expression '?' . comma_expression ':' conditional_expression   (rule 154)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 794
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 576

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    parameter_type_list  ->  '(' . ')' type_qualifier_list_opt   (rule 398)
    parameter_type_list  ->  '(' . type_name ')' type_qualifier_list_opt   (rule 399)
    parameter_type_list  ->  '(' . type_name initializer ')' type_qualifier_list_opt   (rule 400)
    parameter_type_list  ->  '(' . named_parameter_type_list ')' type_qualifier_list_opt   (rule 401)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator   (rule 588)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)
    postfix_abstract_declarator  ->  '(' . unary_abstract_declarator ')'   (rule 630)
    postfix_abstract_declarator  ->  '(' . postfix_abstract_declarator ')'   (rule 631)
    postfix_abstract_declarator  ->  '(' . postfixing_abstract_declarator ')'   (rule 632)
    postfix_abstract_declarator  ->  '(' . unary_abstract_declarator ')' postfixing_abstract_declarator   (rule 633)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 704
    ELLIPSIS	shift, and go to state 329
    '(' 	shift, and go to state 576
    ')' 	shift, and go to state 331
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    '[' 	shift, and go to state 175

    $default	reduce using rule 644 (@22)

    paren_identifier_declarator	go to state 620
    operator_function_name	go to state 34
    declaration_specifier	go to state 360
    type_specifier	go to state 361
    declaration_qualifier_list	go to state 362
    type_qualifier_list	go to state 363
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 364
    sue_type_specifier_elaboration	go to state 365
    sue_type_specifier	go to state 366
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 404
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    parameter_type_list	go to state 176
    named_parameter_type_list	go to state 368
    parameter_list	go to state 369
    non_casting_parameter_declaration	go to state 370
    type_name	go to state 371
    clean_typedef_declarator	go to state 477
    clean_postfix_typedef_declarator	go to state 160
    unary_identifier_declarator	go to state 171
    postfix_identifier_declarator	go to state 70
    postfixing_abstract_declarator	go to state 740
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 741
    postfix_abstract_declarator	go to state 742
    asterisk_or_ampersand	go to state 516
    unary_modifier	go to state 517
    scoping_name	go to state 75
    scope	go to state 76
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 405



state 577

    non_casting_parameter_declaration  ->  declaration_specifier parameter_typedef_declarator .   (rule 425)

    $default	reduce using rule 425 (non_casting_parameter_declaration)



state 578

    non_casting_parameter_declaration  ->  declaration_specifier identifier_declarator .   (rule 424)

    $default	reduce using rule 424 (non_casting_parameter_declaration)



state 579

    non_casting_parameter_declaration  ->  declaration_specifier abstract_declarator .   (rule 423)

    $default	reduce using rule 423 (non_casting_parameter_declaration)



state 580

    non_casting_parameter_declaration  ->  type_specifier parameter_typedef_declarator .   (rule 430)

    $default	reduce using rule 430 (non_casting_parameter_declaration)



state 581

    non_casting_parameter_declaration  ->  type_specifier identifier_declarator .   (rule 429)

    $default	reduce using rule 429 (non_casting_parameter_declaration)



state 582

    type_name  ->  type_specifier abstract_declarator .   (rule 443)

    $default	reduce using rule 443 (type_name)



state 583

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    parameter_type_list  ->  '(' . ')' type_qualifier_list_opt   (rule 398)
    parameter_type_list  ->  '(' . type_name ')' type_qualifier_list_opt   (rule 399)
    parameter_type_list  ->  '(' . type_name initializer ')' type_qualifier_list_opt   (rule 400)
    parameter_type_list  ->  '(' . named_parameter_type_list ')' type_qualifier_list_opt   (rule 401)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)
    postfix_abstract_declarator  ->  '(' . unary_abstract_declarator ')'   (rule 630)
    postfix_abstract_declarator  ->  '(' . postfix_abstract_declarator ')'   (rule 631)
    postfix_abstract_declarator  ->  '(' . postfixing_abstract_declarator ')'   (rule 632)
    postfix_abstract_declarator  ->  '(' . unary_abstract_declarator ')' postfixing_abstract_declarator   (rule 633)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 704
    ELLIPSIS	shift, and go to state 329
    '(' 	shift, and go to state 583
    ')' 	shift, and go to state 331
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    '[' 	shift, and go to state 175

    $default	reduce using rule 644 (@22)

    paren_identifier_declarator	go to state 620
    operator_function_name	go to state 34
    declaration_specifier	go to state 360
    type_specifier	go to state 361
    declaration_qualifier_list	go to state 362
    type_qualifier_list	go to state 363
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 364
    sue_type_specifier_elaboration	go to state 365
    sue_type_specifier	go to state 366
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 404
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    parameter_type_list	go to state 176
    named_parameter_type_list	go to state 368
    parameter_list	go to state 369
    non_casting_parameter_declaration	go to state 370
    type_name	go to state 371
    unary_identifier_declarator	go to state 171
    postfix_identifier_declarator	go to state 70
    postfixing_abstract_declarator	go to state 740
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 741
    postfix_abstract_declarator	go to state 742
    asterisk_or_ampersand	go to state 586
    unary_modifier	go to state 587
    scoping_name	go to state 75
    scope	go to state 76
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 405



state 584

    non_casting_parameter_declaration  ->  declaration_qualifier_list identifier_declarator .   (rule 428)

    $default	reduce using rule 428 (non_casting_parameter_declaration)



state 585

    non_casting_parameter_declaration  ->  declaration_qualifier_list abstract_declarator .   (rule 427)

    $default	reduce using rule 427 (non_casting_parameter_declaration)



state 586

    unary_identifier_declarator  ->  asterisk_or_ampersand . identifier_declarator   (rule 605)
    unary_abstract_declarator  ->  asterisk_or_ampersand .   (rule 626)
    unary_abstract_declarator  ->  asterisk_or_ampersand . abstract_declarator   (rule 628)
    unary_modifier  ->  asterisk_or_ampersand . type_qualifier_list   (rule 637)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 169
    '(' 	shift, and go to state 583
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    '[' 	shift, and go to state 175

    $default	reduce using rule 626 (unary_abstract_declarator)

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    type_qualifier_list	go to state 254
    type_qualifier	go to state 42
    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    identifier_declarator	go to state 255
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    abstract_declarator	go to state 746
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 586
    unary_modifier	go to state 587
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 587

    unary_identifier_declarator  ->  unary_modifier . identifier_declarator   (rule 606)
    unary_abstract_declarator  ->  unary_modifier .   (rule 627)
    unary_abstract_declarator  ->  unary_modifier . abstract_declarator   (rule 629)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 169
    '(' 	shift, and go to state 583
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    '[' 	shift, and go to state 175

    $default	reduce using rule 627 (unary_abstract_declarator)

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    identifier_declarator	go to state 257
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    abstract_declarator	go to state 747
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 586
    unary_modifier	go to state 587
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 588

    non_casting_parameter_declaration  ->  type_qualifier_list identifier_declarator .   (rule 437)

    $default	reduce using rule 437 (non_casting_parameter_declaration)



state 589

    type_name  ->  type_qualifier_list abstract_declarator .   (rule 447)

    $default	reduce using rule 447 (type_name)



state 590

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    postfix_expression  ->  basic_type_name '(' . assignment_expression ')'   (rule 77)
    parameter_type_list  ->  '(' . ')' type_qualifier_list_opt   (rule 398)
    parameter_type_list  ->  '(' . type_name ')' type_qualifier_list_opt   (rule 399)
    parameter_type_list  ->  '(' . type_name initializer ')' type_qualifier_list_opt   (rule 400)
    parameter_type_list  ->  '(' . named_parameter_type_list ')' type_qualifier_list_opt   (rule 401)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator   (rule 588)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)
    postfix_abstract_declarator  ->  '(' . unary_abstract_declarator ')'   (rule 630)
    postfix_abstract_declarator  ->  '(' . postfix_abstract_declarator ')'   (rule 631)
    postfix_abstract_declarator  ->  '(' . postfixing_abstract_declarator ')'   (rule 632)
    postfix_abstract_declarator  ->  '(' . unary_abstract_declarator ')' postfixing_abstract_declarator   (rule 633)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 326
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    ELLIPSIS	shift, and go to state 329
    '(' 	shift, and go to state 737
    ')' 	shift, and go to state 331
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335
    '[' 	shift, and go to state 175

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    paren_identifier_declarator	go to state 620
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 795
    declaration_specifier	go to state 360
    type_specifier	go to state 361
    declaration_qualifier_list	go to state 362
    type_qualifier_list	go to state 363
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 364
    sue_type_specifier_elaboration	go to state 365
    sue_type_specifier	go to state 366
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 367
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    parameter_type_list	go to state 176
    named_parameter_type_list	go to state 368
    parameter_list	go to state 369
    non_casting_parameter_declaration	go to state 370
    type_name	go to state 371
    clean_typedef_declarator	go to state 477
    clean_postfix_typedef_declarator	go to state 160
    unary_identifier_declarator	go to state 171
    postfix_identifier_declarator	go to state 70
    postfixing_abstract_declarator	go to state 740
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 741
    postfix_abstract_declarator	go to state 742
    asterisk_or_ampersand	go to state 743
    unary_modifier	go to state 517
    scoping_name	go to state 75
    scope	go to state 76
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 744
    scope_opt_complex_name	go to state 745
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 380



state 591

    non_casting_parameter_declaration  ->  basic_type_name parameter_typedef_declarator .   (rule 432)

    $default	reduce using rule 432 (non_casting_parameter_declaration)



state 592

    non_casting_parameter_declaration  ->  basic_type_name identifier_declarator .   (rule 431)

    $default	reduce using rule 431 (non_casting_parameter_declaration)



state 593

    type_name  ->  basic_type_name abstract_declarator .   (rule 444)

    $default	reduce using rule 444 (type_name)



state 594

    parameter_type_list  ->  '(' named_parameter_type_list ')' . type_qualifier_list_opt   (rule 401)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 61 (type_qualifier_list_opt)

    type_qualifier_list_opt	go to state 796
    type_qualifier_list	go to state 460
    type_qualifier	go to state 42



state 595

    comma_opt_ellipsis  ->  ELLIPSIS .   (rule 411)

    $default	reduce using rule 411 (comma_opt_ellipsis)



state 596

    comma_opt_ellipsis  ->  ',' . ELLIPSIS   (rule 412)
    parameter_list  ->  parameter_list ',' . parameter_declaration   (rule 417)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 704
    ELLIPSIS	shift, and go to state 797

    $default	reduce using rule 644 (@22)

    declaration_specifier	go to state 360
    type_specifier	go to state 361
    declaration_qualifier_list	go to state 362
    type_qualifier_list	go to state 363
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 364
    sue_type_specifier_elaboration	go to state 365
    sue_type_specifier	go to state 366
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 404
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    parameter_declaration	go to state 798
    non_casting_parameter_declaration	go to state 799
    type_name	go to state 800
    scoping_name	go to state 75
    scope	go to state 143
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 405



state 597

    named_parameter_type_list  ->  parameter_list comma_opt_ellipsis .   (rule 407)

    $default	reduce using rule 407 (named_parameter_type_list)



state 598

    parameter_list  ->  non_casting_parameter_declaration initializer .   (rule 414)

    $default	reduce using rule 414 (parameter_list)



state 599

    parameter_type_list  ->  '(' type_name ')' . type_qualifier_list_opt   (rule 399)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 61 (type_qualifier_list_opt)

    type_qualifier_list_opt	go to state 801
    type_qualifier_list	go to state 460
    type_qualifier	go to state 42



state 600

    comma_opt_ellipsis  ->  ',' . ELLIPSIS   (rule 412)
    parameter_list  ->  type_name ',' . parameter_declaration   (rule 415)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 704
    ELLIPSIS	shift, and go to state 797

    $default	reduce using rule 644 (@22)

    declaration_specifier	go to state 360
    type_specifier	go to state 361
    declaration_qualifier_list	go to state 362
    type_qualifier_list	go to state 363
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 364
    sue_type_specifier_elaboration	go to state 365
    sue_type_specifier	go to state 366
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 404
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    parameter_declaration	go to state 802
    non_casting_parameter_declaration	go to state 799
    type_name	go to state 800
    scoping_name	go to state 75
    scope	go to state 143
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 405



state 601

    named_parameter_type_list  ->  type_name comma_opt_ellipsis .   (rule 408)

    $default	reduce using rule 408 (named_parameter_type_list)



state 602

    parameter_type_list  ->  '(' type_name initializer . ')' type_qualifier_list_opt   (rule 400)
    named_parameter_type_list  ->  type_name initializer . comma_opt_ellipsis   (rule 409)
    parameter_list  ->  type_name initializer . ',' parameter_declaration   (rule 416)

    ELLIPSIS	shift, and go to state 595
    ')' 	shift, and go to state 803
    ',' 	shift, and go to state 804

    comma_opt_ellipsis	go to state 805



state 603

    unary_expression  ->  asterisk_or_ampersand cast_expression .   (rule 88)

    $default	reduce using rule 88 (unary_expression)



state 604

    aggregate_name  ->  global_scope scope . aggregate_key tag_name   (rule 300)
    scope  ->  scope . scoping_name CLCL   (rule 641)
    global_or_scope  ->  global_scope scope .   (rule 648)
    scope_opt_identifier  ->  scope . IDENTIFIER   (rule 650)
    scope_opt_complex_name  ->  scope . complex_name   (rule 652)
    scoped_typedefname  ->  scope . TYPEDEFname   (rule 659)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 260
    TYPEDEFname	shift, and go to state 261
    '~' 	shift, and go to state 32

    $default	reduce using rule 648 (global_or_scope)

    operator_function_name	go to state 34
    aggregate_key	go to state 464
    scoping_name	go to state 264
    tag_name	go to state 77
    complex_name	go to state 265



state 605

    global_opt_scope_opt_identifier  ->  global_scope scope_opt_identifier .   (rule 655)

    $default	reduce using rule 655 (global_opt_scope_opt_identifier)



state 606

    global_opt_scope_opt_complex_name  ->  global_scope scope_opt_complex_name .   (rule 657)

    $default	reduce using rule 657 (global_opt_scope_opt_complex_name)



state 607

    global_opt_scope_opt_operator_new  ->  global_or_scope NEW .   (rule 101)

    $default	reduce using rule 101 (global_opt_scope_opt_operator_new)



state 608

    global_opt_scope_opt_delete  ->  global_or_scope DELETE .   (rule 121)

    $default	reduce using rule 121 (global_opt_scope_opt_delete)



state 609

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    postfix_expression  ->  global_or_scoped_typedefname '(' . ')'   (rule 74)
    postfix_expression  ->  global_or_scoped_typedefname '(' . argument_expression_list ')'   (rule 76)
    parameter_type_list  ->  '(' . ')' type_qualifier_list_opt   (rule 398)
    parameter_type_list  ->  '(' . type_name ')' type_qualifier_list_opt   (rule 399)
    parameter_type_list  ->  '(' . type_name initializer ')' type_qualifier_list_opt   (rule 400)
    parameter_type_list  ->  '(' . named_parameter_type_list ')' type_qualifier_list_opt   (rule 401)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator   (rule 588)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)
    postfix_abstract_declarator  ->  '(' . unary_abstract_declarator ')'   (rule 630)
    postfix_abstract_declarator  ->  '(' . postfix_abstract_declarator ')'   (rule 631)
    postfix_abstract_declarator  ->  '(' . postfixing_abstract_declarator ')'   (rule 632)
    postfix_abstract_declarator  ->  '(' . unary_abstract_declarator ')' postfixing_abstract_declarator   (rule 633)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 326
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    ELLIPSIS	shift, and go to state 329
    '(' 	shift, and go to state 737
    ')' 	shift, and go to state 806
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335
    '[' 	shift, and go to state 175

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    paren_identifier_declarator	go to state 620
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 807
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    declaration_specifier	go to state 360
    type_specifier	go to state 361
    declaration_qualifier_list	go to state 362
    type_qualifier_list	go to state 363
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 364
    sue_type_specifier_elaboration	go to state 365
    sue_type_specifier	go to state 366
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 367
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    parameter_type_list	go to state 176
    named_parameter_type_list	go to state 368
    parameter_list	go to state 369
    non_casting_parameter_declaration	go to state 370
    type_name	go to state 371
    clean_typedef_declarator	go to state 477
    clean_postfix_typedef_declarator	go to state 160
    unary_identifier_declarator	go to state 171
    postfix_identifier_declarator	go to state 70
    postfixing_abstract_declarator	go to state 740
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 741
    postfix_abstract_declarator	go to state 742
    asterisk_or_ampersand	go to state 743
    unary_modifier	go to state 517
    scoping_name	go to state 75
    scope	go to state 76
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 744
    scope_opt_complex_name	go to state 745
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 380



state 610

    non_casting_parameter_declaration  ->  global_or_scoped_typedefname parameter_typedef_declarator .   (rule 436)

    $default	reduce using rule 436 (non_casting_parameter_declaration)



state 611

    non_casting_parameter_declaration  ->  global_or_scoped_typedefname identifier_declarator .   (rule 435)

    $default	reduce using rule 435 (non_casting_parameter_declaration)



state 612

    type_name  ->  global_or_scoped_typedefname abstract_declarator .   (rule 446)

    $default	reduce using rule 446 (type_name)



state 613

    postfix_expression  ->  TYPEDEFname '(' . ')'   (rule 73)
    postfix_expression  ->  TYPEDEFname '(' . argument_expression_list ')'   (rule 75)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    ')' 	shift, and go to state 808
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 739
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 614

    array_abstract_declarator  ->  '[' constant_expression ']' .   (rule 624)

    $default	reduce using rule 624 (array_abstract_declarator)



state 615

    postfix_expression  ->  basic_type_name '(' . assignment_expression ')'   (rule 77)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 795
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 616

    scope  ->  scope . scoping_name CLCL   (rule 641)
    global_or_scope  ->  global_scope scope .   (rule 648)
    scope_opt_identifier  ->  scope . IDENTIFIER   (rule 650)
    scope_opt_complex_name  ->  scope . complex_name   (rule 652)
    scoped_typedefname  ->  scope . TYPEDEFname   (rule 659)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 260
    TYPEDEFname	shift, and go to state 261
    '~' 	shift, and go to state 32

    $default	reduce using rule 648 (global_or_scope)

    operator_function_name	go to state 34
    aggregate_key	go to state 155
    scoping_name	go to state 264
    tag_name	go to state 77
    complex_name	go to state 265



state 617

    postfix_expression  ->  global_or_scoped_typedefname '(' . ')'   (rule 74)
    postfix_expression  ->  global_or_scoped_typedefname '(' . argument_expression_list ')'   (rule 76)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    ')' 	shift, and go to state 809
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 807
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 618

    array_abstract_declarator  ->  array_abstract_declarator '[' constant_expression . ']'   (rule 625)

    ']' 	shift, and go to state 810



state 619

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 169
    '(' 	shift, and go to state 619
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 620
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    unary_identifier_declarator	go to state 171
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 621
    unary_modifier	go to state 622
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 620

    paren_identifier_declarator  ->  '(' paren_identifier_declarator . ')'   (rule 10)
    postfix_identifier_declarator  ->  paren_identifier_declarator . postfixing_abstract_declarator   (rule 607)

    '(' 	shift, and go to state 473
    ')' 	shift, and go to state 313
    '[' 	shift, and go to state 175

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 177
    array_abstract_declarator	go to state 178



state 621

    unary_identifier_declarator  ->  asterisk_or_ampersand . identifier_declarator   (rule 605)
    unary_modifier  ->  asterisk_or_ampersand . type_qualifier_list   (rule 637)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 169
    '(' 	shift, and go to state 619
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    type_qualifier_list	go to state 254
    type_qualifier	go to state 42
    aggregate_key	go to state 155
    identifier_declarator	go to state 255
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 621
    unary_modifier	go to state 622
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 622

    unary_identifier_declarator  ->  unary_modifier . identifier_declarator   (rule 606)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 169
    '(' 	shift, and go to state 619
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    identifier_declarator	go to state 257
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 621
    unary_modifier	go to state 622
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 623

    nonunary_constructed_identifier_declarator  ->  paren_identifier_declarator '(' . argument_expression_list ')'   (rule 223)
    parameter_type_list  ->  '(' . ')' type_qualifier_list_opt   (rule 398)
    parameter_type_list  ->  '(' . type_name ')' type_qualifier_list_opt   (rule 399)
    parameter_type_list  ->  '(' . type_name initializer ')' type_qualifier_list_opt   (rule 400)
    parameter_type_list  ->  '(' . named_parameter_type_list ')' type_qualifier_list_opt   (rule 401)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 326
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    ELLIPSIS	shift, and go to state 329
    '(' 	shift, and go to state 330
    ')' 	shift, and go to state 331
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 811
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    declaration_specifier	go to state 360
    type_specifier	go to state 361
    declaration_qualifier_list	go to state 362
    type_qualifier_list	go to state 363
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 364
    sue_type_specifier_elaboration	go to state 365
    sue_type_specifier	go to state 366
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 367
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    named_parameter_type_list	go to state 368
    parameter_list	go to state 369
    non_casting_parameter_declaration	go to state 370
    type_name	go to state 371
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 373
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 380



state 624

    default_declaring_list  ->  default_declaring_list ',' identifier_declarator @5 . initializer_opt   (rule 183)

    '=' 	shift, and go to state 490

    $default	reduce using rule 448 (initializer_opt)

    initializer_opt	go to state 812
    initializer	go to state 492



state 625

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator   (rule 588)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')'   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')'   (rule 597)
    postfix_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')'   (rule 598)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator   (rule 599)
    simple_paren_typedef_declarator  ->  '(' . TYPEDEFname ')'   (rule 600)
    simple_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator ')'   (rule 601)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 476
    '(' 	shift, and go to state 625
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 620
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    clean_typedef_declarator	go to state 477
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 478
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 479
    unary_identifier_declarator	go to state 171
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 626
    unary_modifier	go to state 627
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 626

    clean_typedef_declarator  ->  asterisk_or_ampersand . parameter_typedef_declarator   (rule 585)
    paren_typedef_declarator  ->  asterisk_or_ampersand . '(' simple_paren_typedef_declarator ')'   (rule 590)
    paren_typedef_declarator  ->  asterisk_or_ampersand . '(' TYPEDEFname ')'   (rule 592)
    paren_typedef_declarator  ->  asterisk_or_ampersand . paren_typedef_declarator   (rule 594)
    unary_identifier_declarator  ->  asterisk_or_ampersand . identifier_declarator   (rule 605)
    unary_modifier  ->  asterisk_or_ampersand . type_qualifier_list   (rule 637)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 485
    '(' 	shift, and go to state 813
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    type_qualifier_list	go to state 254
    type_qualifier	go to state 42
    aggregate_key	go to state 155
    parameter_typedef_declarator	go to state 306
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 307
    postfix_paren_typedef_declarator	go to state 162
    identifier_declarator	go to state 255
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 626
    unary_modifier	go to state 627
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 627

    clean_typedef_declarator  ->  unary_modifier . parameter_typedef_declarator   (rule 586)
    paren_typedef_declarator  ->  unary_modifier . '(' simple_paren_typedef_declarator ')'   (rule 591)
    paren_typedef_declarator  ->  unary_modifier . '(' TYPEDEFname ')'   (rule 593)
    paren_typedef_declarator  ->  unary_modifier . paren_typedef_declarator   (rule 595)
    unary_identifier_declarator  ->  unary_modifier . identifier_declarator   (rule 606)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 485
    '(' 	shift, and go to state 814
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    parameter_typedef_declarator	go to state 311
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 312
    postfix_paren_typedef_declarator	go to state 162
    identifier_declarator	go to state 257
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 626
    unary_modifier	go to state 627
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 628

    declaring_list  ->  declaring_list ',' declarator @11 . initializer_opt   (rule 198)

    '=' 	shift, and go to state 490

    $default	reduce using rule 448 (initializer_opt)

    initializer_opt	go to state 815
    initializer	go to state 492



state 629

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    constructed_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' '(' argument_expression_list ')'   (rule 212)
    constructed_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 213)
    constructed_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')' '(' argument_expression_list ')'   (rule 214)
    constructed_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')' '(' argument_expression_list ')'   (rule 215)
    constructed_parameter_typedef_declarator  ->  '(' . clean_typedef_declarator ')' '(' argument_expression_list ')'   (rule 218)
    constructed_parameter_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 219)
    nonunary_constructed_identifier_declarator  ->  '(' . unary_identifier_declarator ')' '(' argument_expression_list ')'   (rule 225)
    nonunary_constructed_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 226)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator   (rule 588)
    paren_typedef_declarator  ->  asterisk_or_ampersand '(' . simple_paren_typedef_declarator ')'   (rule 590)
    paren_typedef_declarator  ->  asterisk_or_ampersand '(' . TYPEDEFname ')'   (rule 592)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')'   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')'   (rule 597)
    postfix_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')'   (rule 598)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator   (rule 599)
    simple_paren_typedef_declarator  ->  '(' . TYPEDEFname ')'   (rule 600)
    simple_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator ')'   (rule 601)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 496
    '(' 	shift, and go to state 625
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 620
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    clean_typedef_declarator	go to state 290
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 291
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 497
    unary_identifier_declarator	go to state 293
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 626
    unary_modifier	go to state 627
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 630

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    constructed_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' '(' argument_expression_list ')'   (rule 212)
    constructed_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 213)
    constructed_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')' '(' argument_expression_list ')'   (rule 214)
    constructed_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')' '(' argument_expression_list ')'   (rule 215)
    constructed_parameter_typedef_declarator  ->  '(' . clean_typedef_declarator ')' '(' argument_expression_list ')'   (rule 218)
    constructed_parameter_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 219)
    nonunary_constructed_identifier_declarator  ->  '(' . unary_identifier_declarator ')' '(' argument_expression_list ')'   (rule 225)
    nonunary_constructed_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 226)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator   (rule 588)
    paren_typedef_declarator  ->  unary_modifier '(' . simple_paren_typedef_declarator ')'   (rule 591)
    paren_typedef_declarator  ->  unary_modifier '(' . TYPEDEFname ')'   (rule 593)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')'   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')'   (rule 597)
    postfix_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')'   (rule 598)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator   (rule 599)
    simple_paren_typedef_declarator  ->  '(' . TYPEDEFname ')'   (rule 600)
    simple_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator ')'   (rule 601)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 498
    '(' 	shift, and go to state 625
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 620
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    clean_typedef_declarator	go to state 290
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 291
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 499
    unary_identifier_declarator	go to state 293
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 626
    unary_modifier	go to state 627
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 631

    constructed_paren_typedef_declarator  ->  '(' TYPEDEFname postfixing_abstract_declarator . ')' '(' argument_expression_list ')'   (rule 215)
    postfix_paren_typedef_declarator  ->  '(' TYPEDEFname postfixing_abstract_declarator . ')'   (rule 598)
    abstract_declarator  ->  postfixing_abstract_declarator .   (rule 620)

    ')' 	shift, and go to state 705

    ')' 	[reduce using rule 620 (abstract_declarator)]
    $default	reduce using rule 620 (abstract_declarator)



state 632

    constructor_init  ->  IDENTIFIER . '(' argument_expression_list ')'   (rule 568)
    constructor_init  ->  IDENTIFIER . '(' ')'   (rule 569)
    tag_name  ->  IDENTIFIER .   (rule 642)

    '(' 	shift, and go to state 816

    $default	reduce using rule 642 (tag_name)



state 633

    constructor_init  ->  TYPEDEFname . '(' argument_expression_list ')'   (rule 570)
    constructor_init  ->  TYPEDEFname . '(' ')'   (rule 571)
    tag_name  ->  TYPEDEFname .   (rule 643)

    '(' 	shift, and go to state 817

    $default	reduce using rule 643 (tag_name)



state 634

    constructor_init  ->  '(' . argument_expression_list ')'   (rule 574)
    constructor_init  ->  '(' . ')'   (rule 575)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    ')' 	shift, and go to state 818
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 819
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 635

    constructor_init_list  ->  ':' constructor_init .   (rule 566)

    $default	reduce using rule 566 (constructor_init_list)



state 636

    constructor_init  ->  global_or_scoped_typedefname . '(' argument_expression_list ')'   (rule 572)
    constructor_init  ->  global_or_scoped_typedefname . '(' ')'   (rule 573)

    '(' 	shift, and go to state 820



state 637

    constructor_function_definition  ->  declaration_specifier parameter_type_list constructor_init_list_opt compound_statement .   (rule 527)

    $default	reduce using rule 527 (constructor_function_definition)



state 638

    constructor_init_list  ->  constructor_init_list ',' . constructor_init   (rule 567)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 632
    TYPEDEFname	shift, and go to state 633
    '(' 	shift, and go to state 634

    $default	reduce using rule 644 (@22)

    aggregate_key	go to state 155
    constructor_init	go to state 821
    scoping_name	go to state 75
    scope	go to state 434
    tag_name	go to state 77
    global_scope	go to state 435
    @22 	go to state 79
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 636



state 639

    declaring_list  ->  declaration_specifier declarator @6 initializer_opt .   (rule 188)

    $default	reduce using rule 188 (declaring_list)



state 640

    old_function_definition  ->  declaration_specifier old_function_declarator @15 old_function_body .   (rule 511)

    $default	reduce using rule 511 (old_function_definition)



state 641

    declaring_list  ->  type_specifier declarator @7 initializer_opt .   (rule 190)

    $default	reduce using rule 190 (declaring_list)



state 642

    old_function_definition  ->  type_specifier old_function_declarator @16 old_function_body .   (rule 513)

    $default	reduce using rule 513 (old_function_definition)



state 643

    default_declaring_list  ->  declaration_qualifier_list identifier_declarator @3 initializer_opt .   (rule 179)

    $default	reduce using rule 179 (default_declaring_list)



state 644

    old_function_definition  ->  declaration_qualifier_list old_function_declarator @20 old_function_body .   (rule 521)

    $default	reduce using rule 521 (old_function_definition)



state 645

    default_declaring_list  ->  type_qualifier_list identifier_declarator @4 initializer_opt .   (rule 181)

    $default	reduce using rule 181 (default_declaring_list)



state 646

    old_function_definition  ->  type_qualifier_list old_function_declarator @21 old_function_body .   (rule 523)

    $default	reduce using rule 523 (old_function_definition)



state 647

    declaring_list  ->  basic_type_name declarator @8 initializer_opt .   (rule 192)

    $default	reduce using rule 192 (declaring_list)



state 648

    old_function_definition  ->  basic_type_name old_function_declarator @17 old_function_body .   (rule 515)

    $default	reduce using rule 515 (old_function_definition)



state 649

    parent_class  ->  VIRTUAL access_specifier_opt . global_opt_scope_opt_typedefname   (rule 308)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 430

    $default	reduce using rule 644 (@22)

    aggregate_key	go to state 155
    scoping_name	go to state 75
    scope	go to state 434
    tag_name	go to state 77
    global_scope	go to state 435
    @22 	go to state 79
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 436
    global_opt_scope_opt_typedefname	go to state 822



state 650

    access_specifier_opt  ->  access_specifier .   (rule 313)

    $default	reduce using rule 313 (access_specifier_opt)



state 651

    derivation_list  ->  derivation_list ',' . parent_class   (rule 306)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CLASS	shift, and go to state 22
    PUBLIC	shift, and go to state 426
    PROTECTED	shift, and go to state 427
    PRIVATE	shift, and go to state 428
    VIRTUAL	shift, and go to state 429
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 430

    $default	reduce using rule 644 (@22)

    parent_class	go to state 823
    access_specifier	go to state 433
    aggregate_key	go to state 155
    scoping_name	go to state 75
    scope	go to state 434
    tag_name	go to state 77
    global_scope	go to state 435
    @22 	go to state 79
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 436
    global_opt_scope_opt_typedefname	go to state 437



state 652

    virtual_opt  ->  VIRTUAL .   (rule 311)

    $default	reduce using rule 311 (virtual_opt)



state 653

    parent_class  ->  access_specifier virtual_opt . global_opt_scope_opt_typedefname   (rule 309)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 430

    $default	reduce using rule 644 (@22)

    aggregate_key	go to state 155
    scoping_name	go to state 75
    scope	go to state 434
    tag_name	go to state 77
    global_scope	go to state 435
    @22 	go to state 79
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 436
    global_opt_scope_opt_typedefname	go to state 824



state 654

    aggregate_name_elaboration  ->  aggregate_name derivation_opt '{' member_declaration_list_opt . '}'   (rule 297)
    member_declaration_list_opt  ->  member_declaration_list_opt . member_declaration   (rule 321)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    PUBLIC	shift, and go to state 426
    PROTECTED	shift, and go to state 427
    PRIVATE	shift, and go to state 428
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 825
    '(' 	shift, and go to state 619
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    '}' 	shift, and go to state 826

    $default	reduce using rule 644 (@22)

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    declaration_specifier	go to state 827
    type_specifier	go to state 828
    declaration_qualifier_list	go to state 829
    type_qualifier_list	go to state 830
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 831
    sue_type_specifier_elaboration	go to state 832
    sue_type_specifier	go to state 833
    typedef_declaration_specifier	go to state 834
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 835
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    access_specifier	go to state 836
    aggregate_key	go to state 56
    member_declaration	go to state 837
    member_default_declaring_list	go to state 838
    member_declaring_list	go to state 839
    member_conflict_declaring_item	go to state 840
    member_conflict_paren_declaring_item	go to state 841
    member_conflict_paren_postfix_declaring_item	go to state 842
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    new_function_definition	go to state 843
    constructor_function_in_class	go to state 844
    identifier_declarator	go to state 845
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 621
    unary_modifier	go to state 622
    scoping_name	go to state 75
    scope	go to state 76
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 846



state 655

    aggregate_name_elaboration  ->  aggregate_key derivation_opt '{' member_declaration_list_opt . '}'   (rule 298)
    member_declaration_list_opt  ->  member_declaration_list_opt . member_declaration   (rule 321)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    PUBLIC	shift, and go to state 426
    PROTECTED	shift, and go to state 427
    PRIVATE	shift, and go to state 428
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 825
    '(' 	shift, and go to state 619
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    '}' 	shift, and go to state 847

    $default	reduce using rule 644 (@22)

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    declaration_specifier	go to state 827
    type_specifier	go to state 828
    declaration_qualifier_list	go to state 829
    type_qualifier_list	go to state 830
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 831
    sue_type_specifier_elaboration	go to state 832
    sue_type_specifier	go to state 833
    typedef_declaration_specifier	go to state 834
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 835
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    access_specifier	go to state 836
    aggregate_key	go to state 56
    member_declaration	go to state 837
    member_default_declaring_list	go to state 838
    member_declaring_list	go to state 839
    member_conflict_declaring_item	go to state 840
    member_conflict_paren_declaring_item	go to state 841
    member_conflict_paren_postfix_declaring_item	go to state 842
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    new_function_definition	go to state 843
    constructor_function_in_class	go to state 844
    identifier_declarator	go to state 845
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 621
    unary_modifier	go to state 622
    scoping_name	go to state 75
    scope	go to state 76
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 846



state 656

    enum_name_elaboration  ->  enum_name '{' enumerator_list '}' .   (rule 386)

    $default	reduce using rule 386 (enum_name_elaboration)



state 657

    enumerator_list  ->  enumerator_list_no_trailing_comma ',' .   (rule 391)
    enumerator_list_no_trailing_comma  ->  enumerator_list_no_trailing_comma ',' . enumerator_name enumerator_value_opt   (rule 393)

    IDENTIFIER	shift, and go to state 440
    TYPEDEFname	shift, and go to state 441

    $default	reduce using rule 391 (enumerator_list)

    enumerator_name	go to state 848



state 658

    enumerator_value_opt  ->  '=' . constant_expression   (rule 397)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 384
    constant_expression	go to state 849
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 659

    enumerator_list_no_trailing_comma  ->  enumerator_name enumerator_value_opt .   (rule 392)

    $default	reduce using rule 392 (enumerator_list_no_trailing_comma)



state 660

    enum_name_elaboration  ->  global_opt_scope_opt_enum_key '{' enumerator_list '}' .   (rule 385)

    $default	reduce using rule 385 (enum_name_elaboration)



state 661

    external_definition  ->  linkage_specifier '{' translation_unit '}' .   (rule 493)

    $default	reduce using rule 493 (external_definition)



state 662

    jump_statement  ->  BREAK . ';'   (rule 481)

    ';' 	shift, and go to state 850



state 663

    selection_statement  ->  SWITCH . '(' comma_expression ')' statement   (rule 474)

    '(' 	shift, and go to state 851



state 664

    labeled_statement  ->  CASE . constant_expression ':' statement   (rule 464)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 384
    constant_expression	go to state 852
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 665

    jump_statement  ->  RETURN . comma_expression_opt ';'   (rule 482)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    CLCL	reduce using rule 644 (@22)
    $default	reduce using rule 171 (comma_expression_opt)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 676
    comma_expression_opt	go to state 853
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 666

    jump_statement  ->  CONTINUE . ';'   (rule 480)

    ';' 	shift, and go to state 854



state 667

    iteration_statement  ->  FOR . '(' comma_expression_opt ';' comma_expression_opt ';' comma_expression_opt ')' statement   (rule 477)
    iteration_statement  ->  FOR . '(' declaration comma_expression_opt ';' comma_expression_opt ')' statement   (rule 478)

    '(' 	shift, and go to state 855



state 668

    labeled_statement  ->  DEFAULT . ':' statement   (rule 465)

    ':' 	shift, and go to state 856



state 669

    jump_statement  ->  GOTO . label ';'   (rule 479)

    IDENTIFIER	shift, and go to state 857
    TYPEDEFname	shift, and go to state 858

    label	go to state 859



state 670

    iteration_statement  ->  DO . statement WHILE '(' comma_expression ')' ';'   (rule 476)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    BREAK	shift, and go to state 662
    LONG	shift, and go to state 6
    SWITCH	shift, and go to state 663
    CASE	shift, and go to state 664
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    RETURN	shift, and go to state 665
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    CONTINUE	shift, and go to state 666
    FOR 	shift, and go to state 667
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    DEFAULT	shift, and go to state 668
    GOTO	shift, and go to state 669
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    DO  	shift, and go to state 670
    IF  	shift, and go to state 671
    STATIC	shift, and go to state 20
    WHILE	shift, and go to state 672
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 673
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 674
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335
    '{' 	shift, and go to state 251

    CLCL	reduce using rule 644 (@22)
    $default	reduce using rule 171 (comma_expression_opt)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 676
    comma_expression_opt	go to state 677
    declaration	go to state 678
    default_declaring_list	go to state 36
    declaring_list	go to state 37
    declaration_specifier	go to state 450
    type_specifier	go to state 451
    declaration_qualifier_list	go to state 452
    type_qualifier_list	go to state 453
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 45
    sue_type_specifier_elaboration	go to state 46
    sue_type_specifier	go to state 47
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 679
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    statement	go to state 860
    labeled_statement	go to state 681
    compound_statement	go to state 682
    expression_statement	go to state 683
    selection_statement	go to state 684
    iteration_statement	go to state 685
    jump_statement	go to state 686
    label	go to state 687
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 373
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 688



state 671

    selection_statement  ->  IF . '(' comma_expression ')' statement   (rule 472)
    selection_statement  ->  IF . '(' comma_expression ')' statement ELSE statement   (rule 473)

    '(' 	shift, and go to state 861



state 672

    iteration_statement  ->  WHILE . '(' comma_expression_opt ')' statement   (rule 475)

    '(' 	shift, and go to state 862



state 673

    label  ->  IDENTIFIER .   (rule 483)
    tag_name  ->  IDENTIFIER .   (rule 642)
    scope_opt_identifier  ->  IDENTIFIER .   (rule 649)

    CLCL	reduce using rule 642 (tag_name)
    ':' 	reduce using rule 483 (label)
    $default	reduce using rule 649 (scope_opt_identifier)



state 674

    postfix_expression  ->  TYPEDEFname . '(' ')'   (rule 73)
    postfix_expression  ->  TYPEDEFname . '(' argument_expression_list ')'   (rule 75)
    declaring_list  ->  TYPEDEFname . declarator @9 initializer_opt   (rule 194)
    declaring_list  ->  TYPEDEFname . constructed_declarator   (rule 202)
    typedef_declaration_specifier  ->  TYPEDEFname . storage_class   (rule 267)
    typedef_type_specifier  ->  TYPEDEFname . type_qualifier   (rule 272)
    label  ->  TYPEDEFname .   (rule 484)
    tag_name  ->  TYPEDEFname .   (rule 643)

    AUTO	shift, and go to state 2
    STRUCT	shift, and go to state 5
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 146
    '(' 	shift, and go to state 863
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    CLCL	reduce using rule 643 (tag_name)
    $default	reduce using rule 484 (label)

    paren_identifier_declarator	go to state 393
    operator_function_name	go to state 34
    constructed_declarator	go to state 149
    constructed_paren_typedef_declarator	go to state 150
    constructed_parameter_typedef_declarator	go to state 151
    nonunary_constructed_identifier_declarator	go to state 152
    type_qualifier	go to state 153
    storage_class	go to state 154
    aggregate_key	go to state 155
    declarator	go to state 689
    typedef_declarator	go to state 157
    parameter_typedef_declarator	go to state 158
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 161
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 163
    identifier_declarator	go to state 164
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 401
    unary_modifier	go to state 402
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 675

    compound_statement  ->  '{' statement_list_opt '}' .   (rule 466)

    $default	reduce using rule 466 (compound_statement)



state 676

    comma_expression  ->  comma_expression . ',' assignment_expression   (rule 169)
    comma_expression_opt  ->  comma_expression .   (rule 172)

    ',' 	shift, and go to state 752

    $default	reduce using rule 172 (comma_expression_opt)



state 677

    expression_statement  ->  comma_expression_opt . ';'   (rule 471)

    ';' 	shift, and go to state 864



state 678

    statement  ->  declaration .   (rule 462)

    $default	reduce using rule 462 (statement)



state 679

    postfix_expression  ->  basic_type_name . '(' assignment_expression ')'   (rule 77)
    declaring_list  ->  basic_type_name . declarator @8 initializer_opt   (rule 192)
    declaring_list  ->  basic_type_name . constructed_declarator   (rule 201)
    basic_declaration_specifier  ->  basic_type_name . storage_class   (rule 245)
    basic_type_specifier  ->  basic_type_name . basic_type_name   (rule 249)
    basic_type_specifier  ->  basic_type_name . type_qualifier   (rule 250)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 146
    '(' 	shift, and go to state 865
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 393
    operator_function_name	go to state 34
    constructed_declarator	go to state 232
    constructed_paren_typedef_declarator	go to state 150
    constructed_parameter_typedef_declarator	go to state 151
    nonunary_constructed_identifier_declarator	go to state 152
    type_qualifier	go to state 233
    storage_class	go to state 234
    basic_type_name	go to state 235
    aggregate_key	go to state 155
    declarator	go to state 694
    typedef_declarator	go to state 157
    parameter_typedef_declarator	go to state 158
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 161
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 163
    identifier_declarator	go to state 164
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 401
    unary_modifier	go to state 402
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 680

    statement_list_opt  ->  statement_list_opt statement .   (rule 470)

    $default	reduce using rule 470 (statement_list_opt)



state 681

    statement  ->  labeled_statement .   (rule 456)

    $default	reduce using rule 456 (statement)



state 682

    statement  ->  compound_statement .   (rule 457)

    $default	reduce using rule 457 (statement)



state 683

    statement  ->  expression_statement .   (rule 458)

    $default	reduce using rule 458 (statement)



state 684

    statement  ->  selection_statement .   (rule 459)

    $default	reduce using rule 459 (statement)



state 685

    statement  ->  iteration_statement .   (rule 460)

    $default	reduce using rule 460 (statement)



state 686

    statement  ->  jump_statement .   (rule 461)

    $default	reduce using rule 461 (statement)



state 687

    labeled_statement  ->  label . ':' statement   (rule 463)

    ':' 	shift, and go to state 866



state 688

    postfix_expression  ->  global_or_scoped_typedefname . '(' ')'   (rule 74)
    postfix_expression  ->  global_or_scoped_typedefname . '(' argument_expression_list ')'   (rule 76)
    declaring_list  ->  global_or_scoped_typedefname . declarator @10 initializer_opt   (rule 196)
    declaring_list  ->  global_or_scoped_typedefname . constructed_declarator   (rule 203)
    typedef_declaration_specifier  ->  global_or_scoped_typedefname . storage_class   (rule 268)
    typedef_type_specifier  ->  global_or_scoped_typedefname . type_qualifier   (rule 273)

    AUTO	shift, and go to state 2
    STRUCT	shift, and go to state 5
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 146
    '(' 	shift, and go to state 867
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 393
    operator_function_name	go to state 34
    constructed_declarator	go to state 272
    constructed_paren_typedef_declarator	go to state 150
    constructed_parameter_typedef_declarator	go to state 151
    nonunary_constructed_identifier_declarator	go to state 152
    type_qualifier	go to state 273
    storage_class	go to state 274
    aggregate_key	go to state 155
    declarator	go to state 697
    typedef_declarator	go to state 157
    parameter_typedef_declarator	go to state 158
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 161
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 163
    identifier_declarator	go to state 164
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 401
    unary_modifier	go to state 402
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 689

    declaring_list  ->  TYPEDEFname declarator . @9 initializer_opt   (rule 194)

    $default	reduce using rule 193 (@9)

    @9  	go to state 299



state 690

    declaring_list  ->  declaration_specifier declarator . @6 initializer_opt   (rule 188)

    $default	reduce using rule 187 (@6)

    @6  	go to state 409



state 691

    declaring_list  ->  type_specifier declarator . @7 initializer_opt   (rule 190)

    $default	reduce using rule 189 (@7)

    @7  	go to state 412



state 692

    default_declaring_list  ->  declaration_qualifier_list identifier_declarator . @3 initializer_opt   (rule 179)

    $default	reduce using rule 178 (@3)

    @3  	go to state 415



state 693

    default_declaring_list  ->  type_qualifier_list identifier_declarator . @4 initializer_opt   (rule 181)

    $default	reduce using rule 180 (@4)

    @4  	go to state 420



state 694

    declaring_list  ->  basic_type_name declarator . @8 initializer_opt   (rule 192)

    $default	reduce using rule 191 (@8)

    @8  	go to state 423



state 695

    declaration_list  ->  declaration_list declaration .   (rule 468)

    $default	reduce using rule 468 (declaration_list)



state 696

    old_function_body  ->  declaration_list compound_statement .   (rule 524)

    $default	reduce using rule 524 (old_function_body)



state 697

    declaring_list  ->  global_or_scoped_typedefname declarator . @10 initializer_opt   (rule 196)

    $default	reduce using rule 195 (@10)

    @10 	go to state 466



state 698

    aggregate_name  ->  global_scope scope aggregate_key tag_name .   (rule 300)
    scoping_name  ->  aggregate_key tag_name .   (rule 639)

    CLCL	reduce using rule 639 (scoping_name)
    $default	reduce using rule 300 (aggregate_name)



state 699

    constructor_function_definition  ->  global_or_scoped_typedefname parameter_type_list constructor_init_list_opt compound_statement .   (rule 526)

    $default	reduce using rule 526 (constructor_function_definition)



state 700

    declaring_list  ->  global_or_scoped_typedefname declarator @10 initializer_opt .   (rule 196)

    $default	reduce using rule 196 (declaring_list)



state 701

    old_function_definition  ->  global_or_scoped_typedefname old_function_declarator @19 old_function_body .   (rule 519)

    $default	reduce using rule 519 (old_function_definition)



state 702

    constructed_parameter_typedef_declarator  ->  TYPEDEFname '(' argument_expression_list ')' .   (rule 216)

    $default	reduce using rule 216 (constructed_parameter_typedef_declarator)



state 703

    argument_expression_list  ->  argument_expression_list . ',' assignment_expression   (rule 84)
    constructed_parameter_typedef_declarator  ->  TYPEDEFname postfixing_abstract_declarator '(' argument_expression_list . ')'   (rule 217)

    ')' 	shift, and go to state 868
    ',' 	shift, and go to state 547



state 704

    typedef_declaration_specifier  ->  TYPEDEFname . storage_class   (rule 267)
    typedef_type_specifier  ->  TYPEDEFname . type_qualifier   (rule 272)
    non_casting_parameter_declaration  ->  TYPEDEFname . identifier_declarator   (rule 433)
    non_casting_parameter_declaration  ->  TYPEDEFname . parameter_typedef_declarator   (rule 434)
    type_name  ->  TYPEDEFname .   (rule 440)
    type_name  ->  TYPEDEFname . abstract_declarator   (rule 445)
    tag_name  ->  TYPEDEFname .   (rule 643)

    AUTO	shift, and go to state 2
    STRUCT	shift, and go to state 5
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 485
    '(' 	shift, and go to state 576
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    '[' 	shift, and go to state 175

    CLCL	reduce using rule 643 (tag_name)
    $default	reduce using rule 440 (type_name)

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    type_qualifier	go to state 153
    storage_class	go to state 154
    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    parameter_typedef_declarator	go to state 510
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    identifier_declarator	go to state 511
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    abstract_declarator	go to state 512
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 516
    unary_modifier	go to state 517
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 705

    constructed_paren_typedef_declarator  ->  '(' TYPEDEFname postfixing_abstract_declarator ')' . '(' argument_expression_list ')'   (rule 215)
    postfix_paren_typedef_declarator  ->  '(' TYPEDEFname postfixing_abstract_declarator ')' .   (rule 598)

    '(' 	shift, and go to state 869

    $default	reduce using rule 598 (postfix_paren_typedef_declarator)



state 706

    postfix_paren_typedef_declarator  ->  '(' TYPEDEFname postfixing_abstract_declarator . ')'   (rule 598)

    ')' 	shift, and go to state 870



state 707

    clean_postfix_typedef_declarator  ->  '(' clean_typedef_declarator ')' .   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' clean_typedef_declarator ')' . postfixing_abstract_declarator   (rule 588)

    '(' 	shift, and go to state 473
    '[' 	shift, and go to state 175

    $default	reduce using rule 587 (clean_postfix_typedef_declarator)

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 871
    array_abstract_declarator	go to state 178



state 708

    postfix_paren_typedef_declarator  ->  '(' paren_typedef_declarator ')' .   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' paren_typedef_declarator ')' . postfixing_abstract_declarator   (rule 599)

    '(' 	shift, and go to state 473
    '[' 	shift, and go to state 175

    $default	reduce using rule 596 (postfix_paren_typedef_declarator)

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 872
    array_abstract_declarator	go to state 178



state 709

    postfix_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator postfixing_abstract_declarator . ')'   (rule 597)

    ')' 	shift, and go to state 873



state 710

    constructed_parameter_typedef_declarator  ->  '(' clean_typedef_declarator ')' '(' . argument_expression_list ')'   (rule 218)
    parameter_type_list  ->  '(' . ')' type_qualifier_list_opt   (rule 398)
    parameter_type_list  ->  '(' . type_name ')' type_qualifier_list_opt   (rule 399)
    parameter_type_list  ->  '(' . type_name initializer ')' type_qualifier_list_opt   (rule 400)
    parameter_type_list  ->  '(' . named_parameter_type_list ')' type_qualifier_list_opt   (rule 401)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 326
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    ELLIPSIS	shift, and go to state 329
    '(' 	shift, and go to state 330
    ')' 	shift, and go to state 331
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 874
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    declaration_specifier	go to state 360
    type_specifier	go to state 361
    declaration_qualifier_list	go to state 362
    type_qualifier_list	go to state 363
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 364
    sue_type_specifier_elaboration	go to state 365
    sue_type_specifier	go to state 366
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 367
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    named_parameter_type_list	go to state 368
    parameter_list	go to state 369
    non_casting_parameter_declaration	go to state 370
    type_name	go to state 371
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 373
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 380



state 711

    constructed_parameter_typedef_declarator  ->  '(' clean_typedef_declarator ')' postfixing_abstract_declarator . '(' argument_expression_list ')'   (rule 219)
    clean_postfix_typedef_declarator  ->  '(' clean_typedef_declarator ')' postfixing_abstract_declarator .   (rule 588)

    '(' 	shift, and go to state 875

    $default	reduce using rule 588 (clean_postfix_typedef_declarator)



state 712

    constructed_paren_typedef_declarator  ->  '(' paren_typedef_declarator ')' '(' . argument_expression_list ')'   (rule 212)
    parameter_type_list  ->  '(' . ')' type_qualifier_list_opt   (rule 398)
    parameter_type_list  ->  '(' . type_name ')' type_qualifier_list_opt   (rule 399)
    parameter_type_list  ->  '(' . type_name initializer ')' type_qualifier_list_opt   (rule 400)
    parameter_type_list  ->  '(' . named_parameter_type_list ')' type_qualifier_list_opt   (rule 401)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 326
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    ELLIPSIS	shift, and go to state 329
    '(' 	shift, and go to state 330
    ')' 	shift, and go to state 331
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 876
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    declaration_specifier	go to state 360
    type_specifier	go to state 361
    declaration_qualifier_list	go to state 362
    type_qualifier_list	go to state 363
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 364
    sue_type_specifier_elaboration	go to state 365
    sue_type_specifier	go to state 366
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 367
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    named_parameter_type_list	go to state 368
    parameter_list	go to state 369
    non_casting_parameter_declaration	go to state 370
    type_name	go to state 371
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 373
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 380



state 713

    constructed_paren_typedef_declarator  ->  '(' paren_typedef_declarator ')' postfixing_abstract_declarator . '(' argument_expression_list ')'   (rule 213)
    postfix_paren_typedef_declarator  ->  '(' paren_typedef_declarator ')' postfixing_abstract_declarator .   (rule 599)

    '(' 	shift, and go to state 877

    $default	reduce using rule 599 (postfix_paren_typedef_declarator)



state 714

    constructed_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator postfixing_abstract_declarator ')' . '(' argument_expression_list ')'   (rule 214)
    postfix_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator postfixing_abstract_declarator ')' .   (rule 597)

    '(' 	shift, and go to state 878

    $default	reduce using rule 597 (postfix_paren_typedef_declarator)



state 715

    nonunary_constructed_identifier_declarator  ->  '(' unary_identifier_declarator ')' '(' . argument_expression_list ')'   (rule 225)
    parameter_type_list  ->  '(' . ')' type_qualifier_list_opt   (rule 398)
    parameter_type_list  ->  '(' . type_name ')' type_qualifier_list_opt   (rule 399)
    parameter_type_list  ->  '(' . type_name initializer ')' type_qualifier_list_opt   (rule 400)
    parameter_type_list  ->  '(' . named_parameter_type_list ')' type_qualifier_list_opt   (rule 401)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 326
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    ELLIPSIS	shift, and go to state 329
    '(' 	shift, and go to state 330
    ')' 	shift, and go to state 331
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 879
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    declaration_specifier	go to state 360
    type_specifier	go to state 361
    declaration_qualifier_list	go to state 362
    type_qualifier_list	go to state 363
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 364
    sue_type_specifier_elaboration	go to state 365
    sue_type_specifier	go to state 366
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 367
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    named_parameter_type_list	go to state 368
    parameter_list	go to state 369
    non_casting_parameter_declaration	go to state 370
    type_name	go to state 371
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 373
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 380



state 716

    nonunary_constructed_identifier_declarator  ->  '(' unary_identifier_declarator ')' postfixing_abstract_declarator . '(' argument_expression_list ')'   (rule 226)
    postfix_identifier_declarator  ->  '(' unary_identifier_declarator ')' postfixing_abstract_declarator .   (rule 609)

    '(' 	shift, and go to state 880

    $default	reduce using rule 609 (postfix_identifier_declarator)



state 717

    parameter_typedef_declarator  ->  TYPEDEFname postfixing_abstract_declarator .   (rule 582)

    $default	reduce using rule 582 (parameter_typedef_declarator)



state 718

    paren_typedef_declarator  ->  asterisk_or_ampersand '(' TYPEDEFname . ')'   (rule 592)
    postfix_paren_typedef_declarator  ->  '(' TYPEDEFname . postfixing_abstract_declarator ')'   (rule 598)
    tag_name  ->  TYPEDEFname .   (rule 643)

    '(' 	shift, and go to state 473
    ')' 	shift, and go to state 881
    '[' 	shift, and go to state 175

    $default	reduce using rule 643 (tag_name)

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 706
    array_abstract_declarator	go to state 178



state 719

    paren_typedef_declarator  ->  asterisk_or_ampersand '(' simple_paren_typedef_declarator . ')'   (rule 590)
    postfix_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator . postfixing_abstract_declarator ')'   (rule 597)

    '(' 	shift, and go to state 473
    ')' 	shift, and go to state 882
    '[' 	shift, and go to state 175

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 709
    array_abstract_declarator	go to state 178



state 720

    paren_typedef_declarator  ->  unary_modifier '(' TYPEDEFname . ')'   (rule 593)
    postfix_paren_typedef_declarator  ->  '(' TYPEDEFname . postfixing_abstract_declarator ')'   (rule 598)
    tag_name  ->  TYPEDEFname .   (rule 643)

    '(' 	shift, and go to state 473
    ')' 	shift, and go to state 883
    '[' 	shift, and go to state 175

    $default	reduce using rule 643 (tag_name)

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 706
    array_abstract_declarator	go to state 178



state 721

    paren_typedef_declarator  ->  unary_modifier '(' simple_paren_typedef_declarator . ')'   (rule 591)
    postfix_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator . postfixing_abstract_declarator ')'   (rule 597)

    '(' 	shift, and go to state 473
    ')' 	shift, and go to state 884
    '[' 	shift, and go to state 175

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 709
    array_abstract_declarator	go to state 178



state 722

    nonunary_constructed_identifier_declarator  ->  paren_identifier_declarator '(' argument_expression_list ')' .   (rule 223)
    postfix_old_function_declarator  ->  paren_identifier_declarator '(' argument_expression_list ')' .   (rule 613)

    ',' 	reduce using rule 223 (nonunary_constructed_identifier_declarator)
    ';' 	reduce using rule 223 (nonunary_constructed_identifier_declarator)
    $default	reduce using rule 613 (postfix_old_function_declarator)



state 723

    argument_expression_list  ->  argument_expression_list . ',' assignment_expression   (rule 84)
    nonunary_constructed_identifier_declarator  ->  paren_identifier_declarator postfixing_abstract_declarator '(' argument_expression_list . ')'   (rule 224)

    ')' 	shift, and go to state 885
    ',' 	shift, and go to state 547



state 724

    initializer_group  ->  '{' . initializer_list '}'   (rule 451)
    initializer_group  ->  '{' . initializer_list ',' '}'   (rule 452)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335
    '{' 	shift, and go to state 724

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 725
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    initializer_group	go to state 886
    initializer_list	go to state 887
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 725

    initializer_group  ->  assignment_expression .   (rule 453)

    $default	reduce using rule 453 (initializer_group)



state 726

    initializer  ->  '=' initializer_group .   (rule 450)

    $default	reduce using rule 450 (initializer)



state 727

    constructed_declarator  ->  simple_paren_typedef_declarator '(' argument_expression_list ')' .   (rule 207)

    $default	reduce using rule 207 (constructed_declarator)



state 728

    argument_expression_list  ->  argument_expression_list . ',' assignment_expression   (rule 84)
    constructed_declarator  ->  simple_paren_typedef_declarator postfixing_abstract_declarator '(' argument_expression_list . ')'   (rule 208)

    ')' 	shift, and go to state 888
    ',' 	shift, and go to state 547



state 729

    paren_typedef_declarator  ->  asterisk_or_ampersand '(' TYPEDEFname ')' .   (rule 592)
    simple_paren_typedef_declarator  ->  '(' TYPEDEFname ')' .   (rule 600)

    '(' 	reduce using rule 600 (simple_paren_typedef_declarator)
    '[' 	reduce using rule 600 (simple_paren_typedef_declarator)
    $default	reduce using rule 592 (paren_typedef_declarator)



state 730

    paren_typedef_declarator  ->  asterisk_or_ampersand '(' simple_paren_typedef_declarator ')' .   (rule 590)
    simple_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator ')' .   (rule 601)

    '(' 	reduce using rule 601 (simple_paren_typedef_declarator)
    '[' 	reduce using rule 601 (simple_paren_typedef_declarator)
    $default	reduce using rule 590 (paren_typedef_declarator)



state 731

    paren_typedef_declarator  ->  unary_modifier '(' TYPEDEFname ')' .   (rule 593)
    simple_paren_typedef_declarator  ->  '(' TYPEDEFname ')' .   (rule 600)

    '(' 	reduce using rule 600 (simple_paren_typedef_declarator)
    '[' 	reduce using rule 600 (simple_paren_typedef_declarator)
    $default	reduce using rule 593 (paren_typedef_declarator)



state 732

    paren_typedef_declarator  ->  unary_modifier '(' simple_paren_typedef_declarator ')' .   (rule 591)
    simple_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator ')' .   (rule 601)

    '(' 	reduce using rule 601 (simple_paren_typedef_declarator)
    '[' 	reduce using rule 601 (simple_paren_typedef_declarator)
    $default	reduce using rule 591 (paren_typedef_declarator)



state 733

    old_parameter_type_list  ->  '(' ')' .   (rule 402)

    $default	reduce using rule 402 (old_parameter_type_list)



state 734

    old_parameter_type_list  ->  '(' named_parameter_type_list . ')'   (rule 405)

    ')' 	shift, and go to state 889



state 735

    old_parameter_type_list  ->  '(' type_name . ')'   (rule 403)
    old_parameter_type_list  ->  '(' type_name . initializer ')'   (rule 404)
    named_parameter_type_list  ->  type_name . comma_opt_ellipsis   (rule 408)
    named_parameter_type_list  ->  type_name . initializer comma_opt_ellipsis   (rule 409)
    parameter_list  ->  type_name . ',' parameter_declaration   (rule 415)
    parameter_list  ->  type_name . initializer ',' parameter_declaration   (rule 416)

    ELLIPSIS	shift, and go to state 595
    ')' 	shift, and go to state 890
    ',' 	shift, and go to state 600
    '=' 	shift, and go to state 490

    comma_opt_ellipsis	go to state 601
    initializer	go to state 891



state 736

    unary_expression  ->  SIZEOF '(' type_name . ')'   (rule 94)

    ')' 	shift, and go to state 892



state 737

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    primary_expression  ->  '(' . comma_expression ')'   (rule 16)
    cast_expression  ->  '(' . type_name ')' cast_expression   (rule 115)
    parameter_type_list  ->  '(' . ')' type_qualifier_list_opt   (rule 398)
    parameter_type_list  ->  '(' . type_name ')' type_qualifier_list_opt   (rule 399)
    parameter_type_list  ->  '(' . type_name initializer ')' type_qualifier_list_opt   (rule 400)
    parameter_type_list  ->  '(' . named_parameter_type_list ')' type_qualifier_list_opt   (rule 401)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator   (rule 588)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)
    postfix_abstract_declarator  ->  '(' . unary_abstract_declarator ')'   (rule 630)
    postfix_abstract_declarator  ->  '(' . postfix_abstract_declarator ')'   (rule 631)
    postfix_abstract_declarator  ->  '(' . postfixing_abstract_declarator ')'   (rule 632)
    postfix_abstract_declarator  ->  '(' . unary_abstract_declarator ')' postfixing_abstract_declarator   (rule 633)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 326
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    ELLIPSIS	shift, and go to state 329
    '(' 	shift, and go to state 737
    ')' 	shift, and go to state 331
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335
    '[' 	shift, and go to state 175

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    paren_identifier_declarator	go to state 620
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 523
    declaration_specifier	go to state 360
    type_specifier	go to state 361
    declaration_qualifier_list	go to state 362
    type_qualifier_list	go to state 363
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 364
    sue_type_specifier_elaboration	go to state 365
    sue_type_specifier	go to state 366
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 367
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    parameter_type_list	go to state 176
    named_parameter_type_list	go to state 368
    parameter_list	go to state 369
    non_casting_parameter_declaration	go to state 370
    type_name	go to state 893
    clean_typedef_declarator	go to state 477
    clean_postfix_typedef_declarator	go to state 160
    unary_identifier_declarator	go to state 171
    postfix_identifier_declarator	go to state 70
    postfixing_abstract_declarator	go to state 740
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 741
    postfix_abstract_declarator	go to state 742
    asterisk_or_ampersand	go to state 743
    unary_modifier	go to state 517
    scoping_name	go to state 75
    scope	go to state 76
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 744
    scope_opt_complex_name	go to state 745
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 380



state 738

    postfix_expression  ->  TYPEDEFname '(' ')' .   (rule 73)
    parameter_type_list  ->  '(' ')' . type_qualifier_list_opt   (rule 398)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    ELLIPSIS	reduce using rule 61 (type_qualifier_list_opt)
    ')' 	reduce using rule 61 (type_qualifier_list_opt)
    ')' 	[reduce using rule 73 (postfix_expression)]
    ',' 	reduce using rule 61 (type_qualifier_list_opt)
    ',' 	[reduce using rule 73 (postfix_expression)]
    '=' 	reduce using rule 61 (type_qualifier_list_opt)
    '=' 	[reduce using rule 73 (postfix_expression)]
    $default	reduce using rule 73 (postfix_expression)

    type_qualifier_list_opt	go to state 533
    type_qualifier_list	go to state 460
    type_qualifier	go to state 42



state 739

    postfix_expression  ->  TYPEDEFname '(' argument_expression_list . ')'   (rule 75)
    argument_expression_list  ->  argument_expression_list . ',' assignment_expression   (rule 84)

    ')' 	shift, and go to state 894
    ',' 	shift, and go to state 547



state 740

    postfix_abstract_declarator  ->  '(' postfixing_abstract_declarator . ')'   (rule 632)

    ')' 	shift, and go to state 895



state 741

    postfix_abstract_declarator  ->  '(' unary_abstract_declarator . ')'   (rule 630)
    postfix_abstract_declarator  ->  '(' unary_abstract_declarator . ')' postfixing_abstract_declarator   (rule 633)

    ')' 	shift, and go to state 896



state 742

    postfix_abstract_declarator  ->  '(' postfix_abstract_declarator . ')'   (rule 631)

    ')' 	shift, and go to state 897



state 743

    unary_expression  ->  asterisk_or_ampersand . cast_expression   (rule 88)
    clean_typedef_declarator  ->  asterisk_or_ampersand . parameter_typedef_declarator   (rule 585)
    unary_identifier_declarator  ->  asterisk_or_ampersand . identifier_declarator   (rule 605)
    unary_abstract_declarator  ->  asterisk_or_ampersand .   (rule 626)
    unary_abstract_declarator  ->  asterisk_or_ampersand . abstract_declarator   (rule 628)
    unary_modifier  ->  asterisk_or_ampersand . type_qualifier_list   (rule 637)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    NEW 	shift, and go to state 317
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 898
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 737
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335
    '[' 	shift, and go to state 175

    CLCL	reduce using rule 644 (@22)
    $default	reduce using rule 626 (unary_abstract_declarator)

    constant	go to state 336
    string_literal_list	go to state 337
    paren_identifier_declarator	go to state 509
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 603
    type_qualifier_list	go to state 254
    type_qualifier	go to state 42
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    parameter_typedef_declarator	go to state 306
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    identifier_declarator	go to state 255
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    abstract_declarator	go to state 746
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 743
    unary_modifier	go to state 517
    scoping_name	go to state 75
    scope	go to state 899
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 507
    scope_opt_identifier	go to state 744
    scope_opt_complex_name	go to state 745
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 744

    paren_identifier_declarator  ->  scope_opt_identifier .   (rule 8)
    global_opt_scope_opt_identifier  ->  scope_opt_identifier .   (rule 656)

    '(' 	reduce using rule 8 (paren_identifier_declarator)
    '(' 	[reduce using rule 656 (global_opt_scope_opt_identifier)]
    ')' 	reduce using rule 8 (paren_identifier_declarator)
    ')' 	[reduce using rule 656 (global_opt_scope_opt_identifier)]
    '[' 	reduce using rule 8 (paren_identifier_declarator)
    '[' 	[reduce using rule 656 (global_opt_scope_opt_identifier)]
    $default	reduce using rule 656 (global_opt_scope_opt_identifier)



state 745

    paren_identifier_declarator  ->  scope_opt_complex_name .   (rule 9)
    global_opt_scope_opt_complex_name  ->  scope_opt_complex_name .   (rule 658)

    '(' 	reduce using rule 9 (paren_identifier_declarator)
    '(' 	[reduce using rule 658 (global_opt_scope_opt_complex_name)]
    ')' 	reduce using rule 9 (paren_identifier_declarator)
    ')' 	[reduce using rule 658 (global_opt_scope_opt_complex_name)]
    '[' 	reduce using rule 9 (paren_identifier_declarator)
    '[' 	[reduce using rule 658 (global_opt_scope_opt_complex_name)]
    $default	reduce using rule 658 (global_opt_scope_opt_complex_name)



state 746

    unary_abstract_declarator  ->  asterisk_or_ampersand abstract_declarator .   (rule 628)

    $default	reduce using rule 628 (unary_abstract_declarator)



state 747

    unary_abstract_declarator  ->  unary_modifier abstract_declarator .   (rule 629)

    $default	reduce using rule 629 (unary_abstract_declarator)



state 748

    postfix_expression  ->  TYPEDEFname '(' . ')'   (rule 73)
    postfix_expression  ->  TYPEDEFname '(' . argument_expression_list ')'   (rule 75)
    parameter_type_list  ->  '(' . ')' type_qualifier_list_opt   (rule 398)
    parameter_type_list  ->  '(' . type_name ')' type_qualifier_list_opt   (rule 399)
    parameter_type_list  ->  '(' . type_name initializer ')' type_qualifier_list_opt   (rule 400)
    parameter_type_list  ->  '(' . named_parameter_type_list ')' type_qualifier_list_opt   (rule 401)
    postfix_abstract_declarator  ->  '(' . unary_abstract_declarator ')'   (rule 630)
    postfix_abstract_declarator  ->  '(' . postfix_abstract_declarator ')'   (rule 631)
    postfix_abstract_declarator  ->  '(' . postfixing_abstract_declarator ')'   (rule 632)
    postfix_abstract_declarator  ->  '(' . unary_abstract_declarator ')' postfixing_abstract_declarator   (rule 633)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 326
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    ELLIPSIS	shift, and go to state 329
    '(' 	shift, and go to state 900
    ')' 	shift, and go to state 738
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335
    '[' 	shift, and go to state 175

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 739
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    declaration_specifier	go to state 360
    type_specifier	go to state 361
    declaration_qualifier_list	go to state 362
    type_qualifier_list	go to state 363
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 364
    sue_type_specifier_elaboration	go to state 365
    sue_type_specifier	go to state 366
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 367
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    parameter_type_list	go to state 176
    named_parameter_type_list	go to state 368
    parameter_list	go to state 369
    non_casting_parameter_declaration	go to state 370
    type_name	go to state 371
    postfixing_abstract_declarator	go to state 740
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 741
    postfix_abstract_declarator	go to state 742
    asterisk_or_ampersand	go to state 901
    unary_modifier	go to state 750
    scoping_name	go to state 75
    scope	go to state 76
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 380



state 749

    unary_abstract_declarator  ->  asterisk_or_ampersand .   (rule 626)
    unary_abstract_declarator  ->  asterisk_or_ampersand . abstract_declarator   (rule 628)
    unary_modifier  ->  asterisk_or_ampersand . type_qualifier_list   (rule 637)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 169
    '(' 	shift, and go to state 753
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '[' 	shift, and go to state 175

    $default	reduce using rule 626 (unary_abstract_declarator)

    type_qualifier_list	go to state 254
    type_qualifier	go to state 42
    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    abstract_declarator	go to state 746
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 749
    unary_modifier	go to state 750
    scoping_name	go to state 75
    scope	go to state 283
    tag_name	go to state 77



state 750

    unary_abstract_declarator  ->  unary_modifier .   (rule 627)
    unary_abstract_declarator  ->  unary_modifier . abstract_declarator   (rule 629)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 169
    '(' 	shift, and go to state 753
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '[' 	shift, and go to state 175

    $default	reduce using rule 627 (unary_abstract_declarator)

    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    abstract_declarator	go to state 747
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 749
    unary_modifier	go to state 750
    scoping_name	go to state 75
    scope	go to state 283
    tag_name	go to state 77



state 751

    primary_expression  ->  '(' comma_expression ')' .   (rule 16)

    $default	reduce using rule 16 (primary_expression)



state 752

    comma_expression  ->  comma_expression ',' . assignment_expression   (rule 169)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 902
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 753

    parameter_type_list  ->  '(' . ')' type_qualifier_list_opt   (rule 398)
    parameter_type_list  ->  '(' . type_name ')' type_qualifier_list_opt   (rule 399)
    parameter_type_list  ->  '(' . type_name initializer ')' type_qualifier_list_opt   (rule 400)
    parameter_type_list  ->  '(' . named_parameter_type_list ')' type_qualifier_list_opt   (rule 401)
    postfix_abstract_declarator  ->  '(' . unary_abstract_declarator ')'   (rule 630)
    postfix_abstract_declarator  ->  '(' . postfix_abstract_declarator ')'   (rule 631)
    postfix_abstract_declarator  ->  '(' . postfixing_abstract_declarator ')'   (rule 632)
    postfix_abstract_declarator  ->  '(' . unary_abstract_declarator ')' postfixing_abstract_declarator   (rule 633)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 704
    ELLIPSIS	shift, and go to state 329
    '(' 	shift, and go to state 753
    ')' 	shift, and go to state 331
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '[' 	shift, and go to state 175

    $default	reduce using rule 644 (@22)

    declaration_specifier	go to state 360
    type_specifier	go to state 361
    declaration_qualifier_list	go to state 362
    type_qualifier_list	go to state 363
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 364
    sue_type_specifier_elaboration	go to state 365
    sue_type_specifier	go to state 366
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 404
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    parameter_type_list	go to state 176
    named_parameter_type_list	go to state 368
    parameter_list	go to state 369
    non_casting_parameter_declaration	go to state 370
    type_name	go to state 371
    postfixing_abstract_declarator	go to state 740
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 741
    postfix_abstract_declarator	go to state 742
    asterisk_or_ampersand	go to state 749
    unary_modifier	go to state 750
    scoping_name	go to state 75
    scope	go to state 285
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 405



state 754

    postfix_expression  ->  basic_type_name '(' . assignment_expression ')'   (rule 77)
    parameter_type_list  ->  '(' . ')' type_qualifier_list_opt   (rule 398)
    parameter_type_list  ->  '(' . type_name ')' type_qualifier_list_opt   (rule 399)
    parameter_type_list  ->  '(' . type_name initializer ')' type_qualifier_list_opt   (rule 400)
    parameter_type_list  ->  '(' . named_parameter_type_list ')' type_qualifier_list_opt   (rule 401)
    postfix_abstract_declarator  ->  '(' . unary_abstract_declarator ')'   (rule 630)
    postfix_abstract_declarator  ->  '(' . postfix_abstract_declarator ')'   (rule 631)
    postfix_abstract_declarator  ->  '(' . postfixing_abstract_declarator ')'   (rule 632)
    postfix_abstract_declarator  ->  '(' . unary_abstract_declarator ')' postfixing_abstract_declarator   (rule 633)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 326
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    ELLIPSIS	shift, and go to state 329
    '(' 	shift, and go to state 900
    ')' 	shift, and go to state 331
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335
    '[' 	shift, and go to state 175

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 795
    declaration_specifier	go to state 360
    type_specifier	go to state 361
    declaration_qualifier_list	go to state 362
    type_qualifier_list	go to state 363
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 364
    sue_type_specifier_elaboration	go to state 365
    sue_type_specifier	go to state 366
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 367
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    parameter_type_list	go to state 176
    named_parameter_type_list	go to state 368
    parameter_list	go to state 369
    non_casting_parameter_declaration	go to state 370
    type_name	go to state 371
    postfixing_abstract_declarator	go to state 740
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 741
    postfix_abstract_declarator	go to state 742
    asterisk_or_ampersand	go to state 901
    unary_modifier	go to state 750
    scoping_name	go to state 75
    scope	go to state 76
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 380



state 755

    cast_expression  ->  '(' type_name ')' . cast_expression   (rule 115)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 903
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 507
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 756

    postfix_expression  ->  global_or_scoped_typedefname '(' . ')'   (rule 74)
    postfix_expression  ->  global_or_scoped_typedefname '(' . argument_expression_list ')'   (rule 76)
    parameter_type_list  ->  '(' . ')' type_qualifier_list_opt   (rule 398)
    parameter_type_list  ->  '(' . type_name ')' type_qualifier_list_opt   (rule 399)
    parameter_type_list  ->  '(' . type_name initializer ')' type_qualifier_list_opt   (rule 400)
    parameter_type_list  ->  '(' . named_parameter_type_list ')' type_qualifier_list_opt   (rule 401)
    postfix_abstract_declarator  ->  '(' . unary_abstract_declarator ')'   (rule 630)
    postfix_abstract_declarator  ->  '(' . postfix_abstract_declarator ')'   (rule 631)
    postfix_abstract_declarator  ->  '(' . postfixing_abstract_declarator ')'   (rule 632)
    postfix_abstract_declarator  ->  '(' . unary_abstract_declarator ')' postfixing_abstract_declarator   (rule 633)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 326
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    ELLIPSIS	shift, and go to state 329
    '(' 	shift, and go to state 900
    ')' 	shift, and go to state 806
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335
    '[' 	shift, and go to state 175

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 807
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    declaration_specifier	go to state 360
    type_specifier	go to state 361
    declaration_qualifier_list	go to state 362
    type_qualifier_list	go to state 363
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 364
    sue_type_specifier_elaboration	go to state 365
    sue_type_specifier	go to state 366
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 367
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    parameter_type_list	go to state 176
    named_parameter_type_list	go to state 368
    parameter_list	go to state 369
    non_casting_parameter_declaration	go to state 370
    type_name	go to state 371
    postfixing_abstract_declarator	go to state 740
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 741
    postfix_abstract_declarator	go to state 742
    asterisk_or_ampersand	go to state 901
    unary_modifier	go to state 750
    scoping_name	go to state 75
    scope	go to state 76
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 380



state 757

    postfix_expression  ->  postfix_expression '(' ')' .   (rule 65)

    $default	reduce using rule 65 (postfix_expression)



state 758

    postfix_expression  ->  postfix_expression '(' argument_expression_list . ')'   (rule 66)
    argument_expression_list  ->  argument_expression_list . ',' assignment_expression   (rule 84)

    ')' 	shift, and go to state 904
    ',' 	shift, and go to state 547



state 759

    postfix_expression  ->  postfix_expression '[' comma_expression . ']'   (rule 64)
    comma_expression  ->  comma_expression . ',' assignment_expression   (rule 169)

    ']' 	shift, and go to state 905
    ',' 	shift, and go to state 752



state 760

    postfix_expression  ->  postfix_expression @1 '.' . member_name   (rule 68)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 169
    '~' 	shift, and go to state 32

    operator_function_name	go to state 34
    member_name	go to state 906
    declaration_qualifier_list	go to state 907
    type_qualifier_list	go to state 908
    type_qualifier	go to state 42
    storage_class	go to state 50
    basic_type_name	go to state 909
    aggregate_key	go to state 155
    scoping_name	go to state 75
    scope	go to state 910
    tag_name	go to state 77
    scope_opt_identifier	go to state 911
    scope_opt_complex_name	go to state 912
    complex_name	go to state 83



state 761

    postfix_expression  ->  postfix_expression @2 ARROW . member_name   (rule 70)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 169
    '~' 	shift, and go to state 32

    operator_function_name	go to state 34
    member_name	go to state 913
    declaration_qualifier_list	go to state 907
    type_qualifier_list	go to state 908
    type_qualifier	go to state 42
    storage_class	go to state 50
    basic_type_name	go to state 909
    aggregate_key	go to state 155
    scoping_name	go to state 75
    scope	go to state 910
    tag_name	go to state 77
    scope_opt_identifier	go to state 911
    scope_opt_complex_name	go to state 912
    complex_name	go to state 83



state 762

    argument_expression_list  ->  argument_expression_list ',' assignment_expression .   (rule 84)

    $default	reduce using rule 84 (argument_expression_list)



state 763

    assignment_expression  ->  unary_expression assignment_operator assignment_expression .   (rule 156)

    $default	reduce using rule 156 (assignment_expression)



state 764

    argument_expression_list  ->  argument_expression_list . ',' assignment_expression   (rule 84)
    allocation_expression  ->  global_opt_scope_opt_operator_new '(' argument_expression_list . ')' '(' type_name ')' operator_new_initializer_opt   (rule 97)
    allocation_expression  ->  global_opt_scope_opt_operator_new '(' argument_expression_list . ')' operator_new_type   (rule 99)

    ')' 	shift, and go to state 914
    ',' 	shift, and go to state 547



state 765

    allocation_expression  ->  global_opt_scope_opt_operator_new '(' type_name . ')' operator_new_initializer_opt   (rule 96)

    ')' 	shift, and go to state 915



state 766

    operator_new_array_declarator  ->  '[' . ']'   (rule 108)
    operator_new_array_declarator  ->  '[' . comma_expression ']'   (rule 109)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335
    ']' 	shift, and go to state 916

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 917
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 767

    operator_new_type  ->  non_elaborating_type_specifier operator_new_declarator_opt . operator_new_initializer_opt   (rule 103)

    '(' 	shift, and go to state 918

    $default	reduce using rule 111 (operator_new_initializer_opt)

    operator_new_initializer_opt	go to state 919



state 768

    operator_new_declarator_opt  ->  operator_new_array_declarator .   (rule 105)
    operator_new_array_declarator  ->  operator_new_array_declarator . '[' comma_expression ']'   (rule 110)

    '[' 	shift, and go to state 920

    $default	reduce using rule 105 (operator_new_declarator_opt)



state 769

    operator_new_declarator_opt  ->  asterisk_or_ampersand . operator_new_declarator_opt   (rule 106)
    unary_modifier  ->  asterisk_or_ampersand . type_qualifier_list   (rule 637)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 169
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '[' 	shift, and go to state 766

    '*' 	[reduce using rule 104 (operator_new_declarator_opt)]
    '&' 	[reduce using rule 104 (operator_new_declarator_opt)]
    $default	reduce using rule 104 (operator_new_declarator_opt)

    operator_new_declarator_opt	go to state 921
    operator_new_array_declarator	go to state 768
    type_qualifier_list	go to state 254
    type_qualifier	go to state 42
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 769
    unary_modifier	go to state 770
    scoping_name	go to state 75
    scope	go to state 283
    tag_name	go to state 77



state 770

    operator_new_declarator_opt  ->  unary_modifier . operator_new_declarator_opt   (rule 107)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 169
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '[' 	shift, and go to state 766

    '*' 	[reduce using rule 104 (operator_new_declarator_opt)]
    '&' 	[reduce using rule 104 (operator_new_declarator_opt)]
    $default	reduce using rule 104 (operator_new_declarator_opt)

    operator_new_declarator_opt	go to state 922
    operator_new_array_declarator	go to state 768
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 769
    unary_modifier	go to state 770
    scoping_name	go to state 75
    scope	go to state 283
    tag_name	go to state 77



state 771

    operator_new_type  ->  type_qualifier_list operator_new_declarator_opt . operator_new_initializer_opt   (rule 102)

    '(' 	shift, and go to state 918

    $default	reduce using rule 111 (operator_new_initializer_opt)

    operator_new_initializer_opt	go to state 923



state 772

    deallocation_expression  ->  global_opt_scope_opt_delete '[' ']' . deallocation_expression   (rule 119)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 924
    global_opt_scope_opt_delete	go to state 346
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 773

    deallocation_expression  ->  global_opt_scope_opt_delete '[' comma_expression . ']' deallocation_expression   (rule 118)
    comma_expression  ->  comma_expression . ',' assignment_expression   (rule 169)

    ']' 	shift, and go to state 925
    ',' 	shift, and go to state 752



state 774

    point_member_expression  ->  point_member_expression DOTstar deallocation_expression .   (rule 123)

    $default	reduce using rule 123 (point_member_expression)



state 775

    point_member_expression  ->  point_member_expression ARROWstar deallocation_expression .   (rule 124)

    $default	reduce using rule 124 (point_member_expression)



state 776

    point_member_expression  ->  point_member_expression . DOTstar deallocation_expression   (rule 123)
    point_member_expression  ->  point_member_expression . ARROWstar deallocation_expression   (rule 124)
    multiplicative_expression  ->  multiplicative_expression '*' point_member_expression .   (rule 126)

    DOTstar	shift, and go to state 555
    ARROWstar	shift, and go to state 556

    $default	reduce using rule 126 (multiplicative_expression)



state 777

    point_member_expression  ->  point_member_expression . DOTstar deallocation_expression   (rule 123)
    point_member_expression  ->  point_member_expression . ARROWstar deallocation_expression   (rule 124)
    multiplicative_expression  ->  multiplicative_expression '/' point_member_expression .   (rule 127)

    DOTstar	shift, and go to state 555
    ARROWstar	shift, and go to state 556

    $default	reduce using rule 127 (multiplicative_expression)



state 778

    point_member_expression  ->  point_member_expression . DOTstar deallocation_expression   (rule 123)
    point_member_expression  ->  point_member_expression . ARROWstar deallocation_expression   (rule 124)
    multiplicative_expression  ->  multiplicative_expression '%' point_member_expression .   (rule 128)

    DOTstar	shift, and go to state 555
    ARROWstar	shift, and go to state 556

    $default	reduce using rule 128 (multiplicative_expression)



state 779

    multiplicative_expression  ->  multiplicative_expression . '*' point_member_expression   (rule 126)
    multiplicative_expression  ->  multiplicative_expression . '/' point_member_expression   (rule 127)
    multiplicative_expression  ->  multiplicative_expression . '%' point_member_expression   (rule 128)
    additive_expression  ->  additive_expression '+' multiplicative_expression .   (rule 130)

    '*' 	shift, and go to state 557
    '/' 	shift, and go to state 558
    '%' 	shift, and go to state 559

    $default	reduce using rule 130 (additive_expression)



state 780

    multiplicative_expression  ->  multiplicative_expression . '*' point_member_expression   (rule 126)
    multiplicative_expression  ->  multiplicative_expression . '/' point_member_expression   (rule 127)
    multiplicative_expression  ->  multiplicative_expression . '%' point_member_expression   (rule 128)
    additive_expression  ->  additive_expression '-' multiplicative_expression .   (rule 131)

    '*' 	shift, and go to state 557
    '/' 	shift, and go to state 558
    '%' 	shift, and go to state 559

    $default	reduce using rule 131 (additive_expression)



state 781

    additive_expression  ->  additive_expression . '+' multiplicative_expression   (rule 130)
    additive_expression  ->  additive_expression . '-' multiplicative_expression   (rule 131)
    shift_expression  ->  shift_expression LS additive_expression .   (rule 133)

    '+' 	shift, and go to state 560
    '-' 	shift, and go to state 561

    $default	reduce using rule 133 (shift_expression)



state 782

    additive_expression  ->  additive_expression . '+' multiplicative_expression   (rule 130)
    additive_expression  ->  additive_expression . '-' multiplicative_expression   (rule 131)
    shift_expression  ->  shift_expression RS additive_expression .   (rule 134)

    '+' 	shift, and go to state 560
    '-' 	shift, and go to state 561

    $default	reduce using rule 134 (shift_expression)



state 783

    shift_expression  ->  shift_expression . LS additive_expression   (rule 133)
    shift_expression  ->  shift_expression . RS additive_expression   (rule 134)
    relational_expression  ->  relational_expression LE shift_expression .   (rule 138)

    LS  	shift, and go to state 562
    RS  	shift, and go to state 563

    $default	reduce using rule 138 (relational_expression)



state 784

    shift_expression  ->  shift_expression . LS additive_expression   (rule 133)
    shift_expression  ->  shift_expression . RS additive_expression   (rule 134)
    relational_expression  ->  relational_expression GE shift_expression .   (rule 139)

    LS  	shift, and go to state 562
    RS  	shift, and go to state 563

    $default	reduce using rule 139 (relational_expression)



state 785

    shift_expression  ->  shift_expression . LS additive_expression   (rule 133)
    shift_expression  ->  shift_expression . RS additive_expression   (rule 134)
    relational_expression  ->  relational_expression '<' shift_expression .   (rule 136)

    LS  	shift, and go to state 562
    RS  	shift, and go to state 563

    $default	reduce using rule 136 (relational_expression)



state 786

    shift_expression  ->  shift_expression . LS additive_expression   (rule 133)
    shift_expression  ->  shift_expression . RS additive_expression   (rule 134)
    relational_expression  ->  relational_expression '>' shift_expression .   (rule 137)

    LS  	shift, and go to state 562
    RS  	shift, and go to state 563

    $default	reduce using rule 137 (relational_expression)



state 787

    relational_expression  ->  relational_expression . '<' shift_expression   (rule 136)
    relational_expression  ->  relational_expression . '>' shift_expression   (rule 137)
    relational_expression  ->  relational_expression . LE shift_expression   (rule 138)
    relational_expression  ->  relational_expression . GE shift_expression   (rule 139)
    equality_expression  ->  equality_expression EQ relational_expression .   (rule 141)

    LE  	shift, and go to state 564
    GE  	shift, and go to state 565
    '<' 	shift, and go to state 566
    '>' 	shift, and go to state 567

    $default	reduce using rule 141 (equality_expression)



state 788

    relational_expression  ->  relational_expression . '<' shift_expression   (rule 136)
    relational_expression  ->  relational_expression . '>' shift_expression   (rule 137)
    relational_expression  ->  relational_expression . LE shift_expression   (rule 138)
    relational_expression  ->  relational_expression . GE shift_expression   (rule 139)
    equality_expression  ->  equality_expression NE relational_expression .   (rule 142)

    LE  	shift, and go to state 564
    GE  	shift, and go to state 565
    '<' 	shift, and go to state 566
    '>' 	shift, and go to state 567

    $default	reduce using rule 142 (equality_expression)



state 789

    equality_expression  ->  equality_expression . EQ relational_expression   (rule 141)
    equality_expression  ->  equality_expression . NE relational_expression   (rule 142)
    AND_expression  ->  AND_expression '&' equality_expression .   (rule 144)

    EQ  	shift, and go to state 568
    NE  	shift, and go to state 569

    $default	reduce using rule 144 (AND_expression)



state 790

    AND_expression  ->  AND_expression . '&' equality_expression   (rule 144)
    exclusive_OR_expression  ->  exclusive_OR_expression '^' AND_expression .   (rule 146)

    '&' 	shift, and go to state 570

    $default	reduce using rule 146 (exclusive_OR_expression)



state 791

    exclusive_OR_expression  ->  exclusive_OR_expression . '^' AND_expression   (rule 146)
    inclusive_OR_expression  ->  inclusive_OR_expression '|' exclusive_OR_expression .   (rule 148)

    '^' 	shift, and go to state 571

    $default	reduce using rule 148 (inclusive_OR_expression)



state 792

    inclusive_OR_expression  ->  inclusive_OR_expression . '|' exclusive_OR_expression   (rule 148)
    logical_AND_expression  ->  logical_AND_expression ANDAND inclusive_OR_expression .   (rule 150)

    '|' 	shift, and go to state 572

    $default	reduce using rule 150 (logical_AND_expression)



state 793

    logical_AND_expression  ->  logical_AND_expression . ANDAND inclusive_OR_expression   (rule 150)
    logical_OR_expression  ->  logical_OR_expression OROR logical_AND_expression .   (rule 152)

    ANDAND	shift, and go to state 573

    $default	reduce using rule 152 (logical_OR_expression)



state 794

    conditional_expression  ->  logical_OR_expression '?' comma_expression . ':' conditional_expression   (rule 154)
    comma_expression  ->  comma_expression . ',' assignment_expression   (rule 169)

    ',' 	shift, and go to state 752
    ':' 	shift, and go to state 926



state 795

    postfix_expression  ->  basic_type_name '(' assignment_expression . ')'   (rule 77)

    ')' 	shift, and go to state 927



state 796

    parameter_type_list  ->  '(' named_parameter_type_list ')' type_qualifier_list_opt .   (rule 401)

    $default	reduce using rule 401 (parameter_type_list)



state 797

    comma_opt_ellipsis  ->  ',' ELLIPSIS .   (rule 412)

    $default	reduce using rule 412 (comma_opt_ellipsis)



state 798

    parameter_list  ->  parameter_list ',' parameter_declaration .   (rule 417)

    $default	reduce using rule 417 (parameter_list)



state 799

    parameter_declaration  ->  non_casting_parameter_declaration .   (rule 420)
    parameter_declaration  ->  non_casting_parameter_declaration . initializer   (rule 421)

    '=' 	shift, and go to state 490

    $default	reduce using rule 420 (parameter_declaration)

    initializer	go to state 928



state 800

    parameter_declaration  ->  type_name .   (rule 418)
    parameter_declaration  ->  type_name . initializer   (rule 419)

    '=' 	shift, and go to state 490

    $default	reduce using rule 418 (parameter_declaration)

    initializer	go to state 929



state 801

    parameter_type_list  ->  '(' type_name ')' type_qualifier_list_opt .   (rule 399)

    $default	reduce using rule 399 (parameter_type_list)



state 802

    parameter_list  ->  type_name ',' parameter_declaration .   (rule 415)

    $default	reduce using rule 415 (parameter_list)



state 803

    parameter_type_list  ->  '(' type_name initializer ')' . type_qualifier_list_opt   (rule 400)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 61 (type_qualifier_list_opt)

    type_qualifier_list_opt	go to state 930
    type_qualifier_list	go to state 460
    type_qualifier	go to state 42



state 804

    comma_opt_ellipsis  ->  ',' . ELLIPSIS   (rule 412)
    parameter_list  ->  type_name initializer ',' . parameter_declaration   (rule 416)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 704
    ELLIPSIS	shift, and go to state 797

    $default	reduce using rule 644 (@22)

    declaration_specifier	go to state 360
    type_specifier	go to state 361
    declaration_qualifier_list	go to state 362
    type_qualifier_list	go to state 363
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 364
    sue_type_specifier_elaboration	go to state 365
    sue_type_specifier	go to state 366
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 404
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    parameter_declaration	go to state 931
    non_casting_parameter_declaration	go to state 799
    type_name	go to state 800
    scoping_name	go to state 75
    scope	go to state 143
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 405



state 805

    named_parameter_type_list  ->  type_name initializer comma_opt_ellipsis .   (rule 409)

    $default	reduce using rule 409 (named_parameter_type_list)



state 806

    postfix_expression  ->  global_or_scoped_typedefname '(' ')' .   (rule 74)
    parameter_type_list  ->  '(' ')' . type_qualifier_list_opt   (rule 398)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    ELLIPSIS	reduce using rule 61 (type_qualifier_list_opt)
    ')' 	reduce using rule 61 (type_qualifier_list_opt)
    ')' 	[reduce using rule 74 (postfix_expression)]
    ',' 	reduce using rule 61 (type_qualifier_list_opt)
    ',' 	[reduce using rule 74 (postfix_expression)]
    '=' 	reduce using rule 61 (type_qualifier_list_opt)
    '=' 	[reduce using rule 74 (postfix_expression)]
    $default	reduce using rule 74 (postfix_expression)

    type_qualifier_list_opt	go to state 533
    type_qualifier_list	go to state 460
    type_qualifier	go to state 42



state 807

    postfix_expression  ->  global_or_scoped_typedefname '(' argument_expression_list . ')'   (rule 76)
    argument_expression_list  ->  argument_expression_list . ',' assignment_expression   (rule 84)

    ')' 	shift, and go to state 932
    ',' 	shift, and go to state 547



state 808

    postfix_expression  ->  TYPEDEFname '(' ')' .   (rule 73)

    $default	reduce using rule 73 (postfix_expression)



state 809

    postfix_expression  ->  global_or_scoped_typedefname '(' ')' .   (rule 74)

    $default	reduce using rule 74 (postfix_expression)



state 810

    array_abstract_declarator  ->  array_abstract_declarator '[' constant_expression ']' .   (rule 625)

    $default	reduce using rule 625 (array_abstract_declarator)



state 811

    argument_expression_list  ->  argument_expression_list . ',' assignment_expression   (rule 84)
    nonunary_constructed_identifier_declarator  ->  paren_identifier_declarator '(' argument_expression_list . ')'   (rule 223)

    ')' 	shift, and go to state 933
    ',' 	shift, and go to state 547



state 812

    default_declaring_list  ->  default_declaring_list ',' identifier_declarator @5 initializer_opt .   (rule 183)

    $default	reduce using rule 183 (default_declaring_list)



state 813

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator   (rule 588)
    paren_typedef_declarator  ->  asterisk_or_ampersand '(' . simple_paren_typedef_declarator ')'   (rule 590)
    paren_typedef_declarator  ->  asterisk_or_ampersand '(' . TYPEDEFname ')'   (rule 592)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')'   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')'   (rule 597)
    postfix_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')'   (rule 598)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator   (rule 599)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 718
    '(' 	shift, and go to state 625
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 620
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    clean_typedef_declarator	go to state 477
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 478
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 719
    unary_identifier_declarator	go to state 171
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 626
    unary_modifier	go to state 627
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 814

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator   (rule 588)
    paren_typedef_declarator  ->  unary_modifier '(' . simple_paren_typedef_declarator ')'   (rule 591)
    paren_typedef_declarator  ->  unary_modifier '(' . TYPEDEFname ')'   (rule 593)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')'   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')'   (rule 597)
    postfix_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')'   (rule 598)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator   (rule 599)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 720
    '(' 	shift, and go to state 625
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 620
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    clean_typedef_declarator	go to state 477
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 478
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 721
    unary_identifier_declarator	go to state 171
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 626
    unary_modifier	go to state 627
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 815

    declaring_list  ->  declaring_list ',' declarator @11 initializer_opt .   (rule 198)

    $default	reduce using rule 198 (declaring_list)



state 816

    constructor_init  ->  IDENTIFIER '(' . argument_expression_list ')'   (rule 568)
    constructor_init  ->  IDENTIFIER '(' . ')'   (rule 569)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    ')' 	shift, and go to state 934
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 935
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 817

    constructor_init  ->  TYPEDEFname '(' . argument_expression_list ')'   (rule 570)
    constructor_init  ->  TYPEDEFname '(' . ')'   (rule 571)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    ')' 	shift, and go to state 936
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 937
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 818

    constructor_init  ->  '(' ')' .   (rule 575)

    $default	reduce using rule 575 (constructor_init)



state 819

    argument_expression_list  ->  argument_expression_list . ',' assignment_expression   (rule 84)
    constructor_init  ->  '(' argument_expression_list . ')'   (rule 574)

    ')' 	shift, and go to state 938
    ',' 	shift, and go to state 547



state 820

    constructor_init  ->  global_or_scoped_typedefname '(' . argument_expression_list ')'   (rule 572)
    constructor_init  ->  global_or_scoped_typedefname '(' . ')'   (rule 573)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    ')' 	shift, and go to state 939
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 940
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 821

    constructor_init_list  ->  constructor_init_list ',' constructor_init .   (rule 567)

    $default	reduce using rule 567 (constructor_init_list)



state 822

    parent_class  ->  VIRTUAL access_specifier_opt global_opt_scope_opt_typedefname .   (rule 308)

    $default	reduce using rule 308 (parent_class)



state 823

    derivation_list  ->  derivation_list ',' parent_class .   (rule 306)

    $default	reduce using rule 306 (derivation_list)



state 824

    parent_class  ->  access_specifier virtual_opt global_opt_scope_opt_typedefname .   (rule 309)

    $default	reduce using rule 309 (parent_class)



state 825

    typedef_declaration_specifier  ->  TYPEDEFname . storage_class   (rule 267)
    typedef_type_specifier  ->  TYPEDEFname . type_qualifier   (rule 272)
    member_declaring_list  ->  TYPEDEFname . bit_field_declarator   (rule 345)
    member_conflict_declaring_item  ->  TYPEDEFname . identifier_declarator member_pure_opt   (rule 349)
    member_conflict_declaring_item  ->  TYPEDEFname . parameter_typedef_declarator member_pure_opt   (rule 350)
    member_conflict_declaring_item  ->  TYPEDEFname . simple_paren_typedef_declarator member_pure_opt   (rule 351)
    member_conflict_paren_declaring_item  ->  TYPEDEFname . asterisk_or_ampersand '(' simple_paren_typedef_declarator ')' member_pure_opt   (rule 356)
    member_conflict_paren_declaring_item  ->  TYPEDEFname . unary_modifier '(' simple_paren_typedef_declarator ')' member_pure_opt   (rule 357)
    member_conflict_paren_declaring_item  ->  TYPEDEFname . asterisk_or_ampersand '(' TYPEDEFname ')' member_pure_opt   (rule 358)
    member_conflict_paren_declaring_item  ->  TYPEDEFname . unary_modifier '(' TYPEDEFname ')' member_pure_opt   (rule 359)
    member_conflict_paren_declaring_item  ->  TYPEDEFname . asterisk_or_ampersand paren_typedef_declarator member_pure_opt   (rule 360)
    member_conflict_paren_declaring_item  ->  TYPEDEFname . unary_modifier paren_typedef_declarator member_pure_opt   (rule 361)
    member_conflict_paren_postfix_declaring_item  ->  TYPEDEFname . '(' paren_typedef_declarator ')' member_pure_opt   (rule 369)
    member_conflict_paren_postfix_declaring_item  ->  TYPEDEFname . '(' simple_paren_typedef_declarator postfixing_abstract_declarator ')' member_pure_opt   (rule 370)
    member_conflict_paren_postfix_declaring_item  ->  TYPEDEFname . '(' TYPEDEFname postfixing_abstract_declarator ')' member_pure_opt   (rule 371)
    member_conflict_paren_postfix_declaring_item  ->  TYPEDEFname . '(' paren_typedef_declarator ')' postfixing_abstract_declarator member_pure_opt   (rule 372)
    new_function_definition  ->  TYPEDEFname . declarator compound_statement   (rule 504)
    constructor_function_in_class  ->  TYPEDEFname . constructor_parameter_list_and_body   (rule 531)
    tag_name  ->  TYPEDEFname .   (rule 643)

    AUTO	shift, and go to state 2
    STRUCT	shift, and go to state 5
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 941
    '(' 	shift, and go to state 942
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    ':' 	shift, and go to state 943

    $default	reduce using rule 643 (tag_name)

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    type_qualifier	go to state 153
    storage_class	go to state 154
    aggregate_key	go to state 155
    bit_field_declarator	go to state 944
    bit_field_identifier_declarator	go to state 945
    constructor_parameter_list_and_body	go to state 946
    constructor_conflicting_parameter_list_and_body	go to state 947
    constructor_conflicting_typedef_declarator	go to state 948
    declarator	go to state 949
    typedef_declarator	go to state 157
    parameter_typedef_declarator	go to state 950
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 161
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 951
    identifier_declarator	go to state 952
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 953
    unary_modifier	go to state 954
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 826

    aggregate_name_elaboration  ->  aggregate_name derivation_opt '{' member_declaration_list_opt '}' .   (rule 297)

    $default	reduce using rule 297 (aggregate_name_elaboration)



state 827

    member_declaring_list  ->  declaration_specifier . bit_field_declarator   (rule 347)
    member_conflict_declaring_item  ->  declaration_specifier . identifier_declarator member_pure_opt   (rule 352)
    member_conflict_declaring_item  ->  declaration_specifier . parameter_typedef_declarator member_pure_opt   (rule 353)
    member_conflict_declaring_item  ->  declaration_specifier . simple_paren_typedef_declarator member_pure_opt   (rule 354)
    member_conflict_paren_declaring_item  ->  declaration_specifier . asterisk_or_ampersand '(' simple_paren_typedef_declarator ')' member_pure_opt   (rule 362)
    member_conflict_paren_declaring_item  ->  declaration_specifier . unary_modifier '(' simple_paren_typedef_declarator ')' member_pure_opt   (rule 363)
    member_conflict_paren_declaring_item  ->  declaration_specifier . asterisk_or_ampersand '(' TYPEDEFname ')' member_pure_opt   (rule 364)
    member_conflict_paren_declaring_item  ->  declaration_specifier . unary_modifier '(' TYPEDEFname ')' member_pure_opt   (rule 365)
    member_conflict_paren_declaring_item  ->  declaration_specifier . asterisk_or_ampersand paren_typedef_declarator member_pure_opt   (rule 366)
    member_conflict_paren_declaring_item  ->  declaration_specifier . unary_modifier paren_typedef_declarator member_pure_opt   (rule 367)
    member_conflict_paren_postfix_declaring_item  ->  declaration_specifier . '(' paren_typedef_declarator ')' member_pure_opt   (rule 373)
    member_conflict_paren_postfix_declaring_item  ->  declaration_specifier . '(' simple_paren_typedef_declarator postfixing_abstract_declarator ')' member_pure_opt   (rule 374)
    member_conflict_paren_postfix_declaring_item  ->  declaration_specifier . '(' TYPEDEFname postfixing_abstract_declarator ')' member_pure_opt   (rule 375)
    member_conflict_paren_postfix_declaring_item  ->  declaration_specifier . '(' paren_typedef_declarator ')' postfixing_abstract_declarator member_pure_opt   (rule 376)
    new_function_definition  ->  declaration_specifier . declarator compound_statement   (rule 501)
    constructor_function_in_class  ->  declaration_specifier . constructor_parameter_list_and_body   (rule 530)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 941
    '(' 	shift, and go to state 955
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    ':' 	shift, and go to state 943

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    bit_field_declarator	go to state 956
    bit_field_identifier_declarator	go to state 945
    constructor_parameter_list_and_body	go to state 957
    constructor_conflicting_parameter_list_and_body	go to state 947
    constructor_conflicting_typedef_declarator	go to state 948
    declarator	go to state 958
    typedef_declarator	go to state 157
    parameter_typedef_declarator	go to state 959
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 161
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 960
    identifier_declarator	go to state 961
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 962
    unary_modifier	go to state 963
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 828

    member_declaring_list  ->  type_specifier . declarator member_pure_opt   (rule 338)
    member_declaring_list  ->  type_specifier . bit_field_declarator   (rule 343)
    new_function_definition  ->  type_specifier . declarator compound_statement   (rule 502)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 941
    '(' 	shift, and go to state 625
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    ':' 	shift, and go to state 943

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    bit_field_declarator	go to state 964
    bit_field_identifier_declarator	go to state 945
    declarator	go to state 965
    typedef_declarator	go to state 157
    parameter_typedef_declarator	go to state 158
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 161
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 966
    identifier_declarator	go to state 967
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 626
    unary_modifier	go to state 627
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 829

    declaration_qualifier_list  ->  declaration_qualifier_list . declaration_qualifier   (rule 236)
    basic_declaration_specifier  ->  declaration_qualifier_list . basic_type_name   (rule 243)
    sue_declaration_specifier  ->  declaration_qualifier_list . elaborated_type_name   (rule 253)
    sue_declaration_specifier  ->  declaration_qualifier_list . elaborated_type_name_elaboration   (rule 254)
    typedef_declaration_specifier  ->  declaration_qualifier_list . TYPEDEFname   (rule 264)
    typedef_declaration_specifier  ->  declaration_qualifier_list . global_or_scoped_typedefname   (rule 265)
    member_default_declaring_list  ->  declaration_qualifier_list . identifier_declarator member_pure_opt   (rule 333)
    member_default_declaring_list  ->  declaration_qualifier_list . bit_field_identifier_declarator   (rule 336)
    new_function_definition  ->  declaration_qualifier_list . identifier_declarator compound_statement   (rule 506)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 191
    '(' 	shift, and go to state 619
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    ':' 	shift, and go to state 943

    $default	reduce using rule 644 (@22)

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    declaration_qualifier	go to state 195
    type_qualifier	go to state 196
    storage_class	go to state 197
    basic_type_name	go to state 198
    elaborated_type_name_elaboration	go to state 199
    elaborated_type_name	go to state 200
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    bit_field_identifier_declarator	go to state 968
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    identifier_declarator	go to state 969
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 621
    unary_modifier	go to state 622
    scoping_name	go to state 75
    scope	go to state 76
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 205



state 830

    declaration_qualifier_list  ->  type_qualifier_list . storage_class   (rule 235)
    type_qualifier_list  ->  type_qualifier_list . type_qualifier   (rule 238)
    basic_type_specifier  ->  type_qualifier_list . basic_type_name   (rule 248)
    sue_type_specifier_elaboration  ->  type_qualifier_list . elaborated_type_name_elaboration   (rule 259)
    sue_type_specifier  ->  type_qualifier_list . elaborated_type_name   (rule 262)
    typedef_type_specifier  ->  type_qualifier_list . TYPEDEFname   (rule 270)
    typedef_type_specifier  ->  type_qualifier_list . global_or_scoped_typedefname   (rule 271)
    member_default_declaring_list  ->  type_qualifier_list . identifier_declarator member_pure_opt   (rule 332)
    member_default_declaring_list  ->  type_qualifier_list . bit_field_identifier_declarator   (rule 335)
    new_function_definition  ->  type_qualifier_list . identifier_declarator compound_statement   (rule 507)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 206
    '(' 	shift, and go to state 619
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    ':' 	shift, and go to state 943

    $default	reduce using rule 644 (@22)

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    type_qualifier	go to state 208
    storage_class	go to state 209
    basic_type_name	go to state 210
    elaborated_type_name_elaboration	go to state 211
    elaborated_type_name	go to state 212
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    bit_field_identifier_declarator	go to state 970
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    identifier_declarator	go to state 971
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 621
    unary_modifier	go to state 622
    scoping_name	go to state 75
    scope	go to state 76
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 215



state 831

    declaration_specifier  ->  sue_declaration_specifier .   (rule 228)
    sue_declaration_specifier  ->  sue_declaration_specifier . declaration_qualifier   (rule 257)
    member_declaration  ->  sue_declaration_specifier . ';'   (rule 331)

    AUTO	shift, and go to state 2
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    ';' 	shift, and go to state 972

    $default	reduce using rule 228 (declaration_specifier)

    declaration_qualifier	go to state 222
    type_qualifier	go to state 196
    storage_class	go to state 197



state 832

    type_specifier  ->  sue_type_specifier_elaboration .   (rule 232)
    sue_declaration_specifier  ->  sue_type_specifier_elaboration . storage_class   (rule 256)
    sue_type_specifier_elaboration  ->  sue_type_specifier_elaboration . type_qualifier   (rule 260)
    member_declaration  ->  sue_type_specifier_elaboration . ';'   (rule 328)

    AUTO	shift, and go to state 2
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    ';' 	shift, and go to state 973

    $default	reduce using rule 232 (type_specifier)

    type_qualifier	go to state 224
    storage_class	go to state 225



state 833

    type_specifier  ->  sue_type_specifier .   (rule 231)
    sue_declaration_specifier  ->  sue_type_specifier . storage_class   (rule 255)
    sue_type_specifier  ->  sue_type_specifier . type_qualifier   (rule 263)
    member_declaration  ->  sue_type_specifier . ';'   (rule 327)

    AUTO	shift, and go to state 2
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    ';' 	shift, and go to state 974

    $default	reduce using rule 231 (type_specifier)

    type_qualifier	go to state 227
    storage_class	go to state 228



state 834

    declaration_specifier  ->  typedef_declaration_specifier .   (rule 229)
    typedef_declaration_specifier  ->  typedef_declaration_specifier . declaration_qualifier   (rule 269)
    member_declaration  ->  typedef_declaration_specifier . ';'   (rule 330)

    AUTO	shift, and go to state 2
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    ';' 	shift, and go to state 975

    $default	reduce using rule 229 (declaration_specifier)

    declaration_qualifier	go to state 229
    type_qualifier	go to state 196
    storage_class	go to state 197



state 835

    basic_declaration_specifier  ->  basic_type_name . storage_class   (rule 245)
    basic_type_specifier  ->  basic_type_name . basic_type_name   (rule 249)
    basic_type_specifier  ->  basic_type_name . type_qualifier   (rule 250)
    member_declaring_list  ->  basic_type_name . declarator member_pure_opt   (rule 339)
    member_declaring_list  ->  basic_type_name . bit_field_declarator   (rule 344)
    new_function_definition  ->  basic_type_name . declarator compound_statement   (rule 503)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 941
    '(' 	shift, and go to state 625
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    ':' 	shift, and go to state 943

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    type_qualifier	go to state 233
    storage_class	go to state 234
    basic_type_name	go to state 235
    aggregate_key	go to state 155
    bit_field_declarator	go to state 976
    bit_field_identifier_declarator	go to state 945
    declarator	go to state 977
    typedef_declarator	go to state 157
    parameter_typedef_declarator	go to state 158
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 161
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 966
    identifier_declarator	go to state 967
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 626
    unary_modifier	go to state 627
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 836

    member_declaration  ->  access_specifier . ':'   (rule 324)

    ':' 	shift, and go to state 978



state 837

    member_declaration_list_opt  ->  member_declaration_list_opt member_declaration .   (rule 321)

    $default	reduce using rule 321 (member_declaration_list_opt)



state 838

    member_declaration  ->  member_default_declaring_list . ';'   (rule 323)
    member_default_declaring_list  ->  member_default_declaring_list . ',' identifier_declarator member_pure_opt   (rule 334)
    member_default_declaring_list  ->  member_default_declaring_list . ',' bit_field_identifier_declarator   (rule 337)

    ',' 	shift, and go to state 979
    ';' 	shift, and go to state 980



state 839

    member_declaration  ->  member_declaring_list . ';'   (rule 322)
    member_declaring_list  ->  member_declaring_list . ',' declarator member_pure_opt   (rule 342)
    member_declaring_list  ->  member_declaring_list . ',' bit_field_declarator   (rule 348)

    ',' 	shift, and go to state 981
    ';' 	shift, and go to state 982



state 840

    member_declaring_list  ->  member_conflict_declaring_item .   (rule 341)

    $default	reduce using rule 341 (member_declaring_list)



state 841

    member_conflict_declaring_item  ->  member_conflict_paren_declaring_item .   (rule 355)

    $default	reduce using rule 355 (member_conflict_declaring_item)



state 842

    member_conflict_paren_declaring_item  ->  member_conflict_paren_postfix_declaring_item .   (rule 368)

    $default	reduce using rule 368 (member_conflict_paren_declaring_item)



state 843

    member_declaration  ->  new_function_definition .   (rule 325)

    $default	reduce using rule 325 (member_declaration)



state 844

    member_declaration  ->  constructor_function_in_class .   (rule 326)

    $default	reduce using rule 326 (member_declaration)



state 845

    member_declaration  ->  identifier_declarator . ';'   (rule 329)
    new_function_definition  ->  identifier_declarator . compound_statement   (rule 500)

    ';' 	shift, and go to state 983
    '{' 	shift, and go to state 251

    compound_statement	go to state 252



state 846

    typedef_declaration_specifier  ->  global_or_scoped_typedefname . storage_class   (rule 268)
    typedef_type_specifier  ->  global_or_scoped_typedefname . type_qualifier   (rule 273)
    member_declaring_list  ->  global_or_scoped_typedefname . declarator member_pure_opt   (rule 340)
    member_declaring_list  ->  global_or_scoped_typedefname . bit_field_declarator   (rule 346)
    new_function_definition  ->  global_or_scoped_typedefname . declarator compound_statement   (rule 505)

    AUTO	shift, and go to state 2
    STRUCT	shift, and go to state 5
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 941
    '(' 	shift, and go to state 625
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    ':' 	shift, and go to state 943

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    type_qualifier	go to state 273
    storage_class	go to state 274
    aggregate_key	go to state 155
    bit_field_declarator	go to state 984
    bit_field_identifier_declarator	go to state 945
    declarator	go to state 985
    typedef_declarator	go to state 157
    parameter_typedef_declarator	go to state 158
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 161
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 966
    identifier_declarator	go to state 967
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 626
    unary_modifier	go to state 627
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 847

    aggregate_name_elaboration  ->  aggregate_key derivation_opt '{' member_declaration_list_opt '}' .   (rule 298)

    $default	reduce using rule 298 (aggregate_name_elaboration)



state 848

    enumerator_list_no_trailing_comma  ->  enumerator_list_no_trailing_comma ',' enumerator_name . enumerator_value_opt   (rule 393)

    '=' 	shift, and go to state 658

    $default	reduce using rule 396 (enumerator_value_opt)

    enumerator_value_opt	go to state 986



state 849

    enumerator_value_opt  ->  '=' constant_expression .   (rule 397)

    $default	reduce using rule 397 (enumerator_value_opt)



state 850

    jump_statement  ->  BREAK ';' .   (rule 481)

    $default	reduce using rule 481 (jump_statement)



state 851

    selection_statement  ->  SWITCH '(' . comma_expression ')' statement   (rule 474)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 987
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 852

    labeled_statement  ->  CASE constant_expression . ':' statement   (rule 464)

    ':' 	shift, and go to state 988



state 853

    jump_statement  ->  RETURN comma_expression_opt . ';'   (rule 482)

    ';' 	shift, and go to state 989



state 854

    jump_statement  ->  CONTINUE ';' .   (rule 480)

    $default	reduce using rule 480 (jump_statement)



state 855

    iteration_statement  ->  FOR '(' . comma_expression_opt ';' comma_expression_opt ';' comma_expression_opt ')' statement   (rule 477)
    iteration_statement  ->  FOR '(' . declaration comma_expression_opt ';' comma_expression_opt ')' statement   (rule 478)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 990
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    CLCL	reduce using rule 644 (@22)
    $default	reduce using rule 171 (comma_expression_opt)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 676
    comma_expression_opt	go to state 991
    declaration	go to state 992
    default_declaring_list	go to state 36
    declaring_list	go to state 37
    declaration_specifier	go to state 450
    type_specifier	go to state 451
    declaration_qualifier_list	go to state 452
    type_qualifier_list	go to state 453
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 45
    sue_type_specifier_elaboration	go to state 46
    sue_type_specifier	go to state 47
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 679
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 373
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 688



state 856

    labeled_statement  ->  DEFAULT ':' . statement   (rule 465)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    BREAK	shift, and go to state 662
    LONG	shift, and go to state 6
    SWITCH	shift, and go to state 663
    CASE	shift, and go to state 664
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    RETURN	shift, and go to state 665
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    CONTINUE	shift, and go to state 666
    FOR 	shift, and go to state 667
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    DEFAULT	shift, and go to state 668
    GOTO	shift, and go to state 669
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    DO  	shift, and go to state 670
    IF  	shift, and go to state 671
    STATIC	shift, and go to state 20
    WHILE	shift, and go to state 672
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 673
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 674
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335
    '{' 	shift, and go to state 251

    CLCL	reduce using rule 644 (@22)
    $default	reduce using rule 171 (comma_expression_opt)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 676
    comma_expression_opt	go to state 677
    declaration	go to state 678
    default_declaring_list	go to state 36
    declaring_list	go to state 37
    declaration_specifier	go to state 450
    type_specifier	go to state 451
    declaration_qualifier_list	go to state 452
    type_qualifier_list	go to state 453
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 45
    sue_type_specifier_elaboration	go to state 46
    sue_type_specifier	go to state 47
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 679
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    statement	go to state 993
    labeled_statement	go to state 681
    compound_statement	go to state 682
    expression_statement	go to state 683
    selection_statement	go to state 684
    iteration_statement	go to state 685
    jump_statement	go to state 686
    label	go to state 687
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 373
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 688



state 857

    label  ->  IDENTIFIER .   (rule 483)

    $default	reduce using rule 483 (label)



state 858

    label  ->  TYPEDEFname .   (rule 484)

    $default	reduce using rule 484 (label)



state 859

    jump_statement  ->  GOTO label . ';'   (rule 479)

    ';' 	shift, and go to state 994



state 860

    iteration_statement  ->  DO statement . WHILE '(' comma_expression ')' ';'   (rule 476)

    WHILE	shift, and go to state 995



state 861

    selection_statement  ->  IF '(' . comma_expression ')' statement   (rule 472)
    selection_statement  ->  IF '(' . comma_expression ')' statement ELSE statement   (rule 473)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 996
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 862

    iteration_statement  ->  WHILE '(' . comma_expression_opt ')' statement   (rule 475)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    CLCL	reduce using rule 644 (@22)
    $default	reduce using rule 171 (comma_expression_opt)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 676
    comma_expression_opt	go to state 997
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 863

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    postfix_expression  ->  TYPEDEFname '(' . ')'   (rule 73)
    postfix_expression  ->  TYPEDEFname '(' . argument_expression_list ')'   (rule 75)
    constructed_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' '(' argument_expression_list ')'   (rule 212)
    constructed_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 213)
    constructed_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')' '(' argument_expression_list ')'   (rule 214)
    constructed_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')' '(' argument_expression_list ')'   (rule 215)
    constructed_parameter_typedef_declarator  ->  '(' . clean_typedef_declarator ')' '(' argument_expression_list ')'   (rule 218)
    constructed_parameter_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 219)
    nonunary_constructed_identifier_declarator  ->  '(' . unary_identifier_declarator ')' '(' argument_expression_list ')'   (rule 225)
    nonunary_constructed_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 226)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator   (rule 588)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')'   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')'   (rule 597)
    postfix_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')'   (rule 598)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator   (rule 599)
    simple_paren_typedef_declarator  ->  '(' . TYPEDEFname ')'   (rule 600)
    simple_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator ')'   (rule 601)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 998
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 999
    ')' 	shift, and go to state 808
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    paren_identifier_declarator	go to state 620
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 739
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    clean_typedef_declarator	go to state 290
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 291
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 292
    unary_identifier_declarator	go to state 293
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 1000
    unary_modifier	go to state 627
    scoping_name	go to state 75
    scope	go to state 899
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 744
    scope_opt_complex_name	go to state 745
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 864

    expression_statement  ->  comma_expression_opt ';' .   (rule 471)

    $default	reduce using rule 471 (expression_statement)



state 865

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    postfix_expression  ->  basic_type_name '(' . assignment_expression ')'   (rule 77)
    constructed_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' '(' argument_expression_list ')'   (rule 212)
    constructed_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 213)
    constructed_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')' '(' argument_expression_list ')'   (rule 214)
    constructed_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')' '(' argument_expression_list ')'   (rule 215)
    constructed_parameter_typedef_declarator  ->  '(' . clean_typedef_declarator ')' '(' argument_expression_list ')'   (rule 218)
    constructed_parameter_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 219)
    nonunary_constructed_identifier_declarator  ->  '(' . unary_identifier_declarator ')' '(' argument_expression_list ')'   (rule 225)
    nonunary_constructed_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 226)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator   (rule 588)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')'   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')'   (rule 597)
    postfix_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')'   (rule 598)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator   (rule 599)
    simple_paren_typedef_declarator  ->  '(' . TYPEDEFname ')'   (rule 600)
    simple_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator ')'   (rule 601)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 998
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 999
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    paren_identifier_declarator	go to state 620
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 795
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    clean_typedef_declarator	go to state 290
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 291
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 292
    unary_identifier_declarator	go to state 293
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 1000
    unary_modifier	go to state 627
    scoping_name	go to state 75
    scope	go to state 899
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 744
    scope_opt_complex_name	go to state 745
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 866

    labeled_statement  ->  label ':' . statement   (rule 463)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    BREAK	shift, and go to state 662
    LONG	shift, and go to state 6
    SWITCH	shift, and go to state 663
    CASE	shift, and go to state 664
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    RETURN	shift, and go to state 665
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    CONTINUE	shift, and go to state 666
    FOR 	shift, and go to state 667
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    DEFAULT	shift, and go to state 668
    GOTO	shift, and go to state 669
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    DO  	shift, and go to state 670
    IF  	shift, and go to state 671
    STATIC	shift, and go to state 20
    WHILE	shift, and go to state 672
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 673
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 674
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335
    '{' 	shift, and go to state 251

    CLCL	reduce using rule 644 (@22)
    $default	reduce using rule 171 (comma_expression_opt)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 676
    comma_expression_opt	go to state 677
    declaration	go to state 678
    default_declaring_list	go to state 36
    declaring_list	go to state 37
    declaration_specifier	go to state 450
    type_specifier	go to state 451
    declaration_qualifier_list	go to state 452
    type_qualifier_list	go to state 453
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 45
    sue_type_specifier_elaboration	go to state 46
    sue_type_specifier	go to state 47
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 679
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    statement	go to state 1001
    labeled_statement	go to state 681
    compound_statement	go to state 682
    expression_statement	go to state 683
    selection_statement	go to state 684
    iteration_statement	go to state 685
    jump_statement	go to state 686
    label	go to state 687
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 373
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 688



state 867

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    postfix_expression  ->  global_or_scoped_typedefname '(' . ')'   (rule 74)
    postfix_expression  ->  global_or_scoped_typedefname '(' . argument_expression_list ')'   (rule 76)
    constructed_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' '(' argument_expression_list ')'   (rule 212)
    constructed_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 213)
    constructed_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')' '(' argument_expression_list ')'   (rule 214)
    constructed_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')' '(' argument_expression_list ')'   (rule 215)
    constructed_parameter_typedef_declarator  ->  '(' . clean_typedef_declarator ')' '(' argument_expression_list ')'   (rule 218)
    constructed_parameter_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 219)
    nonunary_constructed_identifier_declarator  ->  '(' . unary_identifier_declarator ')' '(' argument_expression_list ')'   (rule 225)
    nonunary_constructed_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')'   (rule 226)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator   (rule 588)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')'   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')'   (rule 597)
    postfix_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')'   (rule 598)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator   (rule 599)
    simple_paren_typedef_declarator  ->  '(' . TYPEDEFname ')'   (rule 600)
    simple_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator ')'   (rule 601)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 998
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 999
    ')' 	shift, and go to state 809
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    paren_identifier_declarator	go to state 620
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 807
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    clean_typedef_declarator	go to state 290
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 291
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 292
    unary_identifier_declarator	go to state 293
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 1000
    unary_modifier	go to state 627
    scoping_name	go to state 75
    scope	go to state 899
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 744
    scope_opt_complex_name	go to state 745
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 868

    constructed_parameter_typedef_declarator  ->  TYPEDEFname postfixing_abstract_declarator '(' argument_expression_list ')' .   (rule 217)

    $default	reduce using rule 217 (constructed_parameter_typedef_declarator)



state 869

    constructed_paren_typedef_declarator  ->  '(' TYPEDEFname postfixing_abstract_declarator ')' '(' . argument_expression_list ')'   (rule 215)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 1002
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 870

    postfix_paren_typedef_declarator  ->  '(' TYPEDEFname postfixing_abstract_declarator ')' .   (rule 598)

    $default	reduce using rule 598 (postfix_paren_typedef_declarator)



state 871

    clean_postfix_typedef_declarator  ->  '(' clean_typedef_declarator ')' postfixing_abstract_declarator .   (rule 588)

    $default	reduce using rule 588 (clean_postfix_typedef_declarator)



state 872

    postfix_paren_typedef_declarator  ->  '(' paren_typedef_declarator ')' postfixing_abstract_declarator .   (rule 599)

    $default	reduce using rule 599 (postfix_paren_typedef_declarator)



state 873

    postfix_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator postfixing_abstract_declarator ')' .   (rule 597)

    $default	reduce using rule 597 (postfix_paren_typedef_declarator)



state 874

    argument_expression_list  ->  argument_expression_list . ',' assignment_expression   (rule 84)
    constructed_parameter_typedef_declarator  ->  '(' clean_typedef_declarator ')' '(' argument_expression_list . ')'   (rule 218)

    ')' 	shift, and go to state 1003
    ',' 	shift, and go to state 547



state 875

    constructed_parameter_typedef_declarator  ->  '(' clean_typedef_declarator ')' postfixing_abstract_declarator '(' . argument_expression_list ')'   (rule 219)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 1004
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 876

    argument_expression_list  ->  argument_expression_list . ',' assignment_expression   (rule 84)
    constructed_paren_typedef_declarator  ->  '(' paren_typedef_declarator ')' '(' argument_expression_list . ')'   (rule 212)

    ')' 	shift, and go to state 1005
    ',' 	shift, and go to state 547



state 877

    constructed_paren_typedef_declarator  ->  '(' paren_typedef_declarator ')' postfixing_abstract_declarator '(' . argument_expression_list ')'   (rule 213)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 1006
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 878

    constructed_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator postfixing_abstract_declarator ')' '(' . argument_expression_list ')'   (rule 214)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 1007
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 879

    argument_expression_list  ->  argument_expression_list . ',' assignment_expression   (rule 84)
    nonunary_constructed_identifier_declarator  ->  '(' unary_identifier_declarator ')' '(' argument_expression_list . ')'   (rule 225)

    ')' 	shift, and go to state 1008
    ',' 	shift, and go to state 547



state 880

    nonunary_constructed_identifier_declarator  ->  '(' unary_identifier_declarator ')' postfixing_abstract_declarator '(' . argument_expression_list ')'   (rule 226)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 1009
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 881

    paren_typedef_declarator  ->  asterisk_or_ampersand '(' TYPEDEFname ')' .   (rule 592)

    $default	reduce using rule 592 (paren_typedef_declarator)



state 882

    paren_typedef_declarator  ->  asterisk_or_ampersand '(' simple_paren_typedef_declarator ')' .   (rule 590)

    $default	reduce using rule 590 (paren_typedef_declarator)



state 883

    paren_typedef_declarator  ->  unary_modifier '(' TYPEDEFname ')' .   (rule 593)

    $default	reduce using rule 593 (paren_typedef_declarator)



state 884

    paren_typedef_declarator  ->  unary_modifier '(' simple_paren_typedef_declarator ')' .   (rule 591)

    $default	reduce using rule 591 (paren_typedef_declarator)



state 885

    nonunary_constructed_identifier_declarator  ->  paren_identifier_declarator postfixing_abstract_declarator '(' argument_expression_list ')' .   (rule 224)

    $default	reduce using rule 224 (nonunary_constructed_identifier_declarator)



state 886

    initializer_list  ->  initializer_group .   (rule 454)

    $default	reduce using rule 454 (initializer_list)



state 887

    initializer_group  ->  '{' initializer_list . '}'   (rule 451)
    initializer_group  ->  '{' initializer_list . ',' '}'   (rule 452)
    initializer_list  ->  initializer_list . ',' initializer_group   (rule 455)

    ',' 	shift, and go to state 1010
    '}' 	shift, and go to state 1011



state 888

    constructed_declarator  ->  simple_paren_typedef_declarator postfixing_abstract_declarator '(' argument_expression_list ')' .   (rule 208)

    $default	reduce using rule 208 (constructed_declarator)



state 889

    old_parameter_type_list  ->  '(' named_parameter_type_list ')' .   (rule 405)

    $default	reduce using rule 405 (old_parameter_type_list)



state 890

    old_parameter_type_list  ->  '(' type_name ')' .   (rule 403)

    $default	reduce using rule 403 (old_parameter_type_list)



state 891

    old_parameter_type_list  ->  '(' type_name initializer . ')'   (rule 404)
    named_parameter_type_list  ->  type_name initializer . comma_opt_ellipsis   (rule 409)
    parameter_list  ->  type_name initializer . ',' parameter_declaration   (rule 416)

    ELLIPSIS	shift, and go to state 595
    ')' 	shift, and go to state 1012
    ',' 	shift, and go to state 804

    comma_opt_ellipsis	go to state 805



state 892

    unary_expression  ->  SIZEOF '(' type_name ')' .   (rule 94)

    $default	reduce using rule 94 (unary_expression)



state 893

    cast_expression  ->  '(' type_name . ')' cast_expression   (rule 115)
    parameter_type_list  ->  '(' type_name . ')' type_qualifier_list_opt   (rule 399)
    parameter_type_list  ->  '(' type_name . initializer ')' type_qualifier_list_opt   (rule 400)
    named_parameter_type_list  ->  type_name . comma_opt_ellipsis   (rule 408)
    named_parameter_type_list  ->  type_name . initializer comma_opt_ellipsis   (rule 409)
    parameter_list  ->  type_name . ',' parameter_declaration   (rule 415)
    parameter_list  ->  type_name . initializer ',' parameter_declaration   (rule 416)

    ELLIPSIS	shift, and go to state 595
    ')' 	shift, and go to state 1013
    ',' 	shift, and go to state 600
    '=' 	shift, and go to state 490

    comma_opt_ellipsis	go to state 601
    initializer	go to state 602



state 894

    postfix_expression  ->  TYPEDEFname '(' argument_expression_list ')' .   (rule 75)

    $default	reduce using rule 75 (postfix_expression)



state 895

    postfix_abstract_declarator  ->  '(' postfixing_abstract_declarator ')' .   (rule 632)

    $default	reduce using rule 632 (postfix_abstract_declarator)



state 896

    postfix_abstract_declarator  ->  '(' unary_abstract_declarator ')' .   (rule 630)
    postfix_abstract_declarator  ->  '(' unary_abstract_declarator ')' . postfixing_abstract_declarator   (rule 633)

    '(' 	shift, and go to state 473
    '[' 	shift, and go to state 175

    $default	reduce using rule 630 (postfix_abstract_declarator)

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 1014
    array_abstract_declarator	go to state 178



state 897

    postfix_abstract_declarator  ->  '(' postfix_abstract_declarator ')' .   (rule 631)

    $default	reduce using rule 631 (postfix_abstract_declarator)



state 898

    postfix_expression  ->  TYPEDEFname . '(' ')'   (rule 73)
    postfix_expression  ->  TYPEDEFname . '(' argument_expression_list ')'   (rule 75)
    parameter_typedef_declarator  ->  TYPEDEFname .   (rule 581)
    parameter_typedef_declarator  ->  TYPEDEFname . postfixing_abstract_declarator   (rule 582)
    tag_name  ->  TYPEDEFname .   (rule 643)

    '(' 	shift, and go to state 1015
    '[' 	shift, and go to state 175

    CLCL	reduce using rule 643 (tag_name)
    $default	reduce using rule 581 (parameter_typedef_declarator)

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 717
    array_abstract_declarator	go to state 178



state 899

    unary_modifier  ->  scope . '*' type_qualifier_list_opt   (rule 636)
    scope  ->  scope . scoping_name CLCL   (rule 641)
    global_or_scope  ->  scope .   (rule 647)
    scope_opt_identifier  ->  scope . IDENTIFIER   (rule 650)
    scope_opt_complex_name  ->  scope . complex_name   (rule 652)
    scoped_typedefname  ->  scope . TYPEDEFname   (rule 659)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 260
    TYPEDEFname	shift, and go to state 261
    '*' 	shift, and go to state 262
    '~' 	shift, and go to state 32

    $default	reduce using rule 647 (global_or_scope)

    operator_function_name	go to state 34
    aggregate_key	go to state 155
    scoping_name	go to state 264
    tag_name	go to state 77
    complex_name	go to state 265



state 900

    primary_expression  ->  '(' . comma_expression ')'   (rule 16)
    cast_expression  ->  '(' . type_name ')' cast_expression   (rule 115)
    parameter_type_list  ->  '(' . ')' type_qualifier_list_opt   (rule 398)
    parameter_type_list  ->  '(' . type_name ')' type_qualifier_list_opt   (rule 399)
    parameter_type_list  ->  '(' . type_name initializer ')' type_qualifier_list_opt   (rule 400)
    parameter_type_list  ->  '(' . named_parameter_type_list ')' type_qualifier_list_opt   (rule 401)
    postfix_abstract_declarator  ->  '(' . unary_abstract_declarator ')'   (rule 630)
    postfix_abstract_declarator  ->  '(' . postfix_abstract_declarator ')'   (rule 631)
    postfix_abstract_declarator  ->  '(' . postfixing_abstract_declarator ')'   (rule 632)
    postfix_abstract_declarator  ->  '(' . unary_abstract_declarator ')' postfixing_abstract_declarator   (rule 633)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 326
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    ELLIPSIS	shift, and go to state 329
    '(' 	shift, and go to state 900
    ')' 	shift, and go to state 331
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335
    '[' 	shift, and go to state 175

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 523
    declaration_specifier	go to state 360
    type_specifier	go to state 361
    declaration_qualifier_list	go to state 362
    type_qualifier_list	go to state 363
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 364
    sue_type_specifier_elaboration	go to state 365
    sue_type_specifier	go to state 366
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 367
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    parameter_type_list	go to state 176
    named_parameter_type_list	go to state 368
    parameter_list	go to state 369
    non_casting_parameter_declaration	go to state 370
    type_name	go to state 893
    postfixing_abstract_declarator	go to state 740
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 741
    postfix_abstract_declarator	go to state 742
    asterisk_or_ampersand	go to state 901
    unary_modifier	go to state 750
    scoping_name	go to state 75
    scope	go to state 76
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 380



state 901

    unary_expression  ->  asterisk_or_ampersand . cast_expression   (rule 88)
    unary_abstract_declarator  ->  asterisk_or_ampersand .   (rule 626)
    unary_abstract_declarator  ->  asterisk_or_ampersand . abstract_declarator   (rule 628)
    unary_modifier  ->  asterisk_or_ampersand . type_qualifier_list   (rule 637)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    NEW 	shift, and go to state 317
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 900
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335
    '[' 	shift, and go to state 175

    CLCL	reduce using rule 644 (@22)
    $default	reduce using rule 626 (unary_abstract_declarator)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 603
    type_qualifier_list	go to state 254
    type_qualifier	go to state 42
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    abstract_declarator	go to state 746
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 901
    unary_modifier	go to state 750
    scoping_name	go to state 75
    scope	go to state 899
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 507
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 902

    comma_expression  ->  comma_expression ',' assignment_expression .   (rule 169)

    $default	reduce using rule 169 (comma_expression)



state 903

    cast_expression  ->  '(' type_name ')' cast_expression .   (rule 115)

    $default	reduce using rule 115 (cast_expression)



state 904

    postfix_expression  ->  postfix_expression '(' argument_expression_list ')' .   (rule 66)

    $default	reduce using rule 66 (postfix_expression)



state 905

    postfix_expression  ->  postfix_expression '[' comma_expression ']' .   (rule 64)

    $default	reduce using rule 64 (postfix_expression)



state 906

    postfix_expression  ->  postfix_expression @1 '.' member_name .   (rule 68)

    $default	reduce using rule 68 (postfix_expression)



state 907

    member_name  ->  declaration_qualifier_list . CLCL '~' declaration_qualifier_list   (rule 81)
    declaration_qualifier_list  ->  declaration_qualifier_list . declaration_qualifier   (rule 236)

    AUTO	shift, and go to state 2
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    CLCL	shift, and go to state 1016

    declaration_qualifier	go to state 195
    type_qualifier	go to state 196
    storage_class	go to state 197



state 908

    member_name  ->  type_qualifier_list . CLCL '~' type_qualifier_list   (rule 82)
    declaration_qualifier_list  ->  type_qualifier_list . storage_class   (rule 235)
    type_qualifier_list  ->  type_qualifier_list . type_qualifier   (rule 238)

    AUTO	shift, and go to state 2
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    CLCL	shift, and go to state 1017

    type_qualifier	go to state 208
    storage_class	go to state 209



state 909

    member_name  ->  basic_type_name . CLCL '~' basic_type_name   (rule 80)

    CLCL	shift, and go to state 1018



state 910

    scope  ->  scope . scoping_name CLCL   (rule 641)
    scope_opt_identifier  ->  scope . IDENTIFIER   (rule 650)
    scope_opt_complex_name  ->  scope . complex_name   (rule 652)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 260
    TYPEDEFname	shift, and go to state 169
    '~' 	shift, and go to state 32

    operator_function_name	go to state 34
    aggregate_key	go to state 155
    scoping_name	go to state 264
    tag_name	go to state 77
    complex_name	go to state 265



state 911

    member_name  ->  scope_opt_identifier .   (rule 78)

    $default	reduce using rule 78 (member_name)



state 912

    member_name  ->  scope_opt_complex_name .   (rule 79)

    $default	reduce using rule 79 (member_name)



state 913

    postfix_expression  ->  postfix_expression @2 ARROW member_name .   (rule 70)

    $default	reduce using rule 70 (postfix_expression)



state 914

    allocation_expression  ->  global_opt_scope_opt_operator_new '(' argument_expression_list ')' . '(' type_name ')' operator_new_initializer_opt   (rule 97)
    allocation_expression  ->  global_opt_scope_opt_operator_new '(' argument_expression_list ')' . operator_new_type   (rule 99)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 90
    '(' 	shift, and go to state 1019

    $default	reduce using rule 644 (@22)

    non_elaborating_type_specifier	go to state 550
    operator_new_type	go to state 1020
    type_qualifier_list	go to state 552
    type_qualifier	go to state 42
    basic_type_specifier	go to state 135
    sue_type_specifier	go to state 136
    typedef_type_specifier	go to state 137
    basic_type_name	go to state 138
    elaborated_type_name	go to state 53
    aggregate_name	go to state 139
    aggregate_key	go to state 140
    enum_name	go to state 141
    global_opt_scope_opt_enum_key	go to state 142
    scoping_name	go to state 75
    scope	go to state 143
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 144



state 915

    allocation_expression  ->  global_opt_scope_opt_operator_new '(' type_name ')' . operator_new_initializer_opt   (rule 96)

    '(' 	shift, and go to state 918

    $default	reduce using rule 111 (operator_new_initializer_opt)

    operator_new_initializer_opt	go to state 1021



state 916

    operator_new_array_declarator  ->  '[' ']' .   (rule 108)

    $default	reduce using rule 108 (operator_new_array_declarator)



state 917

    operator_new_array_declarator  ->  '[' comma_expression . ']'   (rule 109)
    comma_expression  ->  comma_expression . ',' assignment_expression   (rule 169)

    ']' 	shift, and go to state 1022
    ',' 	shift, and go to state 752



state 918

    operator_new_initializer_opt  ->  '(' . ')'   (rule 112)
    operator_new_initializer_opt  ->  '(' . argument_expression_list ')'   (rule 113)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    ')' 	shift, and go to state 1023
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 1024
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 919

    operator_new_type  ->  non_elaborating_type_specifier operator_new_declarator_opt operator_new_initializer_opt .   (rule 103)

    $default	reduce using rule 103 (operator_new_type)



state 920

    operator_new_array_declarator  ->  operator_new_array_declarator '[' . comma_expression ']'   (rule 110)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 1025
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 921

    operator_new_declarator_opt  ->  asterisk_or_ampersand operator_new_declarator_opt .   (rule 106)

    $default	reduce using rule 106 (operator_new_declarator_opt)



state 922

    operator_new_declarator_opt  ->  unary_modifier operator_new_declarator_opt .   (rule 107)

    $default	reduce using rule 107 (operator_new_declarator_opt)



state 923

    operator_new_type  ->  type_qualifier_list operator_new_declarator_opt operator_new_initializer_opt .   (rule 102)

    $default	reduce using rule 102 (operator_new_type)



state 924

    deallocation_expression  ->  global_opt_scope_opt_delete '[' ']' deallocation_expression .   (rule 119)

    $default	reduce using rule 119 (deallocation_expression)



state 925

    deallocation_expression  ->  global_opt_scope_opt_delete '[' comma_expression ']' . deallocation_expression   (rule 118)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 1026
    global_opt_scope_opt_delete	go to state 346
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 926

    conditional_expression  ->  logical_OR_expression '?' comma_expression ':' . conditional_expression   (rule 154)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 1027
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 927

    postfix_expression  ->  basic_type_name '(' assignment_expression ')' .   (rule 77)

    $default	reduce using rule 77 (postfix_expression)



state 928

    parameter_declaration  ->  non_casting_parameter_declaration initializer .   (rule 421)

    $default	reduce using rule 421 (parameter_declaration)



state 929

    parameter_declaration  ->  type_name initializer .   (rule 419)

    $default	reduce using rule 419 (parameter_declaration)



state 930

    parameter_type_list  ->  '(' type_name initializer ')' type_qualifier_list_opt .   (rule 400)

    $default	reduce using rule 400 (parameter_type_list)



state 931

    parameter_list  ->  type_name initializer ',' parameter_declaration .   (rule 416)

    $default	reduce using rule 416 (parameter_list)



state 932

    postfix_expression  ->  global_or_scoped_typedefname '(' argument_expression_list ')' .   (rule 76)

    $default	reduce using rule 76 (postfix_expression)



state 933

    nonunary_constructed_identifier_declarator  ->  paren_identifier_declarator '(' argument_expression_list ')' .   (rule 223)

    $default	reduce using rule 223 (nonunary_constructed_identifier_declarator)



state 934

    constructor_init  ->  IDENTIFIER '(' ')' .   (rule 569)

    $default	reduce using rule 569 (constructor_init)



state 935

    argument_expression_list  ->  argument_expression_list . ',' assignment_expression   (rule 84)
    constructor_init  ->  IDENTIFIER '(' argument_expression_list . ')'   (rule 568)

    ')' 	shift, and go to state 1028
    ',' 	shift, and go to state 547



state 936

    constructor_init  ->  TYPEDEFname '(' ')' .   (rule 571)

    $default	reduce using rule 571 (constructor_init)



state 937

    argument_expression_list  ->  argument_expression_list . ',' assignment_expression   (rule 84)
    constructor_init  ->  TYPEDEFname '(' argument_expression_list . ')'   (rule 570)

    ')' 	shift, and go to state 1029
    ',' 	shift, and go to state 547



state 938

    constructor_init  ->  '(' argument_expression_list ')' .   (rule 574)

    $default	reduce using rule 574 (constructor_init)



state 939

    constructor_init  ->  global_or_scoped_typedefname '(' ')' .   (rule 573)

    $default	reduce using rule 573 (constructor_init)



state 940

    argument_expression_list  ->  argument_expression_list . ',' assignment_expression   (rule 84)
    constructor_init  ->  global_or_scoped_typedefname '(' argument_expression_list . ')'   (rule 572)

    ')' 	shift, and go to state 1030
    ',' 	shift, and go to state 547



state 941

    bit_field_declarator  ->  TYPEDEFname . @12 ':' constant_expression   (rule 381)
    parameter_typedef_declarator  ->  TYPEDEFname .   (rule 581)
    parameter_typedef_declarator  ->  TYPEDEFname . postfixing_abstract_declarator   (rule 582)
    tag_name  ->  TYPEDEFname .   (rule 643)

    '(' 	shift, and go to state 473
    '[' 	shift, and go to state 175

    CLCL	reduce using rule 643 (tag_name)
    ':' 	reduce using rule 380 (@12)
    $default	reduce using rule 581 (parameter_typedef_declarator)

    @12 	go to state 1031
    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 717
    array_abstract_declarator	go to state 178



state 942

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    member_conflict_paren_postfix_declaring_item  ->  TYPEDEFname '(' . paren_typedef_declarator ')' member_pure_opt   (rule 369)
    member_conflict_paren_postfix_declaring_item  ->  TYPEDEFname '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')' member_pure_opt   (rule 370)
    member_conflict_paren_postfix_declaring_item  ->  TYPEDEFname '(' . TYPEDEFname postfixing_abstract_declarator ')' member_pure_opt   (rule 371)
    member_conflict_paren_postfix_declaring_item  ->  TYPEDEFname '(' . paren_typedef_declarator ')' postfixing_abstract_declarator member_pure_opt   (rule 372)
    constructor_parameter_list_and_body  ->  '(' . ')' type_qualifier_list_opt ';'   (rule 532)
    constructor_parameter_list_and_body  ->  '(' . type_name initializer ')' type_qualifier_list_opt ';'   (rule 533)
    constructor_parameter_list_and_body  ->  '(' . named_parameter_type_list ')' type_qualifier_list_opt ';'   (rule 534)
    constructor_parameter_list_and_body  ->  '(' . ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 535)
    constructor_parameter_list_and_body  ->  '(' . type_name initializer ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 536)
    constructor_parameter_list_and_body  ->  '(' . named_parameter_type_list ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 537)
    constructor_conflicting_parameter_list_and_body  ->  '(' . type_specifier ')' type_qualifier_list_opt ';'   (rule 539)
    constructor_conflicting_parameter_list_and_body  ->  '(' . basic_type_name ')' type_qualifier_list_opt ';'   (rule 540)
    constructor_conflicting_parameter_list_and_body  ->  '(' . TYPEDEFname ')' type_qualifier_list_opt ';'   (rule 541)
    constructor_conflicting_parameter_list_and_body  ->  '(' . global_or_scoped_typedefname ')' type_qualifier_list_opt ';'   (rule 542)
    constructor_conflicting_parameter_list_and_body  ->  '(' . type_qualifier_list ')' type_qualifier_list_opt ';'   (rule 543)
    constructor_conflicting_parameter_list_and_body  ->  '(' . type_specifier abstract_declarator ')' type_qualifier_list_opt ';'   (rule 544)
    constructor_conflicting_parameter_list_and_body  ->  '(' . basic_type_name abstract_declarator ')' type_qualifier_list_opt ';'   (rule 545)
    constructor_conflicting_parameter_list_and_body  ->  '(' . global_or_scoped_typedefname abstract_declarator ')' type_qualifier_list_opt ';'   (rule 546)
    constructor_conflicting_parameter_list_and_body  ->  '(' . type_qualifier_list abstract_declarator ')' type_qualifier_list_opt ';'   (rule 547)
    constructor_conflicting_parameter_list_and_body  ->  '(' . type_specifier ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 548)
    constructor_conflicting_parameter_list_and_body  ->  '(' . basic_type_name ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 549)
    constructor_conflicting_parameter_list_and_body  ->  '(' . TYPEDEFname ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 550)
    constructor_conflicting_parameter_list_and_body  ->  '(' . global_or_scoped_typedefname ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 551)
    constructor_conflicting_parameter_list_and_body  ->  '(' . type_qualifier_list ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 552)
    constructor_conflicting_parameter_list_and_body  ->  '(' . type_specifier abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 553)
    constructor_conflicting_parameter_list_and_body  ->  '(' . basic_type_name abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 554)
    constructor_conflicting_parameter_list_and_body  ->  '(' . global_or_scoped_typedefname abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 555)
    constructor_conflicting_parameter_list_and_body  ->  '(' . type_qualifier_list abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 556)
    constructor_conflicting_typedef_declarator  ->  '(' . TYPEDEFname unary_abstract_declarator ')' type_qualifier_list_opt ';'   (rule 558)
    constructor_conflicting_typedef_declarator  ->  '(' . TYPEDEFname unary_abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 559)
    constructor_conflicting_typedef_declarator  ->  '(' . TYPEDEFname postfix_abstract_declarator ')' type_qualifier_list_opt ';'   (rule 560)
    constructor_conflicting_typedef_declarator  ->  '(' . TYPEDEFname postfix_abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 561)
    constructor_conflicting_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')' type_qualifier_list_opt ';'   (rule 562)
    constructor_conflicting_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 563)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator   (rule 588)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')'   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')'   (rule 597)
    postfix_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')'   (rule 598)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator   (rule 599)
    simple_paren_typedef_declarator  ->  '(' . TYPEDEFname ')'   (rule 600)
    simple_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator ')'   (rule 601)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 1032
    ELLIPSIS	shift, and go to state 329
    '(' 	shift, and go to state 625
    ')' 	shift, and go to state 1033
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    $default	reduce using rule 644 (@22)

    paren_identifier_declarator	go to state 620
    operator_function_name	go to state 34
    declaration_specifier	go to state 360
    type_specifier	go to state 1034
    declaration_qualifier_list	go to state 362
    type_qualifier_list	go to state 1035
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 364
    sue_type_specifier_elaboration	go to state 365
    sue_type_specifier	go to state 366
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 1036
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    named_parameter_type_list	go to state 1037
    parameter_list	go to state 369
    non_casting_parameter_declaration	go to state 370
    type_name	go to state 1038
    clean_typedef_declarator	go to state 477
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 1039
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 1040
    unary_identifier_declarator	go to state 171
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 626
    unary_modifier	go to state 627
    scoping_name	go to state 75
    scope	go to state 76
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 1041



state 943

    bit_field_identifier_declarator  ->  ':' . constant_expression   (rule 382)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 384
    constant_expression	go to state 1042
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 944

    member_declaring_list  ->  TYPEDEFname bit_field_declarator .   (rule 345)

    $default	reduce using rule 345 (member_declaring_list)



state 945

    bit_field_declarator  ->  bit_field_identifier_declarator .   (rule 379)

    $default	reduce using rule 379 (bit_field_declarator)



state 946

    constructor_function_in_class  ->  TYPEDEFname constructor_parameter_list_and_body .   (rule 531)

    $default	reduce using rule 531 (constructor_function_in_class)



state 947

    constructor_parameter_list_and_body  ->  constructor_conflicting_parameter_list_and_body .   (rule 538)

    $default	reduce using rule 538 (constructor_parameter_list_and_body)



state 948

    constructor_conflicting_parameter_list_and_body  ->  constructor_conflicting_typedef_declarator .   (rule 557)

    $default	reduce using rule 557 (constructor_conflicting_parameter_list_and_body)



state 949

    new_function_definition  ->  TYPEDEFname declarator . compound_statement   (rule 504)

    '{' 	shift, and go to state 251

    compound_statement	go to state 300



state 950

    member_conflict_declaring_item  ->  TYPEDEFname parameter_typedef_declarator . member_pure_opt   (rule 350)
    typedef_declarator  ->  parameter_typedef_declarator .   (rule 580)

    '=' 	shift, and go to state 1043

    '{' 	reduce using rule 580 (typedef_declarator)
    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1044



state 951

    member_conflict_declaring_item  ->  TYPEDEFname simple_paren_typedef_declarator . member_pure_opt   (rule 351)
    typedef_declarator  ->  simple_paren_typedef_declarator .   (rule 579)

    '=' 	shift, and go to state 1043

    '{' 	reduce using rule 579 (typedef_declarator)
    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1045



state 952

    member_conflict_declaring_item  ->  TYPEDEFname identifier_declarator . member_pure_opt   (rule 349)
    bit_field_identifier_declarator  ->  identifier_declarator . @13 ':' constant_expression   (rule 384)
    declarator  ->  identifier_declarator .   (rule 576)

    '=' 	shift, and go to state 1043

    ':' 	reduce using rule 383 (@13)
    '{' 	reduce using rule 576 (declarator)
    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1046
    @13 	go to state 1047



state 953

    member_conflict_paren_declaring_item  ->  TYPEDEFname asterisk_or_ampersand . '(' simple_paren_typedef_declarator ')' member_pure_opt   (rule 356)
    member_conflict_paren_declaring_item  ->  TYPEDEFname asterisk_or_ampersand . '(' TYPEDEFname ')' member_pure_opt   (rule 358)
    member_conflict_paren_declaring_item  ->  TYPEDEFname asterisk_or_ampersand . paren_typedef_declarator member_pure_opt   (rule 360)
    clean_typedef_declarator  ->  asterisk_or_ampersand . parameter_typedef_declarator   (rule 585)
    paren_typedef_declarator  ->  asterisk_or_ampersand . '(' simple_paren_typedef_declarator ')'   (rule 590)
    paren_typedef_declarator  ->  asterisk_or_ampersand . '(' TYPEDEFname ')'   (rule 592)
    paren_typedef_declarator  ->  asterisk_or_ampersand . paren_typedef_declarator   (rule 594)
    unary_identifier_declarator  ->  asterisk_or_ampersand . identifier_declarator   (rule 605)
    unary_modifier  ->  asterisk_or_ampersand . type_qualifier_list   (rule 637)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 485
    '(' 	shift, and go to state 1048
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    type_qualifier_list	go to state 254
    type_qualifier	go to state 42
    aggregate_key	go to state 155
    parameter_typedef_declarator	go to state 306
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 1049
    postfix_paren_typedef_declarator	go to state 162
    identifier_declarator	go to state 255
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 626
    unary_modifier	go to state 627
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 954

    member_conflict_paren_declaring_item  ->  TYPEDEFname unary_modifier . '(' simple_paren_typedef_declarator ')' member_pure_opt   (rule 357)
    member_conflict_paren_declaring_item  ->  TYPEDEFname unary_modifier . '(' TYPEDEFname ')' member_pure_opt   (rule 359)
    member_conflict_paren_declaring_item  ->  TYPEDEFname unary_modifier . paren_typedef_declarator member_pure_opt   (rule 361)
    clean_typedef_declarator  ->  unary_modifier . parameter_typedef_declarator   (rule 586)
    paren_typedef_declarator  ->  unary_modifier . '(' simple_paren_typedef_declarator ')'   (rule 591)
    paren_typedef_declarator  ->  unary_modifier . '(' TYPEDEFname ')'   (rule 593)
    paren_typedef_declarator  ->  unary_modifier . paren_typedef_declarator   (rule 595)
    unary_identifier_declarator  ->  unary_modifier . identifier_declarator   (rule 606)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 485
    '(' 	shift, and go to state 1050
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    parameter_typedef_declarator	go to state 311
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 1051
    postfix_paren_typedef_declarator	go to state 162
    identifier_declarator	go to state 257
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 626
    unary_modifier	go to state 627
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 955

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    member_conflict_paren_postfix_declaring_item  ->  declaration_specifier '(' . paren_typedef_declarator ')' member_pure_opt   (rule 373)
    member_conflict_paren_postfix_declaring_item  ->  declaration_specifier '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')' member_pure_opt   (rule 374)
    member_conflict_paren_postfix_declaring_item  ->  declaration_specifier '(' . TYPEDEFname postfixing_abstract_declarator ')' member_pure_opt   (rule 375)
    member_conflict_paren_postfix_declaring_item  ->  declaration_specifier '(' . paren_typedef_declarator ')' postfixing_abstract_declarator member_pure_opt   (rule 376)
    constructor_parameter_list_and_body  ->  '(' . ')' type_qualifier_list_opt ';'   (rule 532)
    constructor_parameter_list_and_body  ->  '(' . type_name initializer ')' type_qualifier_list_opt ';'   (rule 533)
    constructor_parameter_list_and_body  ->  '(' . named_parameter_type_list ')' type_qualifier_list_opt ';'   (rule 534)
    constructor_parameter_list_and_body  ->  '(' . ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 535)
    constructor_parameter_list_and_body  ->  '(' . type_name initializer ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 536)
    constructor_parameter_list_and_body  ->  '(' . named_parameter_type_list ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 537)
    constructor_conflicting_parameter_list_and_body  ->  '(' . type_specifier ')' type_qualifier_list_opt ';'   (rule 539)
    constructor_conflicting_parameter_list_and_body  ->  '(' . basic_type_name ')' type_qualifier_list_opt ';'   (rule 540)
    constructor_conflicting_parameter_list_and_body  ->  '(' . TYPEDEFname ')' type_qualifier_list_opt ';'   (rule 541)
    constructor_conflicting_parameter_list_and_body  ->  '(' . global_or_scoped_typedefname ')' type_qualifier_list_opt ';'   (rule 542)
    constructor_conflicting_parameter_list_and_body  ->  '(' . type_qualifier_list ')' type_qualifier_list_opt ';'   (rule 543)
    constructor_conflicting_parameter_list_and_body  ->  '(' . type_specifier abstract_declarator ')' type_qualifier_list_opt ';'   (rule 544)
    constructor_conflicting_parameter_list_and_body  ->  '(' . basic_type_name abstract_declarator ')' type_qualifier_list_opt ';'   (rule 545)
    constructor_conflicting_parameter_list_and_body  ->  '(' . global_or_scoped_typedefname abstract_declarator ')' type_qualifier_list_opt ';'   (rule 546)
    constructor_conflicting_parameter_list_and_body  ->  '(' . type_qualifier_list abstract_declarator ')' type_qualifier_list_opt ';'   (rule 547)
    constructor_conflicting_parameter_list_and_body  ->  '(' . type_specifier ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 548)
    constructor_conflicting_parameter_list_and_body  ->  '(' . basic_type_name ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 549)
    constructor_conflicting_parameter_list_and_body  ->  '(' . TYPEDEFname ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 550)
    constructor_conflicting_parameter_list_and_body  ->  '(' . global_or_scoped_typedefname ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 551)
    constructor_conflicting_parameter_list_and_body  ->  '(' . type_qualifier_list ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 552)
    constructor_conflicting_parameter_list_and_body  ->  '(' . type_specifier abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 553)
    constructor_conflicting_parameter_list_and_body  ->  '(' . basic_type_name abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 554)
    constructor_conflicting_parameter_list_and_body  ->  '(' . global_or_scoped_typedefname abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 555)
    constructor_conflicting_parameter_list_and_body  ->  '(' . type_qualifier_list abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 556)
    constructor_conflicting_typedef_declarator  ->  '(' . TYPEDEFname unary_abstract_declarator ')' type_qualifier_list_opt ';'   (rule 558)
    constructor_conflicting_typedef_declarator  ->  '(' . TYPEDEFname unary_abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 559)
    constructor_conflicting_typedef_declarator  ->  '(' . TYPEDEFname postfix_abstract_declarator ')' type_qualifier_list_opt ';'   (rule 560)
    constructor_conflicting_typedef_declarator  ->  '(' . TYPEDEFname postfix_abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 561)
    constructor_conflicting_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')' type_qualifier_list_opt ';'   (rule 562)
    constructor_conflicting_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 563)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator   (rule 588)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')'   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')'   (rule 597)
    postfix_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')'   (rule 598)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator   (rule 599)
    simple_paren_typedef_declarator  ->  '(' . TYPEDEFname ')'   (rule 600)
    simple_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator ')'   (rule 601)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 1052
    ELLIPSIS	shift, and go to state 329
    '(' 	shift, and go to state 625
    ')' 	shift, and go to state 1033
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    $default	reduce using rule 644 (@22)

    paren_identifier_declarator	go to state 620
    operator_function_name	go to state 34
    declaration_specifier	go to state 360
    type_specifier	go to state 1034
    declaration_qualifier_list	go to state 362
    type_qualifier_list	go to state 1035
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 364
    sue_type_specifier_elaboration	go to state 365
    sue_type_specifier	go to state 366
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 1036
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    named_parameter_type_list	go to state 1037
    parameter_list	go to state 369
    non_casting_parameter_declaration	go to state 370
    type_name	go to state 1038
    clean_typedef_declarator	go to state 477
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 1053
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 1054
    unary_identifier_declarator	go to state 171
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 626
    unary_modifier	go to state 627
    scoping_name	go to state 75
    scope	go to state 76
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 1041



state 956

    member_declaring_list  ->  declaration_specifier bit_field_declarator .   (rule 347)

    $default	reduce using rule 347 (member_declaring_list)



state 957

    constructor_function_in_class  ->  declaration_specifier constructor_parameter_list_and_body .   (rule 530)

    $default	reduce using rule 530 (constructor_function_in_class)



state 958

    new_function_definition  ->  declaration_specifier declarator . compound_statement   (rule 501)

    '{' 	shift, and go to state 251

    compound_statement	go to state 410



state 959

    member_conflict_declaring_item  ->  declaration_specifier parameter_typedef_declarator . member_pure_opt   (rule 353)
    typedef_declarator  ->  parameter_typedef_declarator .   (rule 580)

    '=' 	shift, and go to state 1043

    '{' 	reduce using rule 580 (typedef_declarator)
    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1055



state 960

    member_conflict_declaring_item  ->  declaration_specifier simple_paren_typedef_declarator . member_pure_opt   (rule 354)
    typedef_declarator  ->  simple_paren_typedef_declarator .   (rule 579)

    '=' 	shift, and go to state 1043

    '{' 	reduce using rule 579 (typedef_declarator)
    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1056



state 961

    member_conflict_declaring_item  ->  declaration_specifier identifier_declarator . member_pure_opt   (rule 352)
    bit_field_identifier_declarator  ->  identifier_declarator . @13 ':' constant_expression   (rule 384)
    declarator  ->  identifier_declarator .   (rule 576)

    '=' 	shift, and go to state 1043

    ':' 	reduce using rule 383 (@13)
    '{' 	reduce using rule 576 (declarator)
    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1057
    @13 	go to state 1047



state 962

    member_conflict_paren_declaring_item  ->  declaration_specifier asterisk_or_ampersand . '(' simple_paren_typedef_declarator ')' member_pure_opt   (rule 362)
    member_conflict_paren_declaring_item  ->  declaration_specifier asterisk_or_ampersand . '(' TYPEDEFname ')' member_pure_opt   (rule 364)
    member_conflict_paren_declaring_item  ->  declaration_specifier asterisk_or_ampersand . paren_typedef_declarator member_pure_opt   (rule 366)
    clean_typedef_declarator  ->  asterisk_or_ampersand . parameter_typedef_declarator   (rule 585)
    paren_typedef_declarator  ->  asterisk_or_ampersand . '(' simple_paren_typedef_declarator ')'   (rule 590)
    paren_typedef_declarator  ->  asterisk_or_ampersand . '(' TYPEDEFname ')'   (rule 592)
    paren_typedef_declarator  ->  asterisk_or_ampersand . paren_typedef_declarator   (rule 594)
    unary_identifier_declarator  ->  asterisk_or_ampersand . identifier_declarator   (rule 605)
    unary_modifier  ->  asterisk_or_ampersand . type_qualifier_list   (rule 637)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 485
    '(' 	shift, and go to state 1058
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    type_qualifier_list	go to state 254
    type_qualifier	go to state 42
    aggregate_key	go to state 155
    parameter_typedef_declarator	go to state 306
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 1059
    postfix_paren_typedef_declarator	go to state 162
    identifier_declarator	go to state 255
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 626
    unary_modifier	go to state 627
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 963

    member_conflict_paren_declaring_item  ->  declaration_specifier unary_modifier . '(' simple_paren_typedef_declarator ')' member_pure_opt   (rule 363)
    member_conflict_paren_declaring_item  ->  declaration_specifier unary_modifier . '(' TYPEDEFname ')' member_pure_opt   (rule 365)
    member_conflict_paren_declaring_item  ->  declaration_specifier unary_modifier . paren_typedef_declarator member_pure_opt   (rule 367)
    clean_typedef_declarator  ->  unary_modifier . parameter_typedef_declarator   (rule 586)
    paren_typedef_declarator  ->  unary_modifier . '(' simple_paren_typedef_declarator ')'   (rule 591)
    paren_typedef_declarator  ->  unary_modifier . '(' TYPEDEFname ')'   (rule 593)
    paren_typedef_declarator  ->  unary_modifier . paren_typedef_declarator   (rule 595)
    unary_identifier_declarator  ->  unary_modifier . identifier_declarator   (rule 606)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 485
    '(' 	shift, and go to state 1060
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    parameter_typedef_declarator	go to state 311
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 1061
    postfix_paren_typedef_declarator	go to state 162
    identifier_declarator	go to state 257
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 626
    unary_modifier	go to state 627
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 964

    member_declaring_list  ->  type_specifier bit_field_declarator .   (rule 343)

    $default	reduce using rule 343 (member_declaring_list)



state 965

    member_declaring_list  ->  type_specifier declarator . member_pure_opt   (rule 338)
    new_function_definition  ->  type_specifier declarator . compound_statement   (rule 502)

    '=' 	shift, and go to state 1043
    '{' 	shift, and go to state 251

    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1062
    compound_statement	go to state 413



state 966

    typedef_declarator  ->  simple_paren_typedef_declarator .   (rule 579)

    $default	reduce using rule 579 (typedef_declarator)



state 967

    bit_field_identifier_declarator  ->  identifier_declarator . @13 ':' constant_expression   (rule 384)
    declarator  ->  identifier_declarator .   (rule 576)

    ':' 	reduce using rule 383 (@13)
    $default	reduce using rule 576 (declarator)

    @13 	go to state 1047



state 968

    member_default_declaring_list  ->  declaration_qualifier_list bit_field_identifier_declarator .   (rule 336)

    $default	reduce using rule 336 (member_default_declaring_list)



state 969

    member_default_declaring_list  ->  declaration_qualifier_list identifier_declarator . member_pure_opt   (rule 333)
    bit_field_identifier_declarator  ->  identifier_declarator . @13 ':' constant_expression   (rule 384)
    new_function_definition  ->  declaration_qualifier_list identifier_declarator . compound_statement   (rule 506)

    '=' 	shift, and go to state 1043
    '{' 	shift, and go to state 251

    ':' 	reduce using rule 383 (@13)
    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1063
    @13 	go to state 1047
    compound_statement	go to state 416



state 970

    member_default_declaring_list  ->  type_qualifier_list bit_field_identifier_declarator .   (rule 335)

    $default	reduce using rule 335 (member_default_declaring_list)



state 971

    member_default_declaring_list  ->  type_qualifier_list identifier_declarator . member_pure_opt   (rule 332)
    bit_field_identifier_declarator  ->  identifier_declarator . @13 ':' constant_expression   (rule 384)
    new_function_definition  ->  type_qualifier_list identifier_declarator . compound_statement   (rule 507)

    '=' 	shift, and go to state 1043
    '{' 	shift, and go to state 251

    ':' 	reduce using rule 383 (@13)
    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1064
    @13 	go to state 1047
    compound_statement	go to state 421



state 972

    member_declaration  ->  sue_declaration_specifier ';' .   (rule 331)

    $default	reduce using rule 331 (member_declaration)



state 973

    member_declaration  ->  sue_type_specifier_elaboration ';' .   (rule 328)

    $default	reduce using rule 328 (member_declaration)



state 974

    member_declaration  ->  sue_type_specifier ';' .   (rule 327)

    $default	reduce using rule 327 (member_declaration)



state 975

    member_declaration  ->  typedef_declaration_specifier ';' .   (rule 330)

    $default	reduce using rule 330 (member_declaration)



state 976

    member_declaring_list  ->  basic_type_name bit_field_declarator .   (rule 344)

    $default	reduce using rule 344 (member_declaring_list)



state 977

    member_declaring_list  ->  basic_type_name declarator . member_pure_opt   (rule 339)
    new_function_definition  ->  basic_type_name declarator . compound_statement   (rule 503)

    '=' 	shift, and go to state 1043
    '{' 	shift, and go to state 251

    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1065
    compound_statement	go to state 424



state 978

    member_declaration  ->  access_specifier ':' .   (rule 324)

    $default	reduce using rule 324 (member_declaration)



state 979

    member_default_declaring_list  ->  member_default_declaring_list ',' . identifier_declarator member_pure_opt   (rule 334)
    member_default_declaring_list  ->  member_default_declaring_list ',' . bit_field_identifier_declarator   (rule 337)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 169
    '(' 	shift, and go to state 619
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    ':' 	shift, and go to state 943

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    bit_field_identifier_declarator	go to state 1066
    identifier_declarator	go to state 1067
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 621
    unary_modifier	go to state 622
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 980

    member_declaration  ->  member_default_declaring_list ';' .   (rule 323)

    $default	reduce using rule 323 (member_declaration)



state 981

    member_declaring_list  ->  member_declaring_list ',' . declarator member_pure_opt   (rule 342)
    member_declaring_list  ->  member_declaring_list ',' . bit_field_declarator   (rule 348)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 941
    '(' 	shift, and go to state 625
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    ':' 	shift, and go to state 943

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    bit_field_declarator	go to state 1068
    bit_field_identifier_declarator	go to state 945
    declarator	go to state 1069
    typedef_declarator	go to state 157
    parameter_typedef_declarator	go to state 158
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 161
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 966
    identifier_declarator	go to state 967
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 626
    unary_modifier	go to state 627
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 982

    member_declaration  ->  member_declaring_list ';' .   (rule 322)

    $default	reduce using rule 322 (member_declaration)



state 983

    member_declaration  ->  identifier_declarator ';' .   (rule 329)

    $default	reduce using rule 329 (member_declaration)



state 984

    member_declaring_list  ->  global_or_scoped_typedefname bit_field_declarator .   (rule 346)

    $default	reduce using rule 346 (member_declaring_list)



state 985

    member_declaring_list  ->  global_or_scoped_typedefname declarator . member_pure_opt   (rule 340)
    new_function_definition  ->  global_or_scoped_typedefname declarator . compound_statement   (rule 505)

    '=' 	shift, and go to state 1043
    '{' 	shift, and go to state 251

    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1070
    compound_statement	go to state 467



state 986

    enumerator_list_no_trailing_comma  ->  enumerator_list_no_trailing_comma ',' enumerator_name enumerator_value_opt .   (rule 393)

    $default	reduce using rule 393 (enumerator_list_no_trailing_comma)



state 987

    comma_expression  ->  comma_expression . ',' assignment_expression   (rule 169)
    selection_statement  ->  SWITCH '(' comma_expression . ')' statement   (rule 474)

    ')' 	shift, and go to state 1071
    ',' 	shift, and go to state 752



state 988

    labeled_statement  ->  CASE constant_expression ':' . statement   (rule 464)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    BREAK	shift, and go to state 662
    LONG	shift, and go to state 6
    SWITCH	shift, and go to state 663
    CASE	shift, and go to state 664
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    RETURN	shift, and go to state 665
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    CONTINUE	shift, and go to state 666
    FOR 	shift, and go to state 667
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    DEFAULT	shift, and go to state 668
    GOTO	shift, and go to state 669
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    DO  	shift, and go to state 670
    IF  	shift, and go to state 671
    STATIC	shift, and go to state 20
    WHILE	shift, and go to state 672
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 673
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 674
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335
    '{' 	shift, and go to state 251

    CLCL	reduce using rule 644 (@22)
    $default	reduce using rule 171 (comma_expression_opt)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 676
    comma_expression_opt	go to state 677
    declaration	go to state 678
    default_declaring_list	go to state 36
    declaring_list	go to state 37
    declaration_specifier	go to state 450
    type_specifier	go to state 451
    declaration_qualifier_list	go to state 452
    type_qualifier_list	go to state 453
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 45
    sue_type_specifier_elaboration	go to state 46
    sue_type_specifier	go to state 47
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 679
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    statement	go to state 1072
    labeled_statement	go to state 681
    compound_statement	go to state 682
    expression_statement	go to state 683
    selection_statement	go to state 684
    iteration_statement	go to state 685
    jump_statement	go to state 686
    label	go to state 687
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 373
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 688



state 989

    jump_statement  ->  RETURN comma_expression_opt ';' .   (rule 482)

    $default	reduce using rule 482 (jump_statement)



state 990

    postfix_expression  ->  TYPEDEFname . '(' ')'   (rule 73)
    postfix_expression  ->  TYPEDEFname . '(' argument_expression_list ')'   (rule 75)
    declaring_list  ->  TYPEDEFname . declarator @9 initializer_opt   (rule 194)
    declaring_list  ->  TYPEDEFname . constructed_declarator   (rule 202)
    typedef_declaration_specifier  ->  TYPEDEFname . storage_class   (rule 267)
    typedef_type_specifier  ->  TYPEDEFname . type_qualifier   (rule 272)
    tag_name  ->  TYPEDEFname .   (rule 643)

    AUTO	shift, and go to state 2
    STRUCT	shift, and go to state 5
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 146
    '(' 	shift, and go to state 863
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    $default	reduce using rule 643 (tag_name)

    paren_identifier_declarator	go to state 393
    operator_function_name	go to state 34
    constructed_declarator	go to state 149
    constructed_paren_typedef_declarator	go to state 150
    constructed_parameter_typedef_declarator	go to state 151
    nonunary_constructed_identifier_declarator	go to state 152
    type_qualifier	go to state 153
    storage_class	go to state 154
    aggregate_key	go to state 155
    declarator	go to state 689
    typedef_declarator	go to state 157
    parameter_typedef_declarator	go to state 158
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 161
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 163
    identifier_declarator	go to state 164
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 401
    unary_modifier	go to state 402
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 991

    iteration_statement  ->  FOR '(' comma_expression_opt . ';' comma_expression_opt ';' comma_expression_opt ')' statement   (rule 477)

    ';' 	shift, and go to state 1073



state 992

    iteration_statement  ->  FOR '(' declaration . comma_expression_opt ';' comma_expression_opt ')' statement   (rule 478)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    CLCL	reduce using rule 644 (@22)
    $default	reduce using rule 171 (comma_expression_opt)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 676
    comma_expression_opt	go to state 1074
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 993

    labeled_statement  ->  DEFAULT ':' statement .   (rule 465)

    $default	reduce using rule 465 (labeled_statement)



state 994

    jump_statement  ->  GOTO label ';' .   (rule 479)

    $default	reduce using rule 479 (jump_statement)



state 995

    iteration_statement  ->  DO statement WHILE . '(' comma_expression ')' ';'   (rule 476)

    '(' 	shift, and go to state 1075



state 996

    comma_expression  ->  comma_expression . ',' assignment_expression   (rule 169)
    selection_statement  ->  IF '(' comma_expression . ')' statement   (rule 472)
    selection_statement  ->  IF '(' comma_expression . ')' statement ELSE statement   (rule 473)

    ')' 	shift, and go to state 1076
    ',' 	shift, and go to state 752



state 997

    iteration_statement  ->  WHILE '(' comma_expression_opt . ')' statement   (rule 475)

    ')' 	shift, and go to state 1077



state 998

    postfix_expression  ->  TYPEDEFname . '(' ')'   (rule 73)
    postfix_expression  ->  TYPEDEFname . '(' argument_expression_list ')'   (rule 75)
    constructed_paren_typedef_declarator  ->  '(' TYPEDEFname . postfixing_abstract_declarator ')' '(' argument_expression_list ')'   (rule 215)
    postfix_paren_typedef_declarator  ->  '(' TYPEDEFname . postfixing_abstract_declarator ')'   (rule 598)
    simple_paren_typedef_declarator  ->  '(' TYPEDEFname . ')'   (rule 600)
    tag_name  ->  TYPEDEFname .   (rule 643)

    '(' 	shift, and go to state 1015
    ')' 	shift, and go to state 474
    '[' 	shift, and go to state 175

    $default	reduce using rule 643 (tag_name)

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 475
    array_abstract_declarator	go to state 178



state 999

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    primary_expression  ->  '(' . comma_expression ')'   (rule 16)
    cast_expression  ->  '(' . type_name ')' cast_expression   (rule 115)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator   (rule 588)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')'   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')'   (rule 597)
    postfix_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')'   (rule 598)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator   (rule 599)
    simple_paren_typedef_declarator  ->  '(' . TYPEDEFname ')'   (rule 600)
    simple_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator ')'   (rule 601)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 1078
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 999
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    paren_identifier_declarator	go to state 620
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 523
    type_specifier	go to state 524
    type_qualifier_list	go to state 525
    type_qualifier	go to state 42
    basic_type_specifier	go to state 526
    sue_type_specifier_elaboration	go to state 527
    sue_type_specifier	go to state 528
    typedef_type_specifier	go to state 529
    basic_type_name	go to state 530
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    type_name	go to state 531
    clean_typedef_declarator	go to state 477
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 478
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 479
    unary_identifier_declarator	go to state 171
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 1000
    unary_modifier	go to state 627
    scoping_name	go to state 75
    scope	go to state 76
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 744
    scope_opt_complex_name	go to state 745
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 532



state 1000

    unary_expression  ->  asterisk_or_ampersand . cast_expression   (rule 88)
    clean_typedef_declarator  ->  asterisk_or_ampersand . parameter_typedef_declarator   (rule 585)
    paren_typedef_declarator  ->  asterisk_or_ampersand . '(' simple_paren_typedef_declarator ')'   (rule 590)
    paren_typedef_declarator  ->  asterisk_or_ampersand . '(' TYPEDEFname ')'   (rule 592)
    paren_typedef_declarator  ->  asterisk_or_ampersand . paren_typedef_declarator   (rule 594)
    unary_identifier_declarator  ->  asterisk_or_ampersand . identifier_declarator   (rule 605)
    unary_modifier  ->  asterisk_or_ampersand . type_qualifier_list   (rule 637)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    NEW 	shift, and go to state 317
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 898
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 1079
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    paren_identifier_declarator	go to state 509
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 603
    type_qualifier_list	go to state 254
    type_qualifier	go to state 42
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    parameter_typedef_declarator	go to state 306
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 307
    postfix_paren_typedef_declarator	go to state 162
    identifier_declarator	go to state 255
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 1000
    unary_modifier	go to state 627
    scoping_name	go to state 75
    scope	go to state 899
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 507
    scope_opt_identifier	go to state 744
    scope_opt_complex_name	go to state 745
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 1001

    labeled_statement  ->  label ':' statement .   (rule 463)

    $default	reduce using rule 463 (labeled_statement)



state 1002

    argument_expression_list  ->  argument_expression_list . ',' assignment_expression   (rule 84)
    constructed_paren_typedef_declarator  ->  '(' TYPEDEFname postfixing_abstract_declarator ')' '(' argument_expression_list . ')'   (rule 215)

    ')' 	shift, and go to state 1080
    ',' 	shift, and go to state 547



state 1003

    constructed_parameter_typedef_declarator  ->  '(' clean_typedef_declarator ')' '(' argument_expression_list ')' .   (rule 218)

    $default	reduce using rule 218 (constructed_parameter_typedef_declarator)



state 1004

    argument_expression_list  ->  argument_expression_list . ',' assignment_expression   (rule 84)
    constructed_parameter_typedef_declarator  ->  '(' clean_typedef_declarator ')' postfixing_abstract_declarator '(' argument_expression_list . ')'   (rule 219)

    ')' 	shift, and go to state 1081
    ',' 	shift, and go to state 547



state 1005

    constructed_paren_typedef_declarator  ->  '(' paren_typedef_declarator ')' '(' argument_expression_list ')' .   (rule 212)

    $default	reduce using rule 212 (constructed_paren_typedef_declarator)



state 1006

    argument_expression_list  ->  argument_expression_list . ',' assignment_expression   (rule 84)
    constructed_paren_typedef_declarator  ->  '(' paren_typedef_declarator ')' postfixing_abstract_declarator '(' argument_expression_list . ')'   (rule 213)

    ')' 	shift, and go to state 1082
    ',' 	shift, and go to state 547



state 1007

    argument_expression_list  ->  argument_expression_list . ',' assignment_expression   (rule 84)
    constructed_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator postfixing_abstract_declarator ')' '(' argument_expression_list . ')'   (rule 214)

    ')' 	shift, and go to state 1083
    ',' 	shift, and go to state 547



state 1008

    nonunary_constructed_identifier_declarator  ->  '(' unary_identifier_declarator ')' '(' argument_expression_list ')' .   (rule 225)

    $default	reduce using rule 225 (nonunary_constructed_identifier_declarator)



state 1009

    argument_expression_list  ->  argument_expression_list . ',' assignment_expression   (rule 84)
    nonunary_constructed_identifier_declarator  ->  '(' unary_identifier_declarator ')' postfixing_abstract_declarator '(' argument_expression_list . ')'   (rule 226)

    ')' 	shift, and go to state 1084
    ',' 	shift, and go to state 547



state 1010

    initializer_group  ->  '{' initializer_list ',' . '}'   (rule 452)
    initializer_list  ->  initializer_list ',' . initializer_group   (rule 455)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335
    '{' 	shift, and go to state 724
    '}' 	shift, and go to state 1085

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 725
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    initializer_group	go to state 1086
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 1011

    initializer_group  ->  '{' initializer_list '}' .   (rule 451)

    $default	reduce using rule 451 (initializer_group)



state 1012

    old_parameter_type_list  ->  '(' type_name initializer ')' .   (rule 404)

    $default	reduce using rule 404 (old_parameter_type_list)



state 1013

    cast_expression  ->  '(' type_name ')' . cast_expression   (rule 115)
    parameter_type_list  ->  '(' type_name ')' . type_qualifier_list_opt   (rule 399)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    NEW 	shift, and go to state 317
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    CLCL	reduce using rule 644 (@22)
    $default	reduce using rule 61 (type_qualifier_list_opt)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    type_qualifier_list_opt	go to state 801
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 903
    type_qualifier_list	go to state 460
    type_qualifier	go to state 42
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 507
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 1014

    postfix_abstract_declarator  ->  '(' unary_abstract_declarator ')' postfixing_abstract_declarator .   (rule 633)

    $default	reduce using rule 633 (postfix_abstract_declarator)



state 1015

    postfix_expression  ->  TYPEDEFname '(' . ')'   (rule 73)
    postfix_expression  ->  TYPEDEFname '(' . argument_expression_list ')'   (rule 75)
    parameter_type_list  ->  '(' . ')' type_qualifier_list_opt   (rule 398)
    parameter_type_list  ->  '(' . type_name ')' type_qualifier_list_opt   (rule 399)
    parameter_type_list  ->  '(' . type_name initializer ')' type_qualifier_list_opt   (rule 400)
    parameter_type_list  ->  '(' . named_parameter_type_list ')' type_qualifier_list_opt   (rule 401)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 326
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    ELLIPSIS	shift, and go to state 329
    '(' 	shift, and go to state 330
    ')' 	shift, and go to state 738
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    argument_expression_list	go to state 739
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 359
    declaration_specifier	go to state 360
    type_specifier	go to state 361
    declaration_qualifier_list	go to state 362
    type_qualifier_list	go to state 363
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 364
    sue_type_specifier_elaboration	go to state 365
    sue_type_specifier	go to state 366
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 367
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    named_parameter_type_list	go to state 368
    parameter_list	go to state 369
    non_casting_parameter_declaration	go to state 370
    type_name	go to state 371
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 373
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 380



state 1016

    member_name  ->  declaration_qualifier_list CLCL . '~' declaration_qualifier_list   (rule 81)

    '~' 	shift, and go to state 1087



state 1017

    member_name  ->  type_qualifier_list CLCL . '~' type_qualifier_list   (rule 82)

    '~' 	shift, and go to state 1088



state 1018

    member_name  ->  basic_type_name CLCL . '~' basic_type_name   (rule 80)

    '~' 	shift, and go to state 1089



state 1019

    allocation_expression  ->  global_opt_scope_opt_operator_new '(' argument_expression_list ')' '(' . type_name ')' operator_new_initializer_opt   (rule 97)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 1090

    $default	reduce using rule 644 (@22)

    type_specifier	go to state 524
    type_qualifier_list	go to state 525
    type_qualifier	go to state 42
    basic_type_specifier	go to state 526
    sue_type_specifier_elaboration	go to state 527
    sue_type_specifier	go to state 528
    typedef_type_specifier	go to state 529
    basic_type_name	go to state 1091
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    type_name	go to state 1092
    scoping_name	go to state 75
    scope	go to state 143
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 1093



state 1020

    allocation_expression  ->  global_opt_scope_opt_operator_new '(' argument_expression_list ')' operator_new_type .   (rule 99)

    $default	reduce using rule 99 (allocation_expression)



state 1021

    allocation_expression  ->  global_opt_scope_opt_operator_new '(' type_name ')' operator_new_initializer_opt .   (rule 96)

    $default	reduce using rule 96 (allocation_expression)



state 1022

    operator_new_array_declarator  ->  '[' comma_expression ']' .   (rule 109)

    $default	reduce using rule 109 (operator_new_array_declarator)



state 1023

    operator_new_initializer_opt  ->  '(' ')' .   (rule 112)

    $default	reduce using rule 112 (operator_new_initializer_opt)



state 1024

    argument_expression_list  ->  argument_expression_list . ',' assignment_expression   (rule 84)
    operator_new_initializer_opt  ->  '(' argument_expression_list . ')'   (rule 113)

    ')' 	shift, and go to state 1094
    ',' 	shift, and go to state 547



state 1025

    operator_new_array_declarator  ->  operator_new_array_declarator '[' comma_expression . ']'   (rule 110)
    comma_expression  ->  comma_expression . ',' assignment_expression   (rule 169)

    ']' 	shift, and go to state 1095
    ',' 	shift, and go to state 752



state 1026

    deallocation_expression  ->  global_opt_scope_opt_delete '[' comma_expression ']' deallocation_expression .   (rule 118)

    $default	reduce using rule 118 (deallocation_expression)



state 1027

    conditional_expression  ->  logical_OR_expression '?' comma_expression ':' conditional_expression .   (rule 154)

    $default	reduce using rule 154 (conditional_expression)



state 1028

    constructor_init  ->  IDENTIFIER '(' argument_expression_list ')' .   (rule 568)

    $default	reduce using rule 568 (constructor_init)



state 1029

    constructor_init  ->  TYPEDEFname '(' argument_expression_list ')' .   (rule 570)

    $default	reduce using rule 570 (constructor_init)



state 1030

    constructor_init  ->  global_or_scoped_typedefname '(' argument_expression_list ')' .   (rule 572)

    $default	reduce using rule 572 (constructor_init)



state 1031

    bit_field_declarator  ->  TYPEDEFname @12 . ':' constant_expression   (rule 381)

    ':' 	shift, and go to state 1096



state 1032

    typedef_declaration_specifier  ->  TYPEDEFname . storage_class   (rule 267)
    typedef_type_specifier  ->  TYPEDEFname . type_qualifier   (rule 272)
    member_conflict_paren_postfix_declaring_item  ->  TYPEDEFname '(' TYPEDEFname . postfixing_abstract_declarator ')' member_pure_opt   (rule 371)
    non_casting_parameter_declaration  ->  TYPEDEFname . identifier_declarator   (rule 433)
    non_casting_parameter_declaration  ->  TYPEDEFname . parameter_typedef_declarator   (rule 434)
    type_name  ->  TYPEDEFname .   (rule 440)
    type_name  ->  TYPEDEFname . abstract_declarator   (rule 445)
    constructor_conflicting_parameter_list_and_body  ->  '(' TYPEDEFname . ')' type_qualifier_list_opt ';'   (rule 541)
    constructor_conflicting_parameter_list_and_body  ->  '(' TYPEDEFname . ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 550)
    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname . unary_abstract_declarator ')' type_qualifier_list_opt ';'   (rule 558)
    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname . unary_abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 559)
    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname . postfix_abstract_declarator ')' type_qualifier_list_opt ';'   (rule 560)
    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname . postfix_abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 561)
    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname . postfixing_abstract_declarator ')' type_qualifier_list_opt ';'   (rule 562)
    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname . postfixing_abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 563)
    postfix_paren_typedef_declarator  ->  '(' TYPEDEFname . postfixing_abstract_declarator ')'   (rule 598)
    simple_paren_typedef_declarator  ->  '(' TYPEDEFname . ')'   (rule 600)
    tag_name  ->  TYPEDEFname .   (rule 643)

    AUTO	shift, and go to state 2
    STRUCT	shift, and go to state 5
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 485
    '(' 	shift, and go to state 576
    ')' 	shift, and go to state 1097
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    '[' 	shift, and go to state 175

    CLCL	reduce using rule 643 (tag_name)
    $default	reduce using rule 440 (type_name)

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    type_qualifier	go to state 153
    storage_class	go to state 154
    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    parameter_typedef_declarator	go to state 510
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    identifier_declarator	go to state 511
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    abstract_declarator	go to state 512
    postfixing_abstract_declarator	go to state 1098
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 1099
    postfix_abstract_declarator	go to state 1100
    asterisk_or_ampersand	go to state 516
    unary_modifier	go to state 517
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 1033

    constructor_parameter_list_and_body  ->  '(' ')' . type_qualifier_list_opt ';'   (rule 532)
    constructor_parameter_list_and_body  ->  '(' ')' . type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 535)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 61 (type_qualifier_list_opt)

    type_qualifier_list_opt	go to state 1101
    type_qualifier_list	go to state 460
    type_qualifier	go to state 42



state 1034

    non_casting_parameter_declaration  ->  type_specifier . identifier_declarator   (rule 429)
    non_casting_parameter_declaration  ->  type_specifier . parameter_typedef_declarator   (rule 430)
    type_name  ->  type_specifier .   (rule 438)
    type_name  ->  type_specifier . abstract_declarator   (rule 443)
    constructor_conflicting_parameter_list_and_body  ->  '(' type_specifier . ')' type_qualifier_list_opt ';'   (rule 539)
    constructor_conflicting_parameter_list_and_body  ->  '(' type_specifier . abstract_declarator ')' type_qualifier_list_opt ';'   (rule 544)
    constructor_conflicting_parameter_list_and_body  ->  '(' type_specifier . ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 548)
    constructor_conflicting_parameter_list_and_body  ->  '(' type_specifier . abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 553)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 485
    '(' 	shift, and go to state 576
    ')' 	shift, and go to state 1102
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    '[' 	shift, and go to state 175

    $default	reduce using rule 438 (type_name)

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    parameter_typedef_declarator	go to state 580
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    identifier_declarator	go to state 581
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    abstract_declarator	go to state 1103
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 516
    unary_modifier	go to state 517
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 1035

    declaration_qualifier_list  ->  type_qualifier_list . storage_class   (rule 235)
    type_qualifier_list  ->  type_qualifier_list . type_qualifier   (rule 238)
    basic_type_specifier  ->  type_qualifier_list . basic_type_name   (rule 248)
    sue_type_specifier_elaboration  ->  type_qualifier_list . elaborated_type_name_elaboration   (rule 259)
    sue_type_specifier  ->  type_qualifier_list . elaborated_type_name   (rule 262)
    typedef_type_specifier  ->  type_qualifier_list . TYPEDEFname   (rule 270)
    typedef_type_specifier  ->  type_qualifier_list . global_or_scoped_typedefname   (rule 271)
    non_casting_parameter_declaration  ->  type_qualifier_list . identifier_declarator   (rule 437)
    type_name  ->  type_qualifier_list .   (rule 442)
    type_name  ->  type_qualifier_list . abstract_declarator   (rule 447)
    constructor_conflicting_parameter_list_and_body  ->  '(' type_qualifier_list . ')' type_qualifier_list_opt ';'   (rule 543)
    constructor_conflicting_parameter_list_and_body  ->  '(' type_qualifier_list . abstract_declarator ')' type_qualifier_list_opt ';'   (rule 547)
    constructor_conflicting_parameter_list_and_body  ->  '(' type_qualifier_list . ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 552)
    constructor_conflicting_parameter_list_and_body  ->  '(' type_qualifier_list . abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 556)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 206
    '(' 	shift, and go to state 583
    ')' 	shift, and go to state 1104
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    '[' 	shift, and go to state 175

    CLCL	reduce using rule 644 (@22)
    $default	reduce using rule 442 (type_name)

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    type_qualifier	go to state 208
    storage_class	go to state 209
    basic_type_name	go to state 210
    elaborated_type_name_elaboration	go to state 211
    elaborated_type_name	go to state 212
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    parameter_type_list	go to state 176
    identifier_declarator	go to state 588
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    abstract_declarator	go to state 1105
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 586
    unary_modifier	go to state 587
    scoping_name	go to state 75
    scope	go to state 76
    tag_name	go to state 77
    global_scope	go to state 78
    @22 	go to state 79
    global_or_scope	go to state 80
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 215



state 1036

    basic_declaration_specifier  ->  basic_type_name . storage_class   (rule 245)
    basic_type_specifier  ->  basic_type_name . basic_type_name   (rule 249)
    basic_type_specifier  ->  basic_type_name . type_qualifier   (rule 250)
    non_casting_parameter_declaration  ->  basic_type_name . identifier_declarator   (rule 431)
    non_casting_parameter_declaration  ->  basic_type_name . parameter_typedef_declarator   (rule 432)
    type_name  ->  basic_type_name .   (rule 439)
    type_name  ->  basic_type_name . abstract_declarator   (rule 444)
    constructor_conflicting_parameter_list_and_body  ->  '(' basic_type_name . ')' type_qualifier_list_opt ';'   (rule 540)
    constructor_conflicting_parameter_list_and_body  ->  '(' basic_type_name . abstract_declarator ')' type_qualifier_list_opt ';'   (rule 545)
    constructor_conflicting_parameter_list_and_body  ->  '(' basic_type_name . ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 549)
    constructor_conflicting_parameter_list_and_body  ->  '(' basic_type_name . abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 554)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 485
    '(' 	shift, and go to state 576
    ')' 	shift, and go to state 1106
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    '[' 	shift, and go to state 175

    $default	reduce using rule 439 (type_name)

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    type_qualifier	go to state 233
    storage_class	go to state 234
    basic_type_name	go to state 235
    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    parameter_typedef_declarator	go to state 591
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    identifier_declarator	go to state 592
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    abstract_declarator	go to state 1107
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 516
    unary_modifier	go to state 517
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 1037

    constructor_parameter_list_and_body  ->  '(' named_parameter_type_list . ')' type_qualifier_list_opt ';'   (rule 534)
    constructor_parameter_list_and_body  ->  '(' named_parameter_type_list . ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 537)

    ')' 	shift, and go to state 1108



state 1038

    named_parameter_type_list  ->  type_name . comma_opt_ellipsis   (rule 408)
    named_parameter_type_list  ->  type_name . initializer comma_opt_ellipsis   (rule 409)
    parameter_list  ->  type_name . ',' parameter_declaration   (rule 415)
    parameter_list  ->  type_name . initializer ',' parameter_declaration   (rule 416)
    constructor_parameter_list_and_body  ->  '(' type_name . initializer ')' type_qualifier_list_opt ';'   (rule 533)
    constructor_parameter_list_and_body  ->  '(' type_name . initializer ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 536)

    ELLIPSIS	shift, and go to state 595
    ',' 	shift, and go to state 600
    '=' 	shift, and go to state 490

    comma_opt_ellipsis	go to state 601
    initializer	go to state 1109



state 1039

    member_conflict_paren_postfix_declaring_item  ->  TYPEDEFname '(' paren_typedef_declarator . ')' member_pure_opt   (rule 369)
    member_conflict_paren_postfix_declaring_item  ->  TYPEDEFname '(' paren_typedef_declarator . ')' postfixing_abstract_declarator member_pure_opt   (rule 372)
    postfix_paren_typedef_declarator  ->  '(' paren_typedef_declarator . ')'   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' paren_typedef_declarator . ')' postfixing_abstract_declarator   (rule 599)

    ')' 	shift, and go to state 1110



state 1040

    member_conflict_paren_postfix_declaring_item  ->  TYPEDEFname '(' simple_paren_typedef_declarator . postfixing_abstract_declarator ')' member_pure_opt   (rule 370)
    postfix_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator . postfixing_abstract_declarator ')'   (rule 597)
    simple_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator . ')'   (rule 601)

    '(' 	shift, and go to state 473
    ')' 	shift, and go to state 482
    '[' 	shift, and go to state 175

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 1111
    array_abstract_declarator	go to state 178



state 1041

    typedef_declaration_specifier  ->  global_or_scoped_typedefname . storage_class   (rule 268)
    typedef_type_specifier  ->  global_or_scoped_typedefname . type_qualifier   (rule 273)
    non_casting_parameter_declaration  ->  global_or_scoped_typedefname . identifier_declarator   (rule 435)
    non_casting_parameter_declaration  ->  global_or_scoped_typedefname . parameter_typedef_declarator   (rule 436)
    type_name  ->  global_or_scoped_typedefname .   (rule 441)
    type_name  ->  global_or_scoped_typedefname . abstract_declarator   (rule 446)
    constructor_conflicting_parameter_list_and_body  ->  '(' global_or_scoped_typedefname . ')' type_qualifier_list_opt ';'   (rule 542)
    constructor_conflicting_parameter_list_and_body  ->  '(' global_or_scoped_typedefname . abstract_declarator ')' type_qualifier_list_opt ';'   (rule 546)
    constructor_conflicting_parameter_list_and_body  ->  '(' global_or_scoped_typedefname . ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 551)
    constructor_conflicting_parameter_list_and_body  ->  '(' global_or_scoped_typedefname . abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 555)

    AUTO	shift, and go to state 2
    STRUCT	shift, and go to state 5
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 485
    '(' 	shift, and go to state 576
    ')' 	shift, and go to state 1112
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    '[' 	shift, and go to state 175

    $default	reduce using rule 441 (type_name)

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    type_qualifier	go to state 273
    storage_class	go to state 274
    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    parameter_typedef_declarator	go to state 610
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    identifier_declarator	go to state 611
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    abstract_declarator	go to state 1113
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 516
    unary_modifier	go to state 517
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 1042

    bit_field_identifier_declarator  ->  ':' constant_expression .   (rule 382)

    $default	reduce using rule 382 (bit_field_identifier_declarator)



state 1043

    member_pure_opt  ->  '=' . OCTALconstant   (rule 378)

    OCTALconstant	shift, and go to state 1114



state 1044

    member_conflict_declaring_item  ->  TYPEDEFname parameter_typedef_declarator member_pure_opt .   (rule 350)

    $default	reduce using rule 350 (member_conflict_declaring_item)



state 1045

    member_conflict_declaring_item  ->  TYPEDEFname simple_paren_typedef_declarator member_pure_opt .   (rule 351)

    $default	reduce using rule 351 (member_conflict_declaring_item)



state 1046

    member_conflict_declaring_item  ->  TYPEDEFname identifier_declarator member_pure_opt .   (rule 349)

    $default	reduce using rule 349 (member_conflict_declaring_item)



state 1047

    bit_field_identifier_declarator  ->  identifier_declarator @13 . ':' constant_expression   (rule 384)

    ':' 	shift, and go to state 1115



state 1048

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    member_conflict_paren_declaring_item  ->  TYPEDEFname asterisk_or_ampersand '(' . simple_paren_typedef_declarator ')' member_pure_opt   (rule 356)
    member_conflict_paren_declaring_item  ->  TYPEDEFname asterisk_or_ampersand '(' . TYPEDEFname ')' member_pure_opt   (rule 358)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator   (rule 588)
    paren_typedef_declarator  ->  asterisk_or_ampersand '(' . simple_paren_typedef_declarator ')'   (rule 590)
    paren_typedef_declarator  ->  asterisk_or_ampersand '(' . TYPEDEFname ')'   (rule 592)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')'   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')'   (rule 597)
    postfix_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')'   (rule 598)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator   (rule 599)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 1116
    '(' 	shift, and go to state 625
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 620
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    clean_typedef_declarator	go to state 477
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 478
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 1117
    unary_identifier_declarator	go to state 171
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 626
    unary_modifier	go to state 627
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 1049

    member_conflict_paren_declaring_item  ->  TYPEDEFname asterisk_or_ampersand paren_typedef_declarator . member_pure_opt   (rule 360)
    paren_typedef_declarator  ->  asterisk_or_ampersand paren_typedef_declarator .   (rule 594)

    '=' 	shift, and go to state 1043

    '{' 	reduce using rule 594 (paren_typedef_declarator)
    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1118



state 1050

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    member_conflict_paren_declaring_item  ->  TYPEDEFname unary_modifier '(' . simple_paren_typedef_declarator ')' member_pure_opt   (rule 357)
    member_conflict_paren_declaring_item  ->  TYPEDEFname unary_modifier '(' . TYPEDEFname ')' member_pure_opt   (rule 359)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator   (rule 588)
    paren_typedef_declarator  ->  unary_modifier '(' . simple_paren_typedef_declarator ')'   (rule 591)
    paren_typedef_declarator  ->  unary_modifier '(' . TYPEDEFname ')'   (rule 593)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')'   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')'   (rule 597)
    postfix_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')'   (rule 598)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator   (rule 599)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 1119
    '(' 	shift, and go to state 625
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 620
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    clean_typedef_declarator	go to state 477
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 478
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 1120
    unary_identifier_declarator	go to state 171
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 626
    unary_modifier	go to state 627
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 1051

    member_conflict_paren_declaring_item  ->  TYPEDEFname unary_modifier paren_typedef_declarator . member_pure_opt   (rule 361)
    paren_typedef_declarator  ->  unary_modifier paren_typedef_declarator .   (rule 595)

    '=' 	shift, and go to state 1043

    '{' 	reduce using rule 595 (paren_typedef_declarator)
    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1121



state 1052

    typedef_declaration_specifier  ->  TYPEDEFname . storage_class   (rule 267)
    typedef_type_specifier  ->  TYPEDEFname . type_qualifier   (rule 272)
    member_conflict_paren_postfix_declaring_item  ->  declaration_specifier '(' TYPEDEFname . postfixing_abstract_declarator ')' member_pure_opt   (rule 375)
    non_casting_parameter_declaration  ->  TYPEDEFname . identifier_declarator   (rule 433)
    non_casting_parameter_declaration  ->  TYPEDEFname . parameter_typedef_declarator   (rule 434)
    type_name  ->  TYPEDEFname .   (rule 440)
    type_name  ->  TYPEDEFname . abstract_declarator   (rule 445)
    constructor_conflicting_parameter_list_and_body  ->  '(' TYPEDEFname . ')' type_qualifier_list_opt ';'   (rule 541)
    constructor_conflicting_parameter_list_and_body  ->  '(' TYPEDEFname . ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 550)
    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname . unary_abstract_declarator ')' type_qualifier_list_opt ';'   (rule 558)
    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname . unary_abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 559)
    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname . postfix_abstract_declarator ')' type_qualifier_list_opt ';'   (rule 560)
    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname . postfix_abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 561)
    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname . postfixing_abstract_declarator ')' type_qualifier_list_opt ';'   (rule 562)
    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname . postfixing_abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 563)
    postfix_paren_typedef_declarator  ->  '(' TYPEDEFname . postfixing_abstract_declarator ')'   (rule 598)
    simple_paren_typedef_declarator  ->  '(' TYPEDEFname . ')'   (rule 600)
    tag_name  ->  TYPEDEFname .   (rule 643)

    AUTO	shift, and go to state 2
    STRUCT	shift, and go to state 5
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 485
    '(' 	shift, and go to state 576
    ')' 	shift, and go to state 1097
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32
    '[' 	shift, and go to state 175

    CLCL	reduce using rule 643 (tag_name)
    $default	reduce using rule 440 (type_name)

    paren_identifier_declarator	go to state 509
    operator_function_name	go to state 34
    type_qualifier	go to state 153
    storage_class	go to state 154
    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    parameter_typedef_declarator	go to state 510
    clean_typedef_declarator	go to state 159
    clean_postfix_typedef_declarator	go to state 160
    identifier_declarator	go to state 511
    unary_identifier_declarator	go to state 69
    postfix_identifier_declarator	go to state 70
    abstract_declarator	go to state 512
    postfixing_abstract_declarator	go to state 1122
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 1099
    postfix_abstract_declarator	go to state 1100
    asterisk_or_ampersand	go to state 516
    unary_modifier	go to state 517
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 1053

    member_conflict_paren_postfix_declaring_item  ->  declaration_specifier '(' paren_typedef_declarator . ')' member_pure_opt   (rule 373)
    member_conflict_paren_postfix_declaring_item  ->  declaration_specifier '(' paren_typedef_declarator . ')' postfixing_abstract_declarator member_pure_opt   (rule 376)
    postfix_paren_typedef_declarator  ->  '(' paren_typedef_declarator . ')'   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' paren_typedef_declarator . ')' postfixing_abstract_declarator   (rule 599)

    ')' 	shift, and go to state 1123



state 1054

    member_conflict_paren_postfix_declaring_item  ->  declaration_specifier '(' simple_paren_typedef_declarator . postfixing_abstract_declarator ')' member_pure_opt   (rule 374)
    postfix_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator . postfixing_abstract_declarator ')'   (rule 597)
    simple_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator . ')'   (rule 601)

    '(' 	shift, and go to state 473
    ')' 	shift, and go to state 482
    '[' 	shift, and go to state 175

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 1124
    array_abstract_declarator	go to state 178



state 1055

    member_conflict_declaring_item  ->  declaration_specifier parameter_typedef_declarator member_pure_opt .   (rule 353)

    $default	reduce using rule 353 (member_conflict_declaring_item)



state 1056

    member_conflict_declaring_item  ->  declaration_specifier simple_paren_typedef_declarator member_pure_opt .   (rule 354)

    $default	reduce using rule 354 (member_conflict_declaring_item)



state 1057

    member_conflict_declaring_item  ->  declaration_specifier identifier_declarator member_pure_opt .   (rule 352)

    $default	reduce using rule 352 (member_conflict_declaring_item)



state 1058

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    member_conflict_paren_declaring_item  ->  declaration_specifier asterisk_or_ampersand '(' . simple_paren_typedef_declarator ')' member_pure_opt   (rule 362)
    member_conflict_paren_declaring_item  ->  declaration_specifier asterisk_or_ampersand '(' . TYPEDEFname ')' member_pure_opt   (rule 364)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator   (rule 588)
    paren_typedef_declarator  ->  asterisk_or_ampersand '(' . simple_paren_typedef_declarator ')'   (rule 590)
    paren_typedef_declarator  ->  asterisk_or_ampersand '(' . TYPEDEFname ')'   (rule 592)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')'   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')'   (rule 597)
    postfix_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')'   (rule 598)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator   (rule 599)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 1125
    '(' 	shift, and go to state 625
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 620
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    clean_typedef_declarator	go to state 477
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 478
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 1126
    unary_identifier_declarator	go to state 171
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 626
    unary_modifier	go to state 627
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 1059

    member_conflict_paren_declaring_item  ->  declaration_specifier asterisk_or_ampersand paren_typedef_declarator . member_pure_opt   (rule 366)
    paren_typedef_declarator  ->  asterisk_or_ampersand paren_typedef_declarator .   (rule 594)

    '=' 	shift, and go to state 1043

    '{' 	reduce using rule 594 (paren_typedef_declarator)
    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1127



state 1060

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    member_conflict_paren_declaring_item  ->  declaration_specifier unary_modifier '(' . simple_paren_typedef_declarator ')' member_pure_opt   (rule 363)
    member_conflict_paren_declaring_item  ->  declaration_specifier unary_modifier '(' . TYPEDEFname ')' member_pure_opt   (rule 365)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator   (rule 588)
    paren_typedef_declarator  ->  unary_modifier '(' . simple_paren_typedef_declarator ')'   (rule 591)
    paren_typedef_declarator  ->  unary_modifier '(' . TYPEDEFname ')'   (rule 593)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')'   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')'   (rule 597)
    postfix_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')'   (rule 598)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator   (rule 599)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    TYPEDEFname	shift, and go to state 1128
    '(' 	shift, and go to state 625
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 32

    paren_identifier_declarator	go to state 620
    operator_function_name	go to state 34
    aggregate_key	go to state 155
    clean_typedef_declarator	go to state 477
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 478
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 1129
    unary_identifier_declarator	go to state 171
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 626
    unary_modifier	go to state 627
    scoping_name	go to state 75
    scope	go to state 168
    tag_name	go to state 77
    scope_opt_identifier	go to state 81
    scope_opt_complex_name	go to state 82
    complex_name	go to state 83



state 1061

    member_conflict_paren_declaring_item  ->  declaration_specifier unary_modifier paren_typedef_declarator . member_pure_opt   (rule 367)
    paren_typedef_declarator  ->  unary_modifier paren_typedef_declarator .   (rule 595)

    '=' 	shift, and go to state 1043

    '{' 	reduce using rule 595 (paren_typedef_declarator)
    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1130



state 1062

    member_declaring_list  ->  type_specifier declarator member_pure_opt .   (rule 338)

    $default	reduce using rule 338 (member_declaring_list)



state 1063

    member_default_declaring_list  ->  declaration_qualifier_list identifier_declarator member_pure_opt .   (rule 333)

    $default	reduce using rule 333 (member_default_declaring_list)



state 1064

    member_default_declaring_list  ->  type_qualifier_list identifier_declarator member_pure_opt .   (rule 332)

    $default	reduce using rule 332 (member_default_declaring_list)



state 1065

    member_declaring_list  ->  basic_type_name declarator member_pure_opt .   (rule 339)

    $default	reduce using rule 339 (member_declaring_list)



state 1066

    member_default_declaring_list  ->  member_default_declaring_list ',' bit_field_identifier_declarator .   (rule 337)

    $default	reduce using rule 337 (member_default_declaring_list)



state 1067

    member_default_declaring_list  ->  member_default_declaring_list ',' identifier_declarator . member_pure_opt   (rule 334)
    bit_field_identifier_declarator  ->  identifier_declarator . @13 ':' constant_expression   (rule 384)

    '=' 	shift, and go to state 1043

    ':' 	reduce using rule 383 (@13)
    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1131
    @13 	go to state 1047



state 1068

    member_declaring_list  ->  member_declaring_list ',' bit_field_declarator .   (rule 348)

    $default	reduce using rule 348 (member_declaring_list)



state 1069

    member_declaring_list  ->  member_declaring_list ',' declarator . member_pure_opt   (rule 342)

    '=' 	shift, and go to state 1043

    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1132



state 1070

    member_declaring_list  ->  global_or_scoped_typedefname declarator member_pure_opt .   (rule 340)

    $default	reduce using rule 340 (member_declaring_list)



state 1071

    selection_statement  ->  SWITCH '(' comma_expression ')' . statement   (rule 474)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    BREAK	shift, and go to state 662
    LONG	shift, and go to state 6
    SWITCH	shift, and go to state 663
    CASE	shift, and go to state 664
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    RETURN	shift, and go to state 665
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    CONTINUE	shift, and go to state 666
    FOR 	shift, and go to state 667
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    DEFAULT	shift, and go to state 668
    GOTO	shift, and go to state 669
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    DO  	shift, and go to state 670
    IF  	shift, and go to state 671
    STATIC	shift, and go to state 20
    WHILE	shift, and go to state 672
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 673
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 674
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335
    '{' 	shift, and go to state 251

    CLCL	reduce using rule 644 (@22)
    $default	reduce using rule 171 (comma_expression_opt)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 676
    comma_expression_opt	go to state 677
    declaration	go to state 678
    default_declaring_list	go to state 36
    declaring_list	go to state 37
    declaration_specifier	go to state 450
    type_specifier	go to state 451
    declaration_qualifier_list	go to state 452
    type_qualifier_list	go to state 453
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 45
    sue_type_specifier_elaboration	go to state 46
    sue_type_specifier	go to state 47
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 679
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    statement	go to state 1133
    labeled_statement	go to state 681
    compound_statement	go to state 682
    expression_statement	go to state 683
    selection_statement	go to state 684
    iteration_statement	go to state 685
    jump_statement	go to state 686
    label	go to state 687
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 373
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 688



state 1072

    labeled_statement  ->  CASE constant_expression ':' statement .   (rule 464)

    $default	reduce using rule 464 (labeled_statement)



state 1073

    iteration_statement  ->  FOR '(' comma_expression_opt ';' . comma_expression_opt ';' comma_expression_opt ')' statement   (rule 477)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    CLCL	reduce using rule 644 (@22)
    $default	reduce using rule 171 (comma_expression_opt)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 676
    comma_expression_opt	go to state 1134
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 1074

    iteration_statement  ->  FOR '(' declaration comma_expression_opt . ';' comma_expression_opt ')' statement   (rule 478)

    ';' 	shift, and go to state 1135



state 1075

    iteration_statement  ->  DO statement WHILE '(' . comma_expression ')' ';'   (rule 476)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 1136
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 1076

    selection_statement  ->  IF '(' comma_expression ')' . statement   (rule 472)
    selection_statement  ->  IF '(' comma_expression ')' . statement ELSE statement   (rule 473)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    BREAK	shift, and go to state 662
    LONG	shift, and go to state 6
    SWITCH	shift, and go to state 663
    CASE	shift, and go to state 664
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    RETURN	shift, and go to state 665
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    CONTINUE	shift, and go to state 666
    FOR 	shift, and go to state 667
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    DEFAULT	shift, and go to state 668
    GOTO	shift, and go to state 669
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    DO  	shift, and go to state 670
    IF  	shift, and go to state 671
    STATIC	shift, and go to state 20
    WHILE	shift, and go to state 672
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 673
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 674
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335
    '{' 	shift, and go to state 251

    CLCL	reduce using rule 644 (@22)
    $default	reduce using rule 171 (comma_expression_opt)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 676
    comma_expression_opt	go to state 677
    declaration	go to state 678
    default_declaring_list	go to state 36
    declaring_list	go to state 37
    declaration_specifier	go to state 450
    type_specifier	go to state 451
    declaration_qualifier_list	go to state 452
    type_qualifier_list	go to state 453
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 45
    sue_type_specifier_elaboration	go to state 46
    sue_type_specifier	go to state 47
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 679
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    statement	go to state 1137
    labeled_statement	go to state 681
    compound_statement	go to state 682
    expression_statement	go to state 683
    selection_statement	go to state 684
    iteration_statement	go to state 685
    jump_statement	go to state 686
    label	go to state 687
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 373
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 688



state 1077

    iteration_statement  ->  WHILE '(' comma_expression_opt ')' . statement   (rule 475)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    BREAK	shift, and go to state 662
    LONG	shift, and go to state 6
    SWITCH	shift, and go to state 663
    CASE	shift, and go to state 664
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    RETURN	shift, and go to state 665
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    CONTINUE	shift, and go to state 666
    FOR 	shift, and go to state 667
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    DEFAULT	shift, and go to state 668
    GOTO	shift, and go to state 669
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    DO  	shift, and go to state 670
    IF  	shift, and go to state 671
    STATIC	shift, and go to state 20
    WHILE	shift, and go to state 672
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 673
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 674
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335
    '{' 	shift, and go to state 251

    CLCL	reduce using rule 644 (@22)
    $default	reduce using rule 171 (comma_expression_opt)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 676
    comma_expression_opt	go to state 677
    declaration	go to state 678
    default_declaring_list	go to state 36
    declaring_list	go to state 37
    declaration_specifier	go to state 450
    type_specifier	go to state 451
    declaration_qualifier_list	go to state 452
    type_qualifier_list	go to state 453
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 45
    sue_type_specifier_elaboration	go to state 46
    sue_type_specifier	go to state 47
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 679
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    statement	go to state 1138
    labeled_statement	go to state 681
    compound_statement	go to state 682
    expression_statement	go to state 683
    selection_statement	go to state 684
    iteration_statement	go to state 685
    jump_statement	go to state 686
    label	go to state 687
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 373
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 688



state 1078

    postfix_expression  ->  TYPEDEFname . '(' ')'   (rule 73)
    postfix_expression  ->  TYPEDEFname . '(' argument_expression_list ')'   (rule 75)
    typedef_type_specifier  ->  TYPEDEFname . type_qualifier   (rule 272)
    type_name  ->  TYPEDEFname .   (rule 440)
    type_name  ->  TYPEDEFname . abstract_declarator   (rule 445)
    postfix_paren_typedef_declarator  ->  '(' TYPEDEFname . postfixing_abstract_declarator ')'   (rule 598)
    simple_paren_typedef_declarator  ->  '(' TYPEDEFname . ')'   (rule 600)
    tag_name  ->  TYPEDEFname .   (rule 643)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 169
    '(' 	shift, and go to state 748
    ')' 	shift, and go to state 474
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '[' 	shift, and go to state 175

    ')' 	[reduce using rule 440 (type_name)]
    $default	reduce using rule 643 (tag_name)

    type_qualifier	go to state 153
    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    abstract_declarator	go to state 512
    postfixing_abstract_declarator	go to state 1139
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 749
    unary_modifier	go to state 750
    scoping_name	go to state 75
    scope	go to state 283
    tag_name	go to state 77



state 1079

    paren_identifier_declarator  ->  '(' . paren_identifier_declarator ')'   (rule 10)
    primary_expression  ->  '(' . comma_expression ')'   (rule 16)
    cast_expression  ->  '(' . type_name ')' cast_expression   (rule 115)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')'   (rule 587)
    clean_postfix_typedef_declarator  ->  '(' . clean_typedef_declarator ')' postfixing_abstract_declarator   (rule 588)
    paren_typedef_declarator  ->  asterisk_or_ampersand '(' . simple_paren_typedef_declarator ')'   (rule 590)
    paren_typedef_declarator  ->  asterisk_or_ampersand '(' . TYPEDEFname ')'   (rule 592)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')'   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' . simple_paren_typedef_declarator postfixing_abstract_declarator ')'   (rule 597)
    postfix_paren_typedef_declarator  ->  '(' . TYPEDEFname postfixing_abstract_declarator ')'   (rule 598)
    postfix_paren_typedef_declarator  ->  '(' . paren_typedef_declarator ')' postfixing_abstract_declarator   (rule 599)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')'   (rule 608)
    postfix_identifier_declarator  ->  '(' . unary_identifier_declarator ')' postfixing_abstract_declarator   (rule 609)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    ENUM	shift, and go to state 7
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 1140
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 999
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    paren_identifier_declarator	go to state 620
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 523
    type_specifier	go to state 524
    type_qualifier_list	go to state 525
    type_qualifier	go to state 42
    basic_type_specifier	go to state 526
    sue_type_specifier_elaboration	go to state 527
    sue_type_specifier	go to state 528
    typedef_type_specifier	go to state 529
    basic_type_name	go to state 530
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    type_name	go to state 531
    clean_typedef_declarator	go to state 477
    clean_postfix_typedef_declarator	go to state 160
    paren_typedef_declarator	go to state 478
    postfix_paren_typedef_declarator	go to state 162
    simple_paren_typedef_declarator	go to state 719
    unary_identifier_declarator	go to state 171
    postfix_identifier_declarator	go to state 70
    asterisk_or_ampersand	go to state 1000
    unary_modifier	go to state 627
    scoping_name	go to state 75
    scope	go to state 76
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 744
    scope_opt_complex_name	go to state 745
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 532



state 1080

    constructed_paren_typedef_declarator  ->  '(' TYPEDEFname postfixing_abstract_declarator ')' '(' argument_expression_list ')' .   (rule 215)

    $default	reduce using rule 215 (constructed_paren_typedef_declarator)



state 1081

    constructed_parameter_typedef_declarator  ->  '(' clean_typedef_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')' .   (rule 219)

    $default	reduce using rule 219 (constructed_parameter_typedef_declarator)



state 1082

    constructed_paren_typedef_declarator  ->  '(' paren_typedef_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')' .   (rule 213)

    $default	reduce using rule 213 (constructed_paren_typedef_declarator)



state 1083

    constructed_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator postfixing_abstract_declarator ')' '(' argument_expression_list ')' .   (rule 214)

    $default	reduce using rule 214 (constructed_paren_typedef_declarator)



state 1084

    nonunary_constructed_identifier_declarator  ->  '(' unary_identifier_declarator ')' postfixing_abstract_declarator '(' argument_expression_list ')' .   (rule 226)

    $default	reduce using rule 226 (nonunary_constructed_identifier_declarator)



state 1085

    initializer_group  ->  '{' initializer_list ',' '}' .   (rule 452)

    $default	reduce using rule 452 (initializer_group)



state 1086

    initializer_list  ->  initializer_list ',' initializer_group .   (rule 455)

    $default	reduce using rule 455 (initializer_list)



state 1087

    member_name  ->  declaration_qualifier_list CLCL '~' . declaration_qualifier_list   (rule 81)

    AUTO	shift, and go to state 2
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26

    declaration_qualifier_list	go to state 1141
    type_qualifier_list	go to state 1142
    type_qualifier	go to state 42
    storage_class	go to state 50



state 1088

    member_name  ->  type_qualifier_list CLCL '~' . type_qualifier_list   (rule 82)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    type_qualifier_list	go to state 1143
    type_qualifier	go to state 42



state 1089

    member_name  ->  basic_type_name CLCL '~' . basic_type_name   (rule 80)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18

    basic_type_name	go to state 1144



state 1090

    typedef_type_specifier  ->  TYPEDEFname . type_qualifier   (rule 272)
    type_name  ->  TYPEDEFname .   (rule 440)
    type_name  ->  TYPEDEFname . abstract_declarator   (rule 445)
    tag_name  ->  TYPEDEFname .   (rule 643)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 169
    '(' 	shift, and go to state 753
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '[' 	shift, and go to state 175

    CLCL	reduce using rule 643 (tag_name)
    $default	reduce using rule 440 (type_name)

    type_qualifier	go to state 153
    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    abstract_declarator	go to state 512
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 749
    unary_modifier	go to state 750
    scoping_name	go to state 75
    scope	go to state 283
    tag_name	go to state 77



state 1091

    basic_type_specifier  ->  basic_type_name . basic_type_name   (rule 249)
    basic_type_specifier  ->  basic_type_name . type_qualifier   (rule 250)
    type_name  ->  basic_type_name .   (rule 439)
    type_name  ->  basic_type_name . abstract_declarator   (rule 444)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    VOLATILE	shift, and go to state 19
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 169
    '(' 	shift, and go to state 753
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '[' 	shift, and go to state 175

    $default	reduce using rule 439 (type_name)

    type_qualifier	go to state 233
    basic_type_name	go to state 235
    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    abstract_declarator	go to state 593
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 749
    unary_modifier	go to state 750
    scoping_name	go to state 75
    scope	go to state 283
    tag_name	go to state 77



state 1092

    allocation_expression  ->  global_opt_scope_opt_operator_new '(' argument_expression_list ')' '(' type_name . ')' operator_new_initializer_opt   (rule 97)

    ')' 	shift, and go to state 1145



state 1093

    typedef_type_specifier  ->  global_or_scoped_typedefname . type_qualifier   (rule 273)
    type_name  ->  global_or_scoped_typedefname .   (rule 441)
    type_name  ->  global_or_scoped_typedefname . abstract_declarator   (rule 446)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 169
    '(' 	shift, and go to state 753
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '[' 	shift, and go to state 175

    $default	reduce using rule 441 (type_name)

    type_qualifier	go to state 273
    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    abstract_declarator	go to state 612
    postfixing_abstract_declarator	go to state 513
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 749
    unary_modifier	go to state 750
    scoping_name	go to state 75
    scope	go to state 283
    tag_name	go to state 77



state 1094

    operator_new_initializer_opt  ->  '(' argument_expression_list ')' .   (rule 113)

    $default	reduce using rule 113 (operator_new_initializer_opt)



state 1095

    operator_new_array_declarator  ->  operator_new_array_declarator '[' comma_expression ']' .   (rule 110)

    $default	reduce using rule 110 (operator_new_array_declarator)



state 1096

    bit_field_declarator  ->  TYPEDEFname @12 ':' . constant_expression   (rule 381)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 384
    constant_expression	go to state 1146
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 1097

    constructor_conflicting_parameter_list_and_body  ->  '(' TYPEDEFname ')' . type_qualifier_list_opt ';'   (rule 541)
    constructor_conflicting_parameter_list_and_body  ->  '(' TYPEDEFname ')' . type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 550)
    simple_paren_typedef_declarator  ->  '(' TYPEDEFname ')' .   (rule 600)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    ',' 	reduce using rule 600 (simple_paren_typedef_declarator)
    '=' 	reduce using rule 600 (simple_paren_typedef_declarator)
    ';' 	reduce using rule 61 (type_qualifier_list_opt)
    ';' 	[reduce using rule 600 (simple_paren_typedef_declarator)]
    '{' 	reduce using rule 61 (type_qualifier_list_opt)
    '{' 	[reduce using rule 600 (simple_paren_typedef_declarator)]
    $default	reduce using rule 61 (type_qualifier_list_opt)

    type_qualifier_list_opt	go to state 1147
    type_qualifier_list	go to state 460
    type_qualifier	go to state 42



state 1098

    member_conflict_paren_postfix_declaring_item  ->  TYPEDEFname '(' TYPEDEFname postfixing_abstract_declarator . ')' member_pure_opt   (rule 371)
    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname postfixing_abstract_declarator . ')' type_qualifier_list_opt ';'   (rule 562)
    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname postfixing_abstract_declarator . ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 563)
    postfix_paren_typedef_declarator  ->  '(' TYPEDEFname postfixing_abstract_declarator . ')'   (rule 598)
    abstract_declarator  ->  postfixing_abstract_declarator .   (rule 620)

    ')' 	shift, and go to state 1148

    $default	reduce using rule 620 (abstract_declarator)



state 1099

    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname unary_abstract_declarator . ')' type_qualifier_list_opt ';'   (rule 558)
    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname unary_abstract_declarator . ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 559)
    abstract_declarator  ->  unary_abstract_declarator .   (rule 618)

    ')' 	shift, and go to state 1149

    $default	reduce using rule 618 (abstract_declarator)



state 1100

    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname postfix_abstract_declarator . ')' type_qualifier_list_opt ';'   (rule 560)
    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname postfix_abstract_declarator . ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 561)
    abstract_declarator  ->  postfix_abstract_declarator .   (rule 619)

    ')' 	shift, and go to state 1150

    $default	reduce using rule 619 (abstract_declarator)



state 1101

    constructor_parameter_list_and_body  ->  '(' ')' type_qualifier_list_opt . ';'   (rule 532)
    constructor_parameter_list_and_body  ->  '(' ')' type_qualifier_list_opt . constructor_init_list_opt compound_statement   (rule 535)

    ':' 	shift, and go to state 406
    ';' 	shift, and go to state 1151

    $default	reduce using rule 564 (constructor_init_list_opt)

    constructor_init_list_opt	go to state 1152
    constructor_init_list	go to state 408



state 1102

    constructor_conflicting_parameter_list_and_body  ->  '(' type_specifier ')' . type_qualifier_list_opt ';'   (rule 539)
    constructor_conflicting_parameter_list_and_body  ->  '(' type_specifier ')' . type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 548)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 61 (type_qualifier_list_opt)

    type_qualifier_list_opt	go to state 1153
    type_qualifier_list	go to state 460
    type_qualifier	go to state 42



state 1103

    type_name  ->  type_specifier abstract_declarator .   (rule 443)
    constructor_conflicting_parameter_list_and_body  ->  '(' type_specifier abstract_declarator . ')' type_qualifier_list_opt ';'   (rule 544)
    constructor_conflicting_parameter_list_and_body  ->  '(' type_specifier abstract_declarator . ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 553)

    ')' 	shift, and go to state 1154

    $default	reduce using rule 443 (type_name)



state 1104

    constructor_conflicting_parameter_list_and_body  ->  '(' type_qualifier_list ')' . type_qualifier_list_opt ';'   (rule 543)
    constructor_conflicting_parameter_list_and_body  ->  '(' type_qualifier_list ')' . type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 552)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 61 (type_qualifier_list_opt)

    type_qualifier_list_opt	go to state 1155
    type_qualifier_list	go to state 460
    type_qualifier	go to state 42



state 1105

    type_name  ->  type_qualifier_list abstract_declarator .   (rule 447)
    constructor_conflicting_parameter_list_and_body  ->  '(' type_qualifier_list abstract_declarator . ')' type_qualifier_list_opt ';'   (rule 547)
    constructor_conflicting_parameter_list_and_body  ->  '(' type_qualifier_list abstract_declarator . ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 556)

    ')' 	shift, and go to state 1156

    $default	reduce using rule 447 (type_name)



state 1106

    constructor_conflicting_parameter_list_and_body  ->  '(' basic_type_name ')' . type_qualifier_list_opt ';'   (rule 540)
    constructor_conflicting_parameter_list_and_body  ->  '(' basic_type_name ')' . type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 549)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 61 (type_qualifier_list_opt)

    type_qualifier_list_opt	go to state 1157
    type_qualifier_list	go to state 460
    type_qualifier	go to state 42



state 1107

    type_name  ->  basic_type_name abstract_declarator .   (rule 444)
    constructor_conflicting_parameter_list_and_body  ->  '(' basic_type_name abstract_declarator . ')' type_qualifier_list_opt ';'   (rule 545)
    constructor_conflicting_parameter_list_and_body  ->  '(' basic_type_name abstract_declarator . ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 554)

    ')' 	shift, and go to state 1158

    $default	reduce using rule 444 (type_name)



state 1108

    constructor_parameter_list_and_body  ->  '(' named_parameter_type_list ')' . type_qualifier_list_opt ';'   (rule 534)
    constructor_parameter_list_and_body  ->  '(' named_parameter_type_list ')' . type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 537)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 61 (type_qualifier_list_opt)

    type_qualifier_list_opt	go to state 1159
    type_qualifier_list	go to state 460
    type_qualifier	go to state 42



state 1109

    named_parameter_type_list  ->  type_name initializer . comma_opt_ellipsis   (rule 409)
    parameter_list  ->  type_name initializer . ',' parameter_declaration   (rule 416)
    constructor_parameter_list_and_body  ->  '(' type_name initializer . ')' type_qualifier_list_opt ';'   (rule 533)
    constructor_parameter_list_and_body  ->  '(' type_name initializer . ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 536)

    ELLIPSIS	shift, and go to state 595
    ')' 	shift, and go to state 1160
    ',' 	shift, and go to state 804

    comma_opt_ellipsis	go to state 805



state 1110

    member_conflict_paren_postfix_declaring_item  ->  TYPEDEFname '(' paren_typedef_declarator ')' . member_pure_opt   (rule 369)
    member_conflict_paren_postfix_declaring_item  ->  TYPEDEFname '(' paren_typedef_declarator ')' . postfixing_abstract_declarator member_pure_opt   (rule 372)
    postfix_paren_typedef_declarator  ->  '(' paren_typedef_declarator ')' .   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' paren_typedef_declarator ')' . postfixing_abstract_declarator   (rule 599)

    '(' 	shift, and go to state 473
    '[' 	shift, and go to state 175
    '=' 	shift, and go to state 1043

    '{' 	reduce using rule 596 (postfix_paren_typedef_declarator)
    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1161
    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 1162
    array_abstract_declarator	go to state 178



state 1111

    member_conflict_paren_postfix_declaring_item  ->  TYPEDEFname '(' simple_paren_typedef_declarator postfixing_abstract_declarator . ')' member_pure_opt   (rule 370)
    postfix_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator postfixing_abstract_declarator . ')'   (rule 597)

    ')' 	shift, and go to state 1163



state 1112

    constructor_conflicting_parameter_list_and_body  ->  '(' global_or_scoped_typedefname ')' . type_qualifier_list_opt ';'   (rule 542)
    constructor_conflicting_parameter_list_and_body  ->  '(' global_or_scoped_typedefname ')' . type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 551)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 61 (type_qualifier_list_opt)

    type_qualifier_list_opt	go to state 1164
    type_qualifier_list	go to state 460
    type_qualifier	go to state 42



state 1113

    type_name  ->  global_or_scoped_typedefname abstract_declarator .   (rule 446)
    constructor_conflicting_parameter_list_and_body  ->  '(' global_or_scoped_typedefname abstract_declarator . ')' type_qualifier_list_opt ';'   (rule 546)
    constructor_conflicting_parameter_list_and_body  ->  '(' global_or_scoped_typedefname abstract_declarator . ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 555)

    ')' 	shift, and go to state 1165

    $default	reduce using rule 446 (type_name)



state 1114

    member_pure_opt  ->  '=' OCTALconstant .   (rule 378)

    $default	reduce using rule 378 (member_pure_opt)



state 1115

    bit_field_identifier_declarator  ->  identifier_declarator @13 ':' . constant_expression   (rule 384)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    $default	reduce using rule 644 (@22)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 383
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 384
    constant_expression	go to state 1166
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 1116

    member_conflict_paren_declaring_item  ->  TYPEDEFname asterisk_or_ampersand '(' TYPEDEFname . ')' member_pure_opt   (rule 358)
    paren_typedef_declarator  ->  asterisk_or_ampersand '(' TYPEDEFname . ')'   (rule 592)
    postfix_paren_typedef_declarator  ->  '(' TYPEDEFname . postfixing_abstract_declarator ')'   (rule 598)
    tag_name  ->  TYPEDEFname .   (rule 643)

    '(' 	shift, and go to state 473
    ')' 	shift, and go to state 1167
    '[' 	shift, and go to state 175

    $default	reduce using rule 643 (tag_name)

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 706
    array_abstract_declarator	go to state 178



state 1117

    member_conflict_paren_declaring_item  ->  TYPEDEFname asterisk_or_ampersand '(' simple_paren_typedef_declarator . ')' member_pure_opt   (rule 356)
    paren_typedef_declarator  ->  asterisk_or_ampersand '(' simple_paren_typedef_declarator . ')'   (rule 590)
    postfix_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator . postfixing_abstract_declarator ')'   (rule 597)

    '(' 	shift, and go to state 473
    ')' 	shift, and go to state 1168
    '[' 	shift, and go to state 175

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 709
    array_abstract_declarator	go to state 178



state 1118

    member_conflict_paren_declaring_item  ->  TYPEDEFname asterisk_or_ampersand paren_typedef_declarator member_pure_opt .   (rule 360)

    $default	reduce using rule 360 (member_conflict_paren_declaring_item)



state 1119

    member_conflict_paren_declaring_item  ->  TYPEDEFname unary_modifier '(' TYPEDEFname . ')' member_pure_opt   (rule 359)
    paren_typedef_declarator  ->  unary_modifier '(' TYPEDEFname . ')'   (rule 593)
    postfix_paren_typedef_declarator  ->  '(' TYPEDEFname . postfixing_abstract_declarator ')'   (rule 598)
    tag_name  ->  TYPEDEFname .   (rule 643)

    '(' 	shift, and go to state 473
    ')' 	shift, and go to state 1169
    '[' 	shift, and go to state 175

    $default	reduce using rule 643 (tag_name)

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 706
    array_abstract_declarator	go to state 178



state 1120

    member_conflict_paren_declaring_item  ->  TYPEDEFname unary_modifier '(' simple_paren_typedef_declarator . ')' member_pure_opt   (rule 357)
    paren_typedef_declarator  ->  unary_modifier '(' simple_paren_typedef_declarator . ')'   (rule 591)
    postfix_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator . postfixing_abstract_declarator ')'   (rule 597)

    '(' 	shift, and go to state 473
    ')' 	shift, and go to state 1170
    '[' 	shift, and go to state 175

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 709
    array_abstract_declarator	go to state 178



state 1121

    member_conflict_paren_declaring_item  ->  TYPEDEFname unary_modifier paren_typedef_declarator member_pure_opt .   (rule 361)

    $default	reduce using rule 361 (member_conflict_paren_declaring_item)



state 1122

    member_conflict_paren_postfix_declaring_item  ->  declaration_specifier '(' TYPEDEFname postfixing_abstract_declarator . ')' member_pure_opt   (rule 375)
    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname postfixing_abstract_declarator . ')' type_qualifier_list_opt ';'   (rule 562)
    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname postfixing_abstract_declarator . ')' type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 563)
    postfix_paren_typedef_declarator  ->  '(' TYPEDEFname postfixing_abstract_declarator . ')'   (rule 598)
    abstract_declarator  ->  postfixing_abstract_declarator .   (rule 620)

    ')' 	shift, and go to state 1171

    $default	reduce using rule 620 (abstract_declarator)



state 1123

    member_conflict_paren_postfix_declaring_item  ->  declaration_specifier '(' paren_typedef_declarator ')' . member_pure_opt   (rule 373)
    member_conflict_paren_postfix_declaring_item  ->  declaration_specifier '(' paren_typedef_declarator ')' . postfixing_abstract_declarator member_pure_opt   (rule 376)
    postfix_paren_typedef_declarator  ->  '(' paren_typedef_declarator ')' .   (rule 596)
    postfix_paren_typedef_declarator  ->  '(' paren_typedef_declarator ')' . postfixing_abstract_declarator   (rule 599)

    '(' 	shift, and go to state 473
    '[' 	shift, and go to state 175
    '=' 	shift, and go to state 1043

    '{' 	reduce using rule 596 (postfix_paren_typedef_declarator)
    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1172
    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 1173
    array_abstract_declarator	go to state 178



state 1124

    member_conflict_paren_postfix_declaring_item  ->  declaration_specifier '(' simple_paren_typedef_declarator postfixing_abstract_declarator . ')' member_pure_opt   (rule 374)
    postfix_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator postfixing_abstract_declarator . ')'   (rule 597)

    ')' 	shift, and go to state 1174



state 1125

    member_conflict_paren_declaring_item  ->  declaration_specifier asterisk_or_ampersand '(' TYPEDEFname . ')' member_pure_opt   (rule 364)
    paren_typedef_declarator  ->  asterisk_or_ampersand '(' TYPEDEFname . ')'   (rule 592)
    postfix_paren_typedef_declarator  ->  '(' TYPEDEFname . postfixing_abstract_declarator ')'   (rule 598)
    tag_name  ->  TYPEDEFname .   (rule 643)

    '(' 	shift, and go to state 473
    ')' 	shift, and go to state 1175
    '[' 	shift, and go to state 175

    $default	reduce using rule 643 (tag_name)

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 706
    array_abstract_declarator	go to state 178



state 1126

    member_conflict_paren_declaring_item  ->  declaration_specifier asterisk_or_ampersand '(' simple_paren_typedef_declarator . ')' member_pure_opt   (rule 362)
    paren_typedef_declarator  ->  asterisk_or_ampersand '(' simple_paren_typedef_declarator . ')'   (rule 590)
    postfix_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator . postfixing_abstract_declarator ')'   (rule 597)

    '(' 	shift, and go to state 473
    ')' 	shift, and go to state 1176
    '[' 	shift, and go to state 175

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 709
    array_abstract_declarator	go to state 178



state 1127

    member_conflict_paren_declaring_item  ->  declaration_specifier asterisk_or_ampersand paren_typedef_declarator member_pure_opt .   (rule 366)

    $default	reduce using rule 366 (member_conflict_paren_declaring_item)



state 1128

    member_conflict_paren_declaring_item  ->  declaration_specifier unary_modifier '(' TYPEDEFname . ')' member_pure_opt   (rule 365)
    paren_typedef_declarator  ->  unary_modifier '(' TYPEDEFname . ')'   (rule 593)
    postfix_paren_typedef_declarator  ->  '(' TYPEDEFname . postfixing_abstract_declarator ')'   (rule 598)
    tag_name  ->  TYPEDEFname .   (rule 643)

    '(' 	shift, and go to state 473
    ')' 	shift, and go to state 1177
    '[' 	shift, and go to state 175

    $default	reduce using rule 643 (tag_name)

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 706
    array_abstract_declarator	go to state 178



state 1129

    member_conflict_paren_declaring_item  ->  declaration_specifier unary_modifier '(' simple_paren_typedef_declarator . ')' member_pure_opt   (rule 363)
    paren_typedef_declarator  ->  unary_modifier '(' simple_paren_typedef_declarator . ')'   (rule 591)
    postfix_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator . postfixing_abstract_declarator ')'   (rule 597)

    '(' 	shift, and go to state 473
    ')' 	shift, and go to state 1178
    '[' 	shift, and go to state 175

    parameter_type_list	go to state 176
    postfixing_abstract_declarator	go to state 709
    array_abstract_declarator	go to state 178



state 1130

    member_conflict_paren_declaring_item  ->  declaration_specifier unary_modifier paren_typedef_declarator member_pure_opt .   (rule 367)

    $default	reduce using rule 367 (member_conflict_paren_declaring_item)



state 1131

    member_default_declaring_list  ->  member_default_declaring_list ',' identifier_declarator member_pure_opt .   (rule 334)

    $default	reduce using rule 334 (member_default_declaring_list)



state 1132

    member_declaring_list  ->  member_declaring_list ',' declarator member_pure_opt .   (rule 342)

    $default	reduce using rule 342 (member_declaring_list)



state 1133

    selection_statement  ->  SWITCH '(' comma_expression ')' statement .   (rule 474)

    $default	reduce using rule 474 (selection_statement)



state 1134

    iteration_statement  ->  FOR '(' comma_expression_opt ';' comma_expression_opt . ';' comma_expression_opt ')' statement   (rule 477)

    ';' 	shift, and go to state 1179



state 1135

    iteration_statement  ->  FOR '(' declaration comma_expression_opt ';' . comma_expression_opt ')' statement   (rule 478)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    CLCL	reduce using rule 644 (@22)
    $default	reduce using rule 171 (comma_expression_opt)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 676
    comma_expression_opt	go to state 1180
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 1136

    comma_expression  ->  comma_expression . ',' assignment_expression   (rule 169)
    iteration_statement  ->  DO statement WHILE '(' comma_expression . ')' ';'   (rule 476)

    ')' 	shift, and go to state 1181
    ',' 	shift, and go to state 752



state 1137

    selection_statement  ->  IF '(' comma_expression ')' statement .   (rule 472)
    selection_statement  ->  IF '(' comma_expression ')' statement . ELSE statement   (rule 473)

    ELSE	shift, and go to state 1182

    ELSE	[reduce using rule 472 (selection_statement)]
    $default	reduce using rule 472 (selection_statement)



state 1138

    iteration_statement  ->  WHILE '(' comma_expression_opt ')' statement .   (rule 475)

    $default	reduce using rule 475 (iteration_statement)



state 1139

    postfix_paren_typedef_declarator  ->  '(' TYPEDEFname postfixing_abstract_declarator . ')'   (rule 598)
    abstract_declarator  ->  postfixing_abstract_declarator .   (rule 620)

    ')' 	shift, and go to state 870

    ')' 	[reduce using rule 620 (abstract_declarator)]
    $default	reduce using rule 620 (abstract_declarator)



state 1140

    postfix_expression  ->  TYPEDEFname . '(' ')'   (rule 73)
    postfix_expression  ->  TYPEDEFname . '(' argument_expression_list ')'   (rule 75)
    typedef_type_specifier  ->  TYPEDEFname . type_qualifier   (rule 272)
    type_name  ->  TYPEDEFname .   (rule 440)
    type_name  ->  TYPEDEFname . abstract_declarator   (rule 445)
    paren_typedef_declarator  ->  asterisk_or_ampersand '(' TYPEDEFname . ')'   (rule 592)
    postfix_paren_typedef_declarator  ->  '(' TYPEDEFname . postfixing_abstract_declarator ')'   (rule 598)
    tag_name  ->  TYPEDEFname .   (rule 643)

    STRUCT	shift, and go to state 5
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 89
    TYPEDEFname	shift, and go to state 169
    '(' 	shift, and go to state 748
    ')' 	shift, and go to state 881
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '[' 	shift, and go to state 175

    ')' 	[reduce using rule 440 (type_name)]
    $default	reduce using rule 643 (tag_name)

    type_qualifier	go to state 153
    aggregate_key	go to state 155
    parameter_type_list	go to state 176
    abstract_declarator	go to state 512
    postfixing_abstract_declarator	go to state 1139
    array_abstract_declarator	go to state 178
    unary_abstract_declarator	go to state 514
    postfix_abstract_declarator	go to state 515
    asterisk_or_ampersand	go to state 749
    unary_modifier	go to state 750
    scoping_name	go to state 75
    scope	go to state 283
    tag_name	go to state 77



state 1141

    member_name  ->  declaration_qualifier_list CLCL '~' declaration_qualifier_list .   (rule 81)
    declaration_qualifier_list  ->  declaration_qualifier_list . declaration_qualifier   (rule 236)

    AUTO	shift, and go to state 2
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26

    $default	reduce using rule 81 (member_name)

    declaration_qualifier	go to state 195
    type_qualifier	go to state 196
    storage_class	go to state 197



state 1142

    declaration_qualifier_list  ->  type_qualifier_list . storage_class   (rule 235)
    type_qualifier_list  ->  type_qualifier_list . type_qualifier   (rule 238)

    AUTO	shift, and go to state 2
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    EXTERN	shift, and go to state 145
    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    STATIC	shift, and go to state 20
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26

    type_qualifier	go to state 208
    storage_class	go to state 209



state 1143

    member_name  ->  type_qualifier_list CLCL '~' type_qualifier_list .   (rule 82)
    type_qualifier_list  ->  type_qualifier_list . type_qualifier   (rule 238)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 82 (member_name)

    type_qualifier	go to state 208



state 1144

    member_name  ->  basic_type_name CLCL '~' basic_type_name .   (rule 80)

    $default	reduce using rule 80 (member_name)



state 1145

    allocation_expression  ->  global_opt_scope_opt_operator_new '(' argument_expression_list ')' '(' type_name ')' . operator_new_initializer_opt   (rule 97)

    '(' 	shift, and go to state 918

    $default	reduce using rule 111 (operator_new_initializer_opt)

    operator_new_initializer_opt	go to state 1183



state 1146

    bit_field_declarator  ->  TYPEDEFname @12 ':' constant_expression .   (rule 381)

    $default	reduce using rule 381 (bit_field_declarator)



state 1147

    constructor_conflicting_parameter_list_and_body  ->  '(' TYPEDEFname ')' type_qualifier_list_opt . ';'   (rule 541)
    constructor_conflicting_parameter_list_and_body  ->  '(' TYPEDEFname ')' type_qualifier_list_opt . constructor_init_list_opt compound_statement   (rule 550)

    ':' 	shift, and go to state 406
    ';' 	shift, and go to state 1184

    $default	reduce using rule 564 (constructor_init_list_opt)

    constructor_init_list_opt	go to state 1185
    constructor_init_list	go to state 408



state 1148

    member_conflict_paren_postfix_declaring_item  ->  TYPEDEFname '(' TYPEDEFname postfixing_abstract_declarator ')' . member_pure_opt   (rule 371)
    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname postfixing_abstract_declarator ')' . type_qualifier_list_opt ';'   (rule 562)
    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname postfixing_abstract_declarator ')' . type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 563)
    postfix_paren_typedef_declarator  ->  '(' TYPEDEFname postfixing_abstract_declarator ')' .   (rule 598)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    '=' 	shift, and go to state 1043

    ',' 	reduce using rule 377 (member_pure_opt)
    ';' 	reduce using rule 61 (type_qualifier_list_opt)
    ';' 	[reduce using rule 377 (member_pure_opt)]
    '{' 	reduce using rule 61 (type_qualifier_list_opt)
    '{' 	[reduce using rule 598 (postfix_paren_typedef_declarator)]
    $default	reduce using rule 61 (type_qualifier_list_opt)

    type_qualifier_list_opt	go to state 1186
    type_qualifier_list	go to state 460
    type_qualifier	go to state 42
    member_pure_opt	go to state 1187



state 1149

    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname unary_abstract_declarator ')' . type_qualifier_list_opt ';'   (rule 558)
    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname unary_abstract_declarator ')' . type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 559)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 61 (type_qualifier_list_opt)

    type_qualifier_list_opt	go to state 1188
    type_qualifier_list	go to state 460
    type_qualifier	go to state 42



state 1150

    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname postfix_abstract_declarator ')' . type_qualifier_list_opt ';'   (rule 560)
    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname postfix_abstract_declarator ')' . type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 561)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 61 (type_qualifier_list_opt)

    type_qualifier_list_opt	go to state 1189
    type_qualifier_list	go to state 460
    type_qualifier	go to state 42



state 1151

    constructor_parameter_list_and_body  ->  '(' ')' type_qualifier_list_opt ';' .   (rule 532)

    $default	reduce using rule 532 (constructor_parameter_list_and_body)



state 1152

    constructor_parameter_list_and_body  ->  '(' ')' type_qualifier_list_opt constructor_init_list_opt . compound_statement   (rule 535)

    '{' 	shift, and go to state 251

    compound_statement	go to state 1190



state 1153

    constructor_conflicting_parameter_list_and_body  ->  '(' type_specifier ')' type_qualifier_list_opt . ';'   (rule 539)
    constructor_conflicting_parameter_list_and_body  ->  '(' type_specifier ')' type_qualifier_list_opt . constructor_init_list_opt compound_statement   (rule 548)

    ':' 	shift, and go to state 406
    ';' 	shift, and go to state 1191

    $default	reduce using rule 564 (constructor_init_list_opt)

    constructor_init_list_opt	go to state 1192
    constructor_init_list	go to state 408



state 1154

    constructor_conflicting_parameter_list_and_body  ->  '(' type_specifier abstract_declarator ')' . type_qualifier_list_opt ';'   (rule 544)
    constructor_conflicting_parameter_list_and_body  ->  '(' type_specifier abstract_declarator ')' . type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 553)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 61 (type_qualifier_list_opt)

    type_qualifier_list_opt	go to state 1193
    type_qualifier_list	go to state 460
    type_qualifier	go to state 42



state 1155

    constructor_conflicting_parameter_list_and_body  ->  '(' type_qualifier_list ')' type_qualifier_list_opt . ';'   (rule 543)
    constructor_conflicting_parameter_list_and_body  ->  '(' type_qualifier_list ')' type_qualifier_list_opt . constructor_init_list_opt compound_statement   (rule 552)

    ':' 	shift, and go to state 406
    ';' 	shift, and go to state 1194

    $default	reduce using rule 564 (constructor_init_list_opt)

    constructor_init_list_opt	go to state 1195
    constructor_init_list	go to state 408



state 1156

    constructor_conflicting_parameter_list_and_body  ->  '(' type_qualifier_list abstract_declarator ')' . type_qualifier_list_opt ';'   (rule 547)
    constructor_conflicting_parameter_list_and_body  ->  '(' type_qualifier_list abstract_declarator ')' . type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 556)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 61 (type_qualifier_list_opt)

    type_qualifier_list_opt	go to state 1196
    type_qualifier_list	go to state 460
    type_qualifier	go to state 42



state 1157

    constructor_conflicting_parameter_list_and_body  ->  '(' basic_type_name ')' type_qualifier_list_opt . ';'   (rule 540)
    constructor_conflicting_parameter_list_and_body  ->  '(' basic_type_name ')' type_qualifier_list_opt . constructor_init_list_opt compound_statement   (rule 549)

    ':' 	shift, and go to state 406
    ';' 	shift, and go to state 1197

    $default	reduce using rule 564 (constructor_init_list_opt)

    constructor_init_list_opt	go to state 1198
    constructor_init_list	go to state 408



state 1158

    constructor_conflicting_parameter_list_and_body  ->  '(' basic_type_name abstract_declarator ')' . type_qualifier_list_opt ';'   (rule 545)
    constructor_conflicting_parameter_list_and_body  ->  '(' basic_type_name abstract_declarator ')' . type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 554)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 61 (type_qualifier_list_opt)

    type_qualifier_list_opt	go to state 1199
    type_qualifier_list	go to state 460
    type_qualifier	go to state 42



state 1159

    constructor_parameter_list_and_body  ->  '(' named_parameter_type_list ')' type_qualifier_list_opt . ';'   (rule 534)
    constructor_parameter_list_and_body  ->  '(' named_parameter_type_list ')' type_qualifier_list_opt . constructor_init_list_opt compound_statement   (rule 537)

    ':' 	shift, and go to state 406
    ';' 	shift, and go to state 1200

    $default	reduce using rule 564 (constructor_init_list_opt)

    constructor_init_list_opt	go to state 1201
    constructor_init_list	go to state 408



state 1160

    constructor_parameter_list_and_body  ->  '(' type_name initializer ')' . type_qualifier_list_opt ';'   (rule 533)
    constructor_parameter_list_and_body  ->  '(' type_name initializer ')' . type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 536)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 61 (type_qualifier_list_opt)

    type_qualifier_list_opt	go to state 1202
    type_qualifier_list	go to state 460
    type_qualifier	go to state 42



state 1161

    member_conflict_paren_postfix_declaring_item  ->  TYPEDEFname '(' paren_typedef_declarator ')' member_pure_opt .   (rule 369)

    $default	reduce using rule 369 (member_conflict_paren_postfix_declaring_item)



state 1162

    member_conflict_paren_postfix_declaring_item  ->  TYPEDEFname '(' paren_typedef_declarator ')' postfixing_abstract_declarator . member_pure_opt   (rule 372)
    postfix_paren_typedef_declarator  ->  '(' paren_typedef_declarator ')' postfixing_abstract_declarator .   (rule 599)

    '=' 	shift, and go to state 1043

    '{' 	reduce using rule 599 (postfix_paren_typedef_declarator)
    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1203



state 1163

    member_conflict_paren_postfix_declaring_item  ->  TYPEDEFname '(' simple_paren_typedef_declarator postfixing_abstract_declarator ')' . member_pure_opt   (rule 370)
    postfix_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator postfixing_abstract_declarator ')' .   (rule 597)

    '=' 	shift, and go to state 1043

    '{' 	reduce using rule 597 (postfix_paren_typedef_declarator)
    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1204



state 1164

    constructor_conflicting_parameter_list_and_body  ->  '(' global_or_scoped_typedefname ')' type_qualifier_list_opt . ';'   (rule 542)
    constructor_conflicting_parameter_list_and_body  ->  '(' global_or_scoped_typedefname ')' type_qualifier_list_opt . constructor_init_list_opt compound_statement   (rule 551)

    ':' 	shift, and go to state 406
    ';' 	shift, and go to state 1205

    $default	reduce using rule 564 (constructor_init_list_opt)

    constructor_init_list_opt	go to state 1206
    constructor_init_list	go to state 408



state 1165

    constructor_conflicting_parameter_list_and_body  ->  '(' global_or_scoped_typedefname abstract_declarator ')' . type_qualifier_list_opt ';'   (rule 546)
    constructor_conflicting_parameter_list_and_body  ->  '(' global_or_scoped_typedefname abstract_declarator ')' . type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 555)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19

    $default	reduce using rule 61 (type_qualifier_list_opt)

    type_qualifier_list_opt	go to state 1207
    type_qualifier_list	go to state 460
    type_qualifier	go to state 42



state 1166

    bit_field_identifier_declarator  ->  identifier_declarator @13 ':' constant_expression .   (rule 384)

    $default	reduce using rule 384 (bit_field_identifier_declarator)



state 1167

    member_conflict_paren_declaring_item  ->  TYPEDEFname asterisk_or_ampersand '(' TYPEDEFname ')' . member_pure_opt   (rule 358)
    paren_typedef_declarator  ->  asterisk_or_ampersand '(' TYPEDEFname ')' .   (rule 592)

    '=' 	shift, and go to state 1043

    '{' 	reduce using rule 592 (paren_typedef_declarator)
    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1208



state 1168

    member_conflict_paren_declaring_item  ->  TYPEDEFname asterisk_or_ampersand '(' simple_paren_typedef_declarator ')' . member_pure_opt   (rule 356)
    paren_typedef_declarator  ->  asterisk_or_ampersand '(' simple_paren_typedef_declarator ')' .   (rule 590)

    '=' 	shift, and go to state 1043

    '{' 	reduce using rule 590 (paren_typedef_declarator)
    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1209



state 1169

    member_conflict_paren_declaring_item  ->  TYPEDEFname unary_modifier '(' TYPEDEFname ')' . member_pure_opt   (rule 359)
    paren_typedef_declarator  ->  unary_modifier '(' TYPEDEFname ')' .   (rule 593)

    '=' 	shift, and go to state 1043

    '{' 	reduce using rule 593 (paren_typedef_declarator)
    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1210



state 1170

    member_conflict_paren_declaring_item  ->  TYPEDEFname unary_modifier '(' simple_paren_typedef_declarator ')' . member_pure_opt   (rule 357)
    paren_typedef_declarator  ->  unary_modifier '(' simple_paren_typedef_declarator ')' .   (rule 591)

    '=' 	shift, and go to state 1043

    '{' 	reduce using rule 591 (paren_typedef_declarator)
    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1211



state 1171

    member_conflict_paren_postfix_declaring_item  ->  declaration_specifier '(' TYPEDEFname postfixing_abstract_declarator ')' . member_pure_opt   (rule 375)
    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname postfixing_abstract_declarator ')' . type_qualifier_list_opt ';'   (rule 562)
    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname postfixing_abstract_declarator ')' . type_qualifier_list_opt constructor_init_list_opt compound_statement   (rule 563)
    postfix_paren_typedef_declarator  ->  '(' TYPEDEFname postfixing_abstract_declarator ')' .   (rule 598)

    CONST	shift, and go to state 13
    VOLATILE	shift, and go to state 19
    '=' 	shift, and go to state 1043

    ',' 	reduce using rule 377 (member_pure_opt)
    ';' 	reduce using rule 61 (type_qualifier_list_opt)
    ';' 	[reduce using rule 377 (member_pure_opt)]
    '{' 	reduce using rule 61 (type_qualifier_list_opt)
    '{' 	[reduce using rule 598 (postfix_paren_typedef_declarator)]
    $default	reduce using rule 61 (type_qualifier_list_opt)

    type_qualifier_list_opt	go to state 1186
    type_qualifier_list	go to state 460
    type_qualifier	go to state 42
    member_pure_opt	go to state 1212



state 1172

    member_conflict_paren_postfix_declaring_item  ->  declaration_specifier '(' paren_typedef_declarator ')' member_pure_opt .   (rule 373)

    $default	reduce using rule 373 (member_conflict_paren_postfix_declaring_item)



state 1173

    member_conflict_paren_postfix_declaring_item  ->  declaration_specifier '(' paren_typedef_declarator ')' postfixing_abstract_declarator . member_pure_opt   (rule 376)
    postfix_paren_typedef_declarator  ->  '(' paren_typedef_declarator ')' postfixing_abstract_declarator .   (rule 599)

    '=' 	shift, and go to state 1043

    '{' 	reduce using rule 599 (postfix_paren_typedef_declarator)
    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1213



state 1174

    member_conflict_paren_postfix_declaring_item  ->  declaration_specifier '(' simple_paren_typedef_declarator postfixing_abstract_declarator ')' . member_pure_opt   (rule 374)
    postfix_paren_typedef_declarator  ->  '(' simple_paren_typedef_declarator postfixing_abstract_declarator ')' .   (rule 597)

    '=' 	shift, and go to state 1043

    '{' 	reduce using rule 597 (postfix_paren_typedef_declarator)
    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1214



state 1175

    member_conflict_paren_declaring_item  ->  declaration_specifier asterisk_or_ampersand '(' TYPEDEFname ')' . member_pure_opt   (rule 364)
    paren_typedef_declarator  ->  asterisk_or_ampersand '(' TYPEDEFname ')' .   (rule 592)

    '=' 	shift, and go to state 1043

    '{' 	reduce using rule 592 (paren_typedef_declarator)
    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1215



state 1176

    member_conflict_paren_declaring_item  ->  declaration_specifier asterisk_or_ampersand '(' simple_paren_typedef_declarator ')' . member_pure_opt   (rule 362)
    paren_typedef_declarator  ->  asterisk_or_ampersand '(' simple_paren_typedef_declarator ')' .   (rule 590)

    '=' 	shift, and go to state 1043

    '{' 	reduce using rule 590 (paren_typedef_declarator)
    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1216



state 1177

    member_conflict_paren_declaring_item  ->  declaration_specifier unary_modifier '(' TYPEDEFname ')' . member_pure_opt   (rule 365)
    paren_typedef_declarator  ->  unary_modifier '(' TYPEDEFname ')' .   (rule 593)

    '=' 	shift, and go to state 1043

    '{' 	reduce using rule 593 (paren_typedef_declarator)
    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1217



state 1178

    member_conflict_paren_declaring_item  ->  declaration_specifier unary_modifier '(' simple_paren_typedef_declarator ')' . member_pure_opt   (rule 363)
    paren_typedef_declarator  ->  unary_modifier '(' simple_paren_typedef_declarator ')' .   (rule 591)

    '=' 	shift, and go to state 1043

    '{' 	reduce using rule 591 (paren_typedef_declarator)
    $default	reduce using rule 377 (member_pure_opt)

    member_pure_opt	go to state 1218



state 1179

    iteration_statement  ->  FOR '(' comma_expression_opt ';' comma_expression_opt ';' . comma_expression_opt ')' statement   (rule 477)

    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    LONG	shift, and go to state 6
    CHAR	shift, and go to state 10
    UNION	shift, and go to state 12
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    SIZEOF	shift, and go to state 316
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    IDENTIFIER	shift, and go to state 27
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 381
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335

    CLCL	reduce using rule 644 (@22)
    $default	reduce using rule 171 (comma_expression_opt)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 676
    comma_expression_opt	go to state 1219
    basic_type_name	go to state 386
    aggregate_key	go to state 155
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 387
    tag_name	go to state 77
    global_scope	go to state 388
    @22 	go to state 79
    global_or_scope	go to state 389
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 390



state 1180

    iteration_statement  ->  FOR '(' declaration comma_expression_opt ';' comma_expression_opt . ')' statement   (rule 478)

    ')' 	shift, and go to state 1220



state 1181

    iteration_statement  ->  DO statement WHILE '(' comma_expression ')' . ';'   (rule 476)

    ';' 	shift, and go to state 1221



state 1182

    selection_statement  ->  IF '(' comma_expression ')' statement ELSE . statement   (rule 473)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    BREAK	shift, and go to state 662
    LONG	shift, and go to state 6
    SWITCH	shift, and go to state 663
    CASE	shift, and go to state 664
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    RETURN	shift, and go to state 665
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    CONTINUE	shift, and go to state 666
    FOR 	shift, and go to state 667
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    DEFAULT	shift, and go to state 668
    GOTO	shift, and go to state 669
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    DO  	shift, and go to state 670
    IF  	shift, and go to state 671
    STATIC	shift, and go to state 20
    WHILE	shift, and go to state 672
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 673
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 674
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335
    '{' 	shift, and go to state 251

    CLCL	reduce using rule 644 (@22)
    $default	reduce using rule 171 (comma_expression_opt)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 676
    comma_expression_opt	go to state 677
    declaration	go to state 678
    default_declaring_list	go to state 36
    declaring_list	go to state 37
    declaration_specifier	go to state 450
    type_specifier	go to state 451
    declaration_qualifier_list	go to state 452
    type_qualifier_list	go to state 453
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 45
    sue_type_specifier_elaboration	go to state 46
    sue_type_specifier	go to state 47
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 679
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    statement	go to state 1222
    labeled_statement	go to state 681
    compound_statement	go to state 682
    expression_statement	go to state 683
    selection_statement	go to state 684
    iteration_statement	go to state 685
    jump_statement	go to state 686
    label	go to state 687
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 373
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 688



state 1183

    allocation_expression  ->  global_opt_scope_opt_operator_new '(' argument_expression_list ')' '(' type_name ')' operator_new_initializer_opt .   (rule 97)

    $default	reduce using rule 97 (allocation_expression)



state 1184

    constructor_conflicting_parameter_list_and_body  ->  '(' TYPEDEFname ')' type_qualifier_list_opt ';' .   (rule 541)

    $default	reduce using rule 541 (constructor_conflicting_parameter_list_and_body)



state 1185

    constructor_conflicting_parameter_list_and_body  ->  '(' TYPEDEFname ')' type_qualifier_list_opt constructor_init_list_opt . compound_statement   (rule 550)

    '{' 	shift, and go to state 251

    compound_statement	go to state 1223



state 1186

    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname postfixing_abstract_declarator ')' type_qualifier_list_opt . ';'   (rule 562)
    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname postfixing_abstract_declarator ')' type_qualifier_list_opt . constructor_init_list_opt compound_statement   (rule 563)

    ':' 	shift, and go to state 406
    ';' 	shift, and go to state 1224

    $default	reduce using rule 564 (constructor_init_list_opt)

    constructor_init_list_opt	go to state 1225
    constructor_init_list	go to state 408



state 1187

    member_conflict_paren_postfix_declaring_item  ->  TYPEDEFname '(' TYPEDEFname postfixing_abstract_declarator ')' member_pure_opt .   (rule 371)

    $default	reduce using rule 371 (member_conflict_paren_postfix_declaring_item)



state 1188

    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname unary_abstract_declarator ')' type_qualifier_list_opt . ';'   (rule 558)
    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname unary_abstract_declarator ')' type_qualifier_list_opt . constructor_init_list_opt compound_statement   (rule 559)

    ':' 	shift, and go to state 406
    ';' 	shift, and go to state 1226

    $default	reduce using rule 564 (constructor_init_list_opt)

    constructor_init_list_opt	go to state 1227
    constructor_init_list	go to state 408



state 1189

    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname postfix_abstract_declarator ')' type_qualifier_list_opt . ';'   (rule 560)
    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname postfix_abstract_declarator ')' type_qualifier_list_opt . constructor_init_list_opt compound_statement   (rule 561)

    ':' 	shift, and go to state 406
    ';' 	shift, and go to state 1228

    $default	reduce using rule 564 (constructor_init_list_opt)

    constructor_init_list_opt	go to state 1229
    constructor_init_list	go to state 408



state 1190

    constructor_parameter_list_and_body  ->  '(' ')' type_qualifier_list_opt constructor_init_list_opt compound_statement .   (rule 535)

    $default	reduce using rule 535 (constructor_parameter_list_and_body)



state 1191

    constructor_conflicting_parameter_list_and_body  ->  '(' type_specifier ')' type_qualifier_list_opt ';' .   (rule 539)

    $default	reduce using rule 539 (constructor_conflicting_parameter_list_and_body)



state 1192

    constructor_conflicting_parameter_list_and_body  ->  '(' type_specifier ')' type_qualifier_list_opt constructor_init_list_opt . compound_statement   (rule 548)

    '{' 	shift, and go to state 251

    compound_statement	go to state 1230



state 1193

    constructor_conflicting_parameter_list_and_body  ->  '(' type_specifier abstract_declarator ')' type_qualifier_list_opt . ';'   (rule 544)
    constructor_conflicting_parameter_list_and_body  ->  '(' type_specifier abstract_declarator ')' type_qualifier_list_opt . constructor_init_list_opt compound_statement   (rule 553)

    ':' 	shift, and go to state 406
    ';' 	shift, and go to state 1231

    $default	reduce using rule 564 (constructor_init_list_opt)

    constructor_init_list_opt	go to state 1232
    constructor_init_list	go to state 408



state 1194

    constructor_conflicting_parameter_list_and_body  ->  '(' type_qualifier_list ')' type_qualifier_list_opt ';' .   (rule 543)

    $default	reduce using rule 543 (constructor_conflicting_parameter_list_and_body)



state 1195

    constructor_conflicting_parameter_list_and_body  ->  '(' type_qualifier_list ')' type_qualifier_list_opt constructor_init_list_opt . compound_statement   (rule 552)

    '{' 	shift, and go to state 251

    compound_statement	go to state 1233



state 1196

    constructor_conflicting_parameter_list_and_body  ->  '(' type_qualifier_list abstract_declarator ')' type_qualifier_list_opt . ';'   (rule 547)
    constructor_conflicting_parameter_list_and_body  ->  '(' type_qualifier_list abstract_declarator ')' type_qualifier_list_opt . constructor_init_list_opt compound_statement   (rule 556)

    ':' 	shift, and go to state 406
    ';' 	shift, and go to state 1234

    $default	reduce using rule 564 (constructor_init_list_opt)

    constructor_init_list_opt	go to state 1235
    constructor_init_list	go to state 408



state 1197

    constructor_conflicting_parameter_list_and_body  ->  '(' basic_type_name ')' type_qualifier_list_opt ';' .   (rule 540)

    $default	reduce using rule 540 (constructor_conflicting_parameter_list_and_body)



state 1198

    constructor_conflicting_parameter_list_and_body  ->  '(' basic_type_name ')' type_qualifier_list_opt constructor_init_list_opt . compound_statement   (rule 549)

    '{' 	shift, and go to state 251

    compound_statement	go to state 1236



state 1199

    constructor_conflicting_parameter_list_and_body  ->  '(' basic_type_name abstract_declarator ')' type_qualifier_list_opt . ';'   (rule 545)
    constructor_conflicting_parameter_list_and_body  ->  '(' basic_type_name abstract_declarator ')' type_qualifier_list_opt . constructor_init_list_opt compound_statement   (rule 554)

    ':' 	shift, and go to state 406
    ';' 	shift, and go to state 1237

    $default	reduce using rule 564 (constructor_init_list_opt)

    constructor_init_list_opt	go to state 1238
    constructor_init_list	go to state 408



state 1200

    constructor_parameter_list_and_body  ->  '(' named_parameter_type_list ')' type_qualifier_list_opt ';' .   (rule 534)

    $default	reduce using rule 534 (constructor_parameter_list_and_body)



state 1201

    constructor_parameter_list_and_body  ->  '(' named_parameter_type_list ')' type_qualifier_list_opt constructor_init_list_opt . compound_statement   (rule 537)

    '{' 	shift, and go to state 251

    compound_statement	go to state 1239



state 1202

    constructor_parameter_list_and_body  ->  '(' type_name initializer ')' type_qualifier_list_opt . ';'   (rule 533)
    constructor_parameter_list_and_body  ->  '(' type_name initializer ')' type_qualifier_list_opt . constructor_init_list_opt compound_statement   (rule 536)

    ':' 	shift, and go to state 406
    ';' 	shift, and go to state 1240

    $default	reduce using rule 564 (constructor_init_list_opt)

    constructor_init_list_opt	go to state 1241
    constructor_init_list	go to state 408



state 1203

    member_conflict_paren_postfix_declaring_item  ->  TYPEDEFname '(' paren_typedef_declarator ')' postfixing_abstract_declarator member_pure_opt .   (rule 372)

    $default	reduce using rule 372 (member_conflict_paren_postfix_declaring_item)



state 1204

    member_conflict_paren_postfix_declaring_item  ->  TYPEDEFname '(' simple_paren_typedef_declarator postfixing_abstract_declarator ')' member_pure_opt .   (rule 370)

    $default	reduce using rule 370 (member_conflict_paren_postfix_declaring_item)



state 1205

    constructor_conflicting_parameter_list_and_body  ->  '(' global_or_scoped_typedefname ')' type_qualifier_list_opt ';' .   (rule 542)

    $default	reduce using rule 542 (constructor_conflicting_parameter_list_and_body)



state 1206

    constructor_conflicting_parameter_list_and_body  ->  '(' global_or_scoped_typedefname ')' type_qualifier_list_opt constructor_init_list_opt . compound_statement   (rule 551)

    '{' 	shift, and go to state 251

    compound_statement	go to state 1242



state 1207

    constructor_conflicting_parameter_list_and_body  ->  '(' global_or_scoped_typedefname abstract_declarator ')' type_qualifier_list_opt . ';'   (rule 546)
    constructor_conflicting_parameter_list_and_body  ->  '(' global_or_scoped_typedefname abstract_declarator ')' type_qualifier_list_opt . constructor_init_list_opt compound_statement   (rule 555)

    ':' 	shift, and go to state 406
    ';' 	shift, and go to state 1243

    $default	reduce using rule 564 (constructor_init_list_opt)

    constructor_init_list_opt	go to state 1244
    constructor_init_list	go to state 408



state 1208

    member_conflict_paren_declaring_item  ->  TYPEDEFname asterisk_or_ampersand '(' TYPEDEFname ')' member_pure_opt .   (rule 358)

    $default	reduce using rule 358 (member_conflict_paren_declaring_item)



state 1209

    member_conflict_paren_declaring_item  ->  TYPEDEFname asterisk_or_ampersand '(' simple_paren_typedef_declarator ')' member_pure_opt .   (rule 356)

    $default	reduce using rule 356 (member_conflict_paren_declaring_item)



state 1210

    member_conflict_paren_declaring_item  ->  TYPEDEFname unary_modifier '(' TYPEDEFname ')' member_pure_opt .   (rule 359)

    $default	reduce using rule 359 (member_conflict_paren_declaring_item)



state 1211

    member_conflict_paren_declaring_item  ->  TYPEDEFname unary_modifier '(' simple_paren_typedef_declarator ')' member_pure_opt .   (rule 357)

    $default	reduce using rule 357 (member_conflict_paren_declaring_item)



state 1212

    member_conflict_paren_postfix_declaring_item  ->  declaration_specifier '(' TYPEDEFname postfixing_abstract_declarator ')' member_pure_opt .   (rule 375)

    $default	reduce using rule 375 (member_conflict_paren_postfix_declaring_item)



state 1213

    member_conflict_paren_postfix_declaring_item  ->  declaration_specifier '(' paren_typedef_declarator ')' postfixing_abstract_declarator member_pure_opt .   (rule 376)

    $default	reduce using rule 376 (member_conflict_paren_postfix_declaring_item)



state 1214

    member_conflict_paren_postfix_declaring_item  ->  declaration_specifier '(' simple_paren_typedef_declarator postfixing_abstract_declarator ')' member_pure_opt .   (rule 374)

    $default	reduce using rule 374 (member_conflict_paren_postfix_declaring_item)



state 1215

    member_conflict_paren_declaring_item  ->  declaration_specifier asterisk_or_ampersand '(' TYPEDEFname ')' member_pure_opt .   (rule 364)

    $default	reduce using rule 364 (member_conflict_paren_declaring_item)



state 1216

    member_conflict_paren_declaring_item  ->  declaration_specifier asterisk_or_ampersand '(' simple_paren_typedef_declarator ')' member_pure_opt .   (rule 362)

    $default	reduce using rule 362 (member_conflict_paren_declaring_item)



state 1217

    member_conflict_paren_declaring_item  ->  declaration_specifier unary_modifier '(' TYPEDEFname ')' member_pure_opt .   (rule 365)

    $default	reduce using rule 365 (member_conflict_paren_declaring_item)



state 1218

    member_conflict_paren_declaring_item  ->  declaration_specifier unary_modifier '(' simple_paren_typedef_declarator ')' member_pure_opt .   (rule 363)

    $default	reduce using rule 363 (member_conflict_paren_declaring_item)



state 1219

    iteration_statement  ->  FOR '(' comma_expression_opt ';' comma_expression_opt ';' comma_expression_opt . ')' statement   (rule 477)

    ')' 	shift, and go to state 1245



state 1220

    iteration_statement  ->  FOR '(' declaration comma_expression_opt ';' comma_expression_opt ')' . statement   (rule 478)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    BREAK	shift, and go to state 662
    LONG	shift, and go to state 6
    SWITCH	shift, and go to state 663
    CASE	shift, and go to state 664
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    RETURN	shift, and go to state 665
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    CONTINUE	shift, and go to state 666
    FOR 	shift, and go to state 667
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    DEFAULT	shift, and go to state 668
    GOTO	shift, and go to state 669
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    DO  	shift, and go to state 670
    IF  	shift, and go to state 671
    STATIC	shift, and go to state 20
    WHILE	shift, and go to state 672
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 673
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 674
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335
    '{' 	shift, and go to state 251

    CLCL	reduce using rule 644 (@22)
    $default	reduce using rule 171 (comma_expression_opt)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 676
    comma_expression_opt	go to state 677
    declaration	go to state 678
    default_declaring_list	go to state 36
    declaring_list	go to state 37
    declaration_specifier	go to state 450
    type_specifier	go to state 451
    declaration_qualifier_list	go to state 452
    type_qualifier_list	go to state 453
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 45
    sue_type_specifier_elaboration	go to state 46
    sue_type_specifier	go to state 47
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 679
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    statement	go to state 1246
    labeled_statement	go to state 681
    compound_statement	go to state 682
    expression_statement	go to state 683
    selection_statement	go to state 684
    iteration_statement	go to state 685
    jump_statement	go to state 686
    label	go to state 687
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 373
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 688



state 1221

    iteration_statement  ->  DO statement WHILE '(' comma_expression ')' ';' .   (rule 476)

    $default	reduce using rule 476 (iteration_statement)



state 1222

    selection_statement  ->  IF '(' comma_expression ')' statement ELSE statement .   (rule 473)

    $default	reduce using rule 473 (selection_statement)



state 1223

    constructor_conflicting_parameter_list_and_body  ->  '(' TYPEDEFname ')' type_qualifier_list_opt constructor_init_list_opt compound_statement .   (rule 550)

    $default	reduce using rule 550 (constructor_conflicting_parameter_list_and_body)



state 1224

    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname postfixing_abstract_declarator ')' type_qualifier_list_opt ';' .   (rule 562)

    $default	reduce using rule 562 (constructor_conflicting_typedef_declarator)



state 1225

    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname postfixing_abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt . compound_statement   (rule 563)

    '{' 	shift, and go to state 251

    compound_statement	go to state 1247



state 1226

    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname unary_abstract_declarator ')' type_qualifier_list_opt ';' .   (rule 558)

    $default	reduce using rule 558 (constructor_conflicting_typedef_declarator)



state 1227

    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname unary_abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt . compound_statement   (rule 559)

    '{' 	shift, and go to state 251

    compound_statement	go to state 1248



state 1228

    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname postfix_abstract_declarator ')' type_qualifier_list_opt ';' .   (rule 560)

    $default	reduce using rule 560 (constructor_conflicting_typedef_declarator)



state 1229

    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname postfix_abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt . compound_statement   (rule 561)

    '{' 	shift, and go to state 251

    compound_statement	go to state 1249



state 1230

    constructor_conflicting_parameter_list_and_body  ->  '(' type_specifier ')' type_qualifier_list_opt constructor_init_list_opt compound_statement .   (rule 548)

    $default	reduce using rule 548 (constructor_conflicting_parameter_list_and_body)



state 1231

    constructor_conflicting_parameter_list_and_body  ->  '(' type_specifier abstract_declarator ')' type_qualifier_list_opt ';' .   (rule 544)

    $default	reduce using rule 544 (constructor_conflicting_parameter_list_and_body)



state 1232

    constructor_conflicting_parameter_list_and_body  ->  '(' type_specifier abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt . compound_statement   (rule 553)

    '{' 	shift, and go to state 251

    compound_statement	go to state 1250



state 1233

    constructor_conflicting_parameter_list_and_body  ->  '(' type_qualifier_list ')' type_qualifier_list_opt constructor_init_list_opt compound_statement .   (rule 552)

    $default	reduce using rule 552 (constructor_conflicting_parameter_list_and_body)



state 1234

    constructor_conflicting_parameter_list_and_body  ->  '(' type_qualifier_list abstract_declarator ')' type_qualifier_list_opt ';' .   (rule 547)

    $default	reduce using rule 547 (constructor_conflicting_parameter_list_and_body)



state 1235

    constructor_conflicting_parameter_list_and_body  ->  '(' type_qualifier_list abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt . compound_statement   (rule 556)

    '{' 	shift, and go to state 251

    compound_statement	go to state 1251



state 1236

    constructor_conflicting_parameter_list_and_body  ->  '(' basic_type_name ')' type_qualifier_list_opt constructor_init_list_opt compound_statement .   (rule 549)

    $default	reduce using rule 549 (constructor_conflicting_parameter_list_and_body)



state 1237

    constructor_conflicting_parameter_list_and_body  ->  '(' basic_type_name abstract_declarator ')' type_qualifier_list_opt ';' .   (rule 545)

    $default	reduce using rule 545 (constructor_conflicting_parameter_list_and_body)



state 1238

    constructor_conflicting_parameter_list_and_body  ->  '(' basic_type_name abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt . compound_statement   (rule 554)

    '{' 	shift, and go to state 251

    compound_statement	go to state 1252



state 1239

    constructor_parameter_list_and_body  ->  '(' named_parameter_type_list ')' type_qualifier_list_opt constructor_init_list_opt compound_statement .   (rule 537)

    $default	reduce using rule 537 (constructor_parameter_list_and_body)



state 1240

    constructor_parameter_list_and_body  ->  '(' type_name initializer ')' type_qualifier_list_opt ';' .   (rule 533)

    $default	reduce using rule 533 (constructor_parameter_list_and_body)



state 1241

    constructor_parameter_list_and_body  ->  '(' type_name initializer ')' type_qualifier_list_opt constructor_init_list_opt . compound_statement   (rule 536)

    '{' 	shift, and go to state 251

    compound_statement	go to state 1253



state 1242

    constructor_conflicting_parameter_list_and_body  ->  '(' global_or_scoped_typedefname ')' type_qualifier_list_opt constructor_init_list_opt compound_statement .   (rule 551)

    $default	reduce using rule 551 (constructor_conflicting_parameter_list_and_body)



state 1243

    constructor_conflicting_parameter_list_and_body  ->  '(' global_or_scoped_typedefname abstract_declarator ')' type_qualifier_list_opt ';' .   (rule 546)

    $default	reduce using rule 546 (constructor_conflicting_parameter_list_and_body)



state 1244

    constructor_conflicting_parameter_list_and_body  ->  '(' global_or_scoped_typedefname abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt . compound_statement   (rule 555)

    '{' 	shift, and go to state 251

    compound_statement	go to state 1254



state 1245

    iteration_statement  ->  FOR '(' comma_expression_opt ';' comma_expression_opt ';' comma_expression_opt ')' . statement   (rule 477)

    AUTO	shift, and go to state 2
    DOUBLE	shift, and go to state 3
    INT 	shift, and go to state 4
    STRUCT	shift, and go to state 5
    BREAK	shift, and go to state 662
    LONG	shift, and go to state 6
    SWITCH	shift, and go to state 663
    CASE	shift, and go to state 664
    ENUM	shift, and go to state 7
    REGISTER	shift, and go to state 8
    TYPEDEF	shift, and go to state 9
    CHAR	shift, and go to state 10
    EXTERN	shift, and go to state 145
    RETURN	shift, and go to state 665
    UNION	shift, and go to state 12
    CONST	shift, and go to state 13
    FLOAT	shift, and go to state 14
    SHORT	shift, and go to state 15
    UNSIGNED	shift, and go to state 16
    CONTINUE	shift, and go to state 666
    FOR 	shift, and go to state 667
    SIGNED	shift, and go to state 17
    VOID	shift, and go to state 18
    DEFAULT	shift, and go to state 668
    GOTO	shift, and go to state 669
    SIZEOF	shift, and go to state 316
    VOLATILE	shift, and go to state 19
    DO  	shift, and go to state 670
    IF  	shift, and go to state 671
    STATIC	shift, and go to state 20
    WHILE	shift, and go to state 672
    NEW 	shift, and go to state 317
    DELETE	shift, and go to state 318
    THIS	shift, and go to state 319
    OPERATOR	shift, and go to state 21
    CLASS	shift, and go to state 22
    VIRTUAL	shift, and go to state 23
    FRIEND	shift, and go to state 24
    INLINE	shift, and go to state 25
    OVERLOAD	shift, and go to state 26
    IDENTIFIER	shift, and go to state 673
    STRINGliteral	shift, and go to state 320
    FLOATINGconstant	shift, and go to state 321
    INTEGERconstant	shift, and go to state 322
    CHARACTERconstant	shift, and go to state 323
    OCTALconstant	shift, and go to state 324
    HEXconstant	shift, and go to state 325
    TYPEDEFname	shift, and go to state 674
    ICR 	shift, and go to state 327
    DECR	shift, and go to state 328
    '(' 	shift, and go to state 330
    '+' 	shift, and go to state 332
    '-' 	shift, and go to state 333
    '*' 	shift, and go to state 30
    '&' 	shift, and go to state 31
    '~' 	shift, and go to state 334
    '!' 	shift, and go to state 335
    '{' 	shift, and go to state 251

    CLCL	reduce using rule 644 (@22)
    $default	reduce using rule 171 (comma_expression_opt)

    constant	go to state 336
    string_literal_list	go to state 337
    primary_expression	go to state 338
    operator_function_name	go to state 34
    postfix_expression	go to state 339
    unary_expression	go to state 341
    allocation_expression	go to state 342
    global_opt_scope_opt_operator_new	go to state 343
    cast_expression	go to state 344
    deallocation_expression	go to state 345
    global_opt_scope_opt_delete	go to state 346
    point_member_expression	go to state 347
    multiplicative_expression	go to state 348
    additive_expression	go to state 349
    shift_expression	go to state 350
    relational_expression	go to state 351
    equality_expression	go to state 352
    AND_expression	go to state 353
    exclusive_OR_expression	go to state 354
    inclusive_OR_expression	go to state 355
    logical_AND_expression	go to state 356
    logical_OR_expression	go to state 357
    conditional_expression	go to state 358
    assignment_expression	go to state 522
    comma_expression	go to state 676
    comma_expression_opt	go to state 677
    declaration	go to state 678
    default_declaring_list	go to state 36
    declaring_list	go to state 37
    declaration_specifier	go to state 450
    type_specifier	go to state 451
    declaration_qualifier_list	go to state 452
    type_qualifier_list	go to state 453
    type_qualifier	go to state 42
    basic_declaration_specifier	go to state 43
    basic_type_specifier	go to state 44
    sue_declaration_specifier	go to state 45
    sue_type_specifier_elaboration	go to state 46
    sue_type_specifier	go to state 47
    typedef_declaration_specifier	go to state 48
    typedef_type_specifier	go to state 49
    storage_class	go to state 50
    basic_type_name	go to state 679
    elaborated_type_name_elaboration	go to state 52
    elaborated_type_name	go to state 53
    aggregate_name_elaboration	go to state 54
    aggregate_name	go to state 55
    aggregate_key	go to state 56
    enum_name_elaboration	go to state 57
    enum_name	go to state 58
    global_opt_scope_opt_enum_key	go to state 59
    statement	go to state 1255
    labeled_statement	go to state 681
    compound_statement	go to state 682
    expression_statement	go to state 683
    selection_statement	go to state 684
    iteration_statement	go to state 685
    jump_statement	go to state 686
    label	go to state 687
    asterisk_or_ampersand	go to state 372
    scoping_name	go to state 75
    scope	go to state 373
    tag_name	go to state 77
    global_scope	go to state 374
    @22 	go to state 79
    global_or_scope	go to state 375
    scope_opt_identifier	go to state 376
    scope_opt_complex_name	go to state 377
    complex_name	go to state 83
    global_opt_scope_opt_identifier	go to state 378
    global_opt_scope_opt_complex_name	go to state 379
    scoped_typedefname	go to state 84
    global_or_scoped_typedefname	go to state 688



state 1246

    iteration_statement  ->  FOR '(' declaration comma_expression_opt ';' comma_expression_opt ')' statement .   (rule 478)

    $default	reduce using rule 478 (iteration_statement)



state 1247

    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname postfixing_abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement .   (rule 563)

    $default	reduce using rule 563 (constructor_conflicting_typedef_declarator)



state 1248

    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname unary_abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement .   (rule 559)

    $default	reduce using rule 559 (constructor_conflicting_typedef_declarator)



state 1249

    constructor_conflicting_typedef_declarator  ->  '(' TYPEDEFname postfix_abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement .   (rule 561)

    $default	reduce using rule 561 (constructor_conflicting_typedef_declarator)



state 1250

    constructor_conflicting_parameter_list_and_body  ->  '(' type_specifier abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement .   (rule 553)

    $default	reduce using rule 553 (constructor_conflicting_parameter_list_and_body)



state 1251

    constructor_conflicting_parameter_list_and_body  ->  '(' type_qualifier_list abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement .   (rule 556)

    $default	reduce using rule 556 (constructor_conflicting_parameter_list_and_body)



state 1252

    constructor_conflicting_parameter_list_and_body  ->  '(' basic_type_name abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement .   (rule 554)

    $default	reduce using rule 554 (constructor_conflicting_parameter_list_and_body)



state 1253

    constructor_parameter_list_and_body  ->  '(' type_name initializer ')' type_qualifier_list_opt constructor_init_list_opt compound_statement .   (rule 536)

    $default	reduce using rule 536 (constructor_parameter_list_and_body)



state 1254

    constructor_conflicting_parameter_list_and_body  ->  '(' global_or_scoped_typedefname abstract_declarator ')' type_qualifier_list_opt constructor_init_list_opt compound_statement .   (rule 555)

    $default	reduce using rule 555 (constructor_conflicting_parameter_list_and_body)



state 1255

    iteration_statement  ->  FOR '(' comma_expression_opt ';' comma_expression_opt ';' comma_expression_opt ')' statement .   (rule 477)

    $default	reduce using rule 477 (iteration_statement)



state 1256

    $   	go to state 1257



state 1257

    $default	accept
